<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>皆有居</title>
  
  
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://niithub.cn/"/>
  <updated>2022-04-24T06:22:42.260Z</updated>
  <id>https://niithub.cn/</id>
  
  <author>
    <name>niithub</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Mockito 单元测试框架</title>
    <link href="https://niithub.cn//posts/55b89e3b/"/>
    <id>https://niithub.cn//posts/55b89e3b/</id>
    <published>2022-04-24T06:22:42.000Z</published>
    <updated>2022-04-24T06:22:42.260Z</updated>
    
    <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script&gt;
        document.querySelectorAll(&#39;.github-emoji&#39;)
          .forEach(el =&gt; {
            if (!el.dataset.src) { return; }
        
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Predicate在Java中的应用</title>
    <link href="https://niithub.cn//posts/6c5e720f/"/>
    <id>https://niithub.cn//posts/6c5e720f/</id>
    <published>2022-04-21T07:00:13.000Z</published>
    <updated>2022-04-24T06:21:12.977Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Predicate-断言，是一个函数接口，接受一个参数并返回一个布尔值。通常，它应用在集合的过滤器中，如Optional、Stream、Pattern。<br></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Predicate</span>&lt;<span class="title">T</span>&gt; </span>{</span><br><span class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">test</span><span class="params">(T t)</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><h1 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h1><ol><li>Predicate 使得将一些条件(或者业务逻辑)统一管理，方便单元测试</li><li>增强代码可读性</li></ol><h1 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h1><h2 id="and-Predicate-other-or-Predicate-other"><a href="#and-Predicate-other-or-Predicate-other" class="headerlink" title="and(Predicate other)/or(Predicate other)"></a>and(Predicate other)/or(Predicate other)</h2><blockquote><p>断言间的逻辑与/逻辑或</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">    Predicate&lt;Integer&gt; noGreaterThan5 = p -&gt; p &gt; <span class="number">5</span>;</span><br><span class="line">    Predicate&lt;Integer&gt; noLessThan8  = p -&gt; p &lt; <span class="number">8</span>;</span><br><span class="line">    List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>);</span><br><span class="line">    list.stream().filter(noGreaterThan5.and(noLessThan8)).forEach(System.out::println);</span><br><span class="line">    list.stream().filter(noGreaterThan5.or(noLessThan8)).forEach(System.out::println);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="negate"><a href="#negate" class="headerlink" title="negate()"></a>negate()</h2><blockquote><p>返回表示此断言的逻辑否定的断言，即逻辑取反</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">    Predicate&lt;String&gt; startWithA = x -&gt; x.startsWith(<span class="string">"A"</span>);</span><br><span class="line">    List&lt;String&gt; list = Arrays.asList(<span class="string">"A"</span>, <span class="string">"AA"</span>, <span class="string">"AAA"</span>, <span class="string">"B"</span>, <span class="string">"BB"</span>, <span class="string">"BBB"</span>);</span><br><span class="line">    list.stream().filter(startWithA.negate()).forEach(System.out::println);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="test-T-t"><a href="#test-T-t" class="headerlink" title="test(T t)"></a>test(T t)</h2><blockquote><p>布尔测试，根据入参判断是否符合断言规则</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">    Predicate&lt;String&gt; startWithA = x -&gt; x.startsWith(<span class="string">"A"</span>);</span><br><span class="line">    System.out.println(startWithA.test(<span class="string">"BBB"</span>));</span><br><span class="line">    System.out.println(startWithA.test(<span class="string">"AAA"</span>));</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="联结多个断言"><a href="#联结多个断言" class="headerlink" title="联结多个断言"></a>联结多个断言</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">    Predicate&lt;String&gt; startWithA = x -&gt; x.startsWith(<span class="string">"A"</span>);</span><br><span class="line">    System.out.println(startWithA.and(p -&gt; p.length() &gt; <span class="number">4</span>).test(<span class="string">"AAA"</span>));</span><br><span class="line">    System.out.println(startWithA.and(p -&gt; p.length() &gt; <span class="number">4</span>).negate().test(<span class="string">"B"</span>));</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="在正则表达式中的应用"><a href="#在正则表达式中的应用" class="headerlink" title="在正则表达式中的应用"></a>在正则表达式中的应用</h2><blockquote><p>可以通过Pattern.compile().asPredicate()将正则表达式转换为Predicate。 </p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">    Predicate&lt;String&gt; emailFilter = Pattern</span><br><span class="line">            .compile(<span class="string">"^(.+)@example.com$"</span>)</span><br><span class="line">            .asPredicate();</span><br><span class="line">    Stream.of(<span class="string">"alex@example.com"</span>, <span class="string">"bob@yahoo.com"</span>, <span class="string">"cat@google.com"</span>, <span class="string">"david@example.com"</span>).filter(emailFilter).forEach(System.out::println);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;Predicate-断言，是一个函数接口，接受一个参数并返回一个布尔值。通常，它应用在集合的过滤器中，如Optional、Stream、Pa
      
    
    </summary>
    
      <category term="Java" scheme="https://niithub.cn/categories/Java/"/>
    
    
      <category term="Java" scheme="https://niithub.cn/tags/Java/"/>
    
      <category term="Predicate" scheme="https://niithub.cn/tags/Predicate/"/>
    
  </entry>
  
  <entry>
    <title>Java泛型</title>
    <link href="https://niithub.cn//posts/a14eb637/"/>
    <id>https://niithub.cn//posts/a14eb637/</id>
    <published>2022-01-27T09:26:40.000Z</published>
    <updated>2022-04-20T11:58:11.880Z</updated>
    
    <content type="html"><![CDATA[<h1 id="泛型基础"><a href="#泛型基础" class="headerlink" title="泛型基础"></a>泛型基础</h1><p>泛型是基于类型擦除实现的，<code>无法向上转型</code>，但是，可以通过使用通配符来向上转型。</p><h2 id="泛型的优点"><a href="#泛型的优点" class="headerlink" title="泛型的优点"></a>泛型的优点</h2><ul><li>编译时的强类型检测</li><li>避免了类型转换</li><li>可以用来实现通用算法</li></ul><h2 id="通用的泛型参数名"><a href="#通用的泛型参数名" class="headerlink" title="通用的泛型参数名"></a>通用的泛型参数名</h2><ul><li>E - Element (used extensively by the Java Collections Framework)</li><li>K - Key</li><li>N - Number</li><li>T - Type</li><li>V - Value</li><li>S,U,V etc. - 2nd, 3rd, 4th types</li></ul><h2 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h2><p>泛型类的声明和非泛型类的声明类似，除了在类名后面添加了类型参数声明部分。由尖括号（&lt;&gt;）分隔的类型参数部分跟在类名后面。它指定类型参数（也称为类型变量）T1，T2，…和 Tn。<br>一般将泛型中的类名称为原型，而将 &lt;&gt; 指定的参数称为类型参数。</p><h3 id="单参数"><a href="#单参数" class="headerlink" title="单参数"></a>单参数</h3><p>使用示例如下：<br></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValueUtil</span>&lt;<span class="title">T</span>&gt; </span>{</span><br><span class="line"></span><br><span class="line">    T value;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getValue</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ValueUtil&lt;T&gt; <span class="title">setValue</span><span class="params">(T value)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"value type:"</span> + <span class="keyword">this</span>.value.getClass());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> StringJoiner(<span class="string">", "</span>, ValueUtil.class.getSimpleName() + <span class="string">"["</span>, <span class="string">"]"</span>)</span><br><span class="line">                .add(<span class="string">"value="</span> + value)</span><br><span class="line">                .toString();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">    ValueUtil&lt;String&gt; stringValue = <span class="keyword">new</span> ValueUtil&lt;&gt;();</span><br><span class="line">    stringValue.value = <span class="string">"test value"</span>;</span><br><span class="line">    System.out.println(stringValue.toString());</span><br><span class="line">    ValueUtil&lt;Integer&gt; intValue = <span class="keyword">new</span> ValueUtil&lt;&gt;();</span><br><span class="line">    intValue.value = <span class="number">10</span>;</span><br><span class="line">    System.out.println(intValue.toString());</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>输出结果为：<br></p><figure class="highlight fortran"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">value</span> <span class="keyword">type</span>:<span class="keyword">class</span> java<span class="number">.</span>lang<span class="number">.</span>String</span><br><span class="line">ValueUtil[<span class="keyword">value</span>=test <span class="keyword">value</span>]</span><br><span class="line"><span class="keyword">value</span> <span class="keyword">type</span>:<span class="keyword">class</span> java<span class="number">.</span>lang<span class="number">.</span><span class="keyword">Integer</span></span><br><span class="line">ValueUtil[<span class="keyword">value</span>=<span class="number">10</span>]</span><br></pre></td></tr></tbody></table></figure><p></p><h3 id="多参数"><a href="#多参数" class="headerlink" title="多参数"></a>多参数</h3><figure class="highlight nim"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class <span class="type">MyEntry</span>&lt;K, V&gt; implements <span class="type">Map</span>.<span class="type">Entry</span>&lt;K, V&gt; <span class="meta">{...}</span></span><br></pre></td></tr></tbody></table></figure><h2 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Content</span>&lt;<span class="title">T</span>&gt; </span>{</span><br><span class="line">    <span class="function">T <span class="title">text</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="明确声明泛型类型"><a href="#明确声明泛型类型" class="headerlink" title="明确声明泛型类型"></a>明确声明泛型类型</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntegerContent</span> <span class="keyword">implements</span> <span class="title">Content</span>&lt;<span class="title">Integer</span>&gt; </span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">text</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="不明确声明泛型类型"><a href="#不明确声明泛型类型" class="headerlink" title="不明确声明泛型类型"></a>不明确声明泛型类型</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TContent</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Content</span>&lt;<span class="title">T</span>&gt;</span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">text</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h2><p>泛型方法是引入其自己的类型参数的方法。泛型方法可以是普通方法、静态方法以及构造方法。是否拥有泛型方法，与其所在的类是否是泛型没有关系。</p><p>基本语法：<br></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">func</span><span class="params">(T obj)</span> </span>{}</span><br></pre></td></tr></tbody></table></figure><br>可变参数：<br><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">noParams</span><span class="params">(T... args)</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><h1 id="泛型之类型"><a href="#泛型之类型" class="headerlink" title="泛型之类型"></a>泛型之类型</h1><h2 id="类型擦除"><a href="#类型擦除" class="headerlink" title="类型擦除"></a>类型擦除</h2><ul><li>把泛型中的所有类型参数替换为 Object，如果指定类型边界，则使用类型边界来替换。因此，生成的字节码仅包含普通的类，接口和方法。</li><li>擦除出现的类型声明，即去掉 &lt;&gt; 的内容。比如 T get() 方法声明就变成了 Object get() ；List<string> 就变成了 List。如有必要，插入类型转换以保持类型安全。</string></li><li>生成桥接方法以保留扩展泛型类型中的多态性。类型擦除确保不为参数化类型创建新类；因此，泛型不会产生运行时开销。</li></ul><h2 id="类型通配符（泛型边界）"><a href="#类型通配符（泛型边界）" class="headerlink" title="类型通配符（泛型边界）"></a>类型通配符（泛型边界）</h2><p>类型通配符一般是使用<code>?</code>代替具体的类型参数。例如<code>List&lt;?&gt;</code>在逻辑上是<code>List&lt;String&gt;</code>，<code>List&lt;Integer&gt;</code>等所有<code>List&lt;具体类型实参&gt;</code>的父类。<br>上界通配符和下界通配符不能同时使用，频繁set的内容，适合用下界通配符&lt;? super T&gt;，因为上界通配符不支持写入。频繁get的内容，适合用上界通配符 &lt;? extends T&gt;，因为下界通配符会返回Object，每次转换很麻烦。</p><h3 id="上界通配符"><a href="#上界通配符" class="headerlink" title="上界通配符"></a>上界通配符</h3><p>语法：<br></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;T extends XXX&gt;</span><br></pre></td></tr></tbody></table></figure><br>上界是接口的泛型是要求实际的类型必须继承某个接口。<br><img src="https://raw.githubusercontent.com/niithub/pic/master/blog/10341818-ef5186c73458b5ae.w2vu7l9f438.png" alt="示意图"><br>例如，对注解进行操作的方法限制入参只接受<code>Annotation</code>或其子类的实例。<br><figure class="highlight crystal"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> static &lt;T extends Annotation&gt; T getAnnotationByType(final Annotation[] annotations, final Class&lt;T&gt; clazz) {</span><br><span class="line">    T result = null;</span><br><span class="line">    <span class="keyword">for</span> (final Annotation <span class="keyword">annotation</span> : <span class="title">annotations</span>) {</span><br><span class="line">        <span class="keyword">if</span> (clazz.isAssignableFrom(<span class="keyword">annotation</span>.getClass())) {</span><br><span class="line">            result = (T) <span class="keyword">annotation</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><br>类型边界可以设置多个，第一个类型参数可以是类或接口，其他类型参数只能是接口。<br><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;T extends A1 &amp; A2 &amp; A3&gt;</span><br></pre></td></tr></tbody></table></figure><p></p><h3 id="下界通配符"><a href="#下界通配符" class="headerlink" title="下界通配符"></a>下界通配符</h3><p><strong>下界通配符</strong>将未知类型限制为该类型的特定类型或超类类型。下界通配符匹配一个类及其所有的父类，：<br><img src="https://raw.githubusercontent.com/niithub/pic/master/blog/10341818-1a063d3ee051b407.dmkiaau69s5.png" alt="示意图"><br></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;? <span class="keyword">super</span> Number&gt;</span><br></pre></td></tr></tbody></table></figure><p></p><h3 id="无界通配符"><a href="#无界通配符" class="headerlink" title="无界通配符"></a>无界通配符</h3><ol><li>应用场景：</li></ol><ul><li>可以使用 Object 类中提供的功能来实现的方法。</li><li>使用不依赖于类型参数的泛型类中的方法。</li></ul><ol start="2"><li>?与Object的区别</li></ol><ul><li>List&lt;?&gt;变量的元素只能读，不能写（可以插入null元素）</li><li>List<object>不是List<string>的父类，但List&lt;?&gt;是所有List泛型的父类，因此List&lt;?&gt;变量可以被赋值为多种List泛型类型<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ol><li><a href="https://docs.oracle.com/javase/tutorial/java/generics/why.html">oracle-tutorial-java</a></li><li><a href="https://www.jianshu.com/p/6e8be0317bcc">一文详解泛型：无界通配符、上界通配符、下界通配符</a></li><li><a href="https://dunwu.github.io/javacore/basics/java-generic.html#_1-%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81%E6%B3%9B%E5%9E%8B">深入理解 Java 泛型</a></li></ol></string></object></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;泛型基础&quot;&gt;&lt;a href=&quot;#泛型基础&quot; class=&quot;headerlink&quot; title=&quot;泛型基础&quot;&gt;&lt;/a&gt;泛型基础&lt;/h1&gt;&lt;p&gt;泛型是基于类型擦除实现的，&lt;code&gt;无法向上转型&lt;/code&gt;，但是，可以通过使用通配符来向上转型。&lt;/p&gt;
&lt;h2 id
      
    
    </summary>
    
      <category term="Java" scheme="https://niithub.cn/categories/Java/"/>
    
    
      <category term="Java" scheme="https://niithub.cn/tags/Java/"/>
    
      <category term="泛型" scheme="https://niithub.cn/tags/%E6%B3%9B%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java中的引用</title>
    <link href="https://niithub.cn//posts/1ae51239/"/>
    <id>https://niithub.cn//posts/1ae51239/</id>
    <published>2022-01-11T08:45:37.000Z</published>
    <updated>2022-01-27T09:23:13.942Z</updated>
    
    <content type="html"><![CDATA[<h1 id="拷贝"><a href="#拷贝" class="headerlink" title="拷贝"></a>拷贝</h1><h2 id="引用拷贝"><a href="#引用拷贝" class="headerlink" title="引用拷贝"></a>引用拷贝</h2><h2 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h2><p>对基本数据类型进行值传递，对引用数据类型，创建一个新的对象，并复制其内容。<br><img src="https://raw.githubusercontents.com/niithub/pic/master/blog/image.vo1lzu7mn4m.png" alt="image"><br><img src="https://raw.githubusercontents.com/niithub/pic/master/blog/image.h50bkiy8hd7.png" alt="image"></p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><h4 id="重写clone-方法"><a href="#重写clone-方法" class="headerlink" title="重写clone()方法"></a>重写clone()方法</h4><p>类中所有自定义引用变量的类实现Cloneable接口实现clone()方法，字符类等引用类型创建一个新的字符串（引用类型）实现拷贝。<br>以Son类为例：<br></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Son clone()方法</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Son <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>{</span><br><span class="line">    <span class="comment">// 待返回克隆的对象</span></span><br><span class="line">    Son son = (Son) <span class="keyword">super</span>.clone();</span><br><span class="line">    son.name = <span class="keyword">new</span> String(name);</span><br><span class="line">    son.father = father.clone();</span><br><span class="line">    <span class="keyword">return</span> son;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><h4 id="序列法"><a href="#序列法" class="headerlink" title="序列法"></a>序列法</h4><p>序列化会储存对象的属性但是不会也无法存储对象在内存中地址相关信息，所以在反序列化成Java对象时候会重新创建所有的引用对象。<br>对于类有多层引用的情况，序列化后将二进制字节流内容写到一个媒介（文本或字节数组），然后从这个媒介读取数据，原对象写入这个媒介后拷贝给clone对象，原对象的修改不会影响clone对象，因为clone对象是从这个媒介读取。<br>在具体实现上，自定义的类需要实现Serializable接口。在需要深拷贝的类(Son)中定义一个函数返回该类对象：<br></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Son <span class="title">deepClone</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>{</span><br><span class="line">    Son son = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">// 在内存中创建一个字节数组缓冲区，所有发送到输出流的数据保存在该字节数组中</span></span><br><span class="line">    <span class="comment">// 默认创建一个大小为32的缓冲区</span></span><br><span class="line">    ByteArrayOutputStream byOut = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">    <span class="comment">// 对象的序列化输出，通过字节数组的方式进行传输</span></span><br><span class="line">    ObjectOutputStream outputStream = <span class="keyword">new</span> ObjectOutputStream(byOut);</span><br><span class="line">    <span class="comment">// 将当前student对象写入字节数组中</span></span><br><span class="line">    outputStream.writeObject(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在内存中创建一个字节数组缓冲区，从输入流读取的数据保存在该字节数组缓冲区</span></span><br><span class="line">    <span class="comment">// 接收字节数组作为参数进行创建</span></span><br><span class="line">    ByteArrayInputStream byIn = <span class="keyword">new</span> ByteArrayInputStream(byOut.toByteArray());</span><br><span class="line">    ObjectInputStream inputStream = <span class="keyword">new</span> ObjectInputStream(byIn);</span><br><span class="line">    son = (Son) inputStream.readObject(); <span class="comment">//从字节数组中读取</span></span><br><span class="line">    <span class="keyword">return</span> son;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><h2 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h2><p>浅拷贝会创建一个新对象，新对象和原对象本身没有任何关系，但所有变量的值都与原来的对象相同，而所有的对其他对象的引用仍然指向原来的对象。换言之，浅拷贝仅仅复制所拷贝的对象，而不复制它所引用的对象。</p><ul><li>如果属性是基本类型(int,double,long,boolean等)，拷贝的就是基本类型的值</li><li>如果属性是引用类型，拷贝的就是内存地址（即复制引用但不复制引用的对象） ，因此如果其中一个对象改变了这个地址，就会影响到另一个对象。<br><img src="https://raw.githubusercontents.com/niithub/pic/master/blog/image.peyeku91x5.png" alt="image"><br><img src="https://raw.githubusercontents.com/niithub/pic/master/blog/image.hu0aqsmyr9u.png" alt="image"></li></ul><h3 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h3><p>在需要拷贝的类上实现Cloneable接口并重写其clone()方法，使用的时候直接调用类的clone()方法即可。<br></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Demo <span class="title">clone</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            Demo clone = (Demo) <span class="keyword">super</span>.clone();</span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span> copy mutable state here, so the clone can't change the internals of the original</span></span><br><span class="line">            <span class="keyword">return</span> clone;</span><br><span class="line">        } <span class="keyword">catch</span> (CloneNotSupportedException e) {</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Father</span> </span>{</span><br><span class="line"></span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Father</span><span class="params">(String name)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> StringJoiner(<span class="string">", "</span>, Father.class.getSimpleName() + <span class="string">"["</span>, <span class="string">"]"</span>)</span><br><span class="line">                .add(<span class="string">"name='"</span> + name + <span class="string">"'"</span>)</span><br><span class="line">                .toString();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    String name;</span><br><span class="line">    Father father;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Son</span><span class="params">(String name,<span class="keyword">int</span> age)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.age=age;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Son</span><span class="params">(String name,<span class="keyword">int</span> age, Father father)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.age=age;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.father = father;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> StringJoiner(<span class="string">", "</span>, Son.class.getSimpleName() + <span class="string">"["</span>, <span class="string">"]"</span>)</span><br><span class="line">                .add(<span class="string">"age="</span> + age)</span><br><span class="line">                .add(<span class="string">"name='"</span> + name + <span class="string">"'"</span>)</span><br><span class="line">                .toString();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Son <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>{</span><br><span class="line">        <span class="keyword">return</span> (Son) <span class="keyword">super</span>.clone();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException </span>{</span><br><span class="line">        Father f = <span class="keyword">new</span> Father(<span class="string">"bigFather"</span>);</span><br><span class="line">        Son s1 = <span class="keyword">new</span> Son(<span class="string">"son1"</span>, <span class="number">13</span>);</span><br><span class="line">        <span class="comment">// 引用</span></span><br><span class="line">        s1.father = f;</span><br><span class="line">        <span class="comment">// 浅拷贝，s2的地址和s1地址不同，但内容信息一致</span></span><br><span class="line">        Son s2 = s1.clone();</span><br><span class="line"></span><br><span class="line">        System.out.println(s1);</span><br><span class="line">        System.out.println(s2);</span><br><span class="line">        <span class="comment">// 地址不同，所以结果不相等</span></span><br><span class="line">        System.out.println(<span class="string">"s1==s2:"</span> + (s1 == s2));</span><br><span class="line">        <span class="comment">// s1和s2内容信息一致，所以结果相等</span></span><br><span class="line">        System.out.println(<span class="string">"s1.name==s2.name:"</span> + (s1.name == s2.name));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 变更s1里age的指向</span></span><br><span class="line">        s1.age = <span class="number">12</span>;</span><br><span class="line">        <span class="comment">// s1.father.name指向变更，但s1的father引用未变</span></span><br><span class="line">        s1.father.name = <span class="string">"smallFather"</span>;</span><br><span class="line">        <span class="comment">// 变更s1里name的指向</span></span><br><span class="line">        s1.name = <span class="string">"son222"</span>;</span><br><span class="line">        <span class="comment">// s1、s2的father引用未变，结果相等</span></span><br><span class="line">        System.out.println(<span class="string">"s1.Father==s2.Father:"</span> + (s1.father == s2.father));</span><br><span class="line">        <span class="comment">// 不相等</span></span><br><span class="line">        System.out.println(<span class="string">"s1.name==s2.name:"</span> + (s1.name == s2.name));</span><br><span class="line">        System.out.println(s1);</span><br><span class="line">        System.out.println(s2);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>new创建对象实例（对象实例在堆内存中），对象引用指向对象实例（对象引用存放在栈内存中）<br>一个对象引用可以指向0个或1个对象（一根绳子可以不系气球，也可以系一个气球）;一个对象可以有n个引用指向它（可以用n条绳子系住一个气球）<br>    对象的相等，比的是内存中存放的内容是否相等。而引用相等，比较的是他们指向的内存地址是否相等。</p><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><h2 id="强引用"><a href="#强引用" class="headerlink" title="强引用"></a>强引用</h2><h2 id="弱引用"><a href="#弱引用" class="headerlink" title="弱引用"></a>弱引用</h2><p>在垃圾回收器线程扫描它 所管辖的内存区域的过程中，一旦发现了只具有弱引用的对象，不管当前内存空间足够与否，都会回收它的内存。</p><h2 id="软引用"><a href="#软引用" class="headerlink" title="软引用"></a>软引用</h2><h2 id="虚引用"><a href="#虚引用" class="headerlink" title="虚引用"></a>虚引用</h2><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ol><li><a href="https://segmentfault.com/a/1190000038523408">5张图搞懂Java引用拷贝、深拷贝、浅拷贝</a></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;拷贝&quot;&gt;&lt;a href=&quot;#拷贝&quot; class=&quot;headerlink&quot; title=&quot;拷贝&quot;&gt;&lt;/a&gt;拷贝&lt;/h1&gt;&lt;h2 id=&quot;引用拷贝&quot;&gt;&lt;a href=&quot;#引用拷贝&quot; class=&quot;headerlink&quot; title=&quot;引用拷贝&quot;&gt;&lt;/a&gt;引用拷贝&lt;/h
      
    
    </summary>
    
      <category term="Java" scheme="https://niithub.cn/categories/Java/"/>
    
    
      <category term="Java" scheme="https://niithub.cn/tags/Java/"/>
    
      <category term="引用" scheme="https://niithub.cn/tags/%E5%BC%95%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>JVM内存</title>
    <link href="https://niithub.cn//posts/f3dc315c/"/>
    <id>https://niithub.cn//posts/f3dc315c/</id>
    <published>2021-12-24T10:13:39.000Z</published>
    <updated>2022-01-18T10:36:14.526Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文讨论的内存空间基于Jdk8</p></blockquote><p><img src="https://raw.githubusercontents.com/niithub/pic/master/blog/image.2oe5fp5306w.png" alt="内存空间"></p><h1 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h1><p><code>线程私有</code>（为了线程切换后能恢复到正确的执行位置），也称为代码的行号指示器，字节码解释器就是通过改变程序计数器的位置来确定下一行要执行的代码，是唯一一个不会出现 OutOfMemoryError 的内存区域，它的生命周期随着线程的创建而创建，随着线程的结束而死亡。<br>如果线程正在执行一个Java方法，那么它记录的是正在执行虚拟机字节码指令的地址，如果是一个native方法那么它的值为空。<br>在多线程的情况下，程序计数器用于记录当前线程执行的位置，从而当线程被切换回来的时候能够知道该线程上次运行到哪儿了。</p><h1 id="Java虚拟机栈"><a href="#Java虚拟机栈" class="headerlink" title="Java虚拟机栈"></a>Java虚拟机栈</h1><p>线程<code>私有的</code>，它的声明周期和线程一致。每个线程创建时都会创建一个虚拟机栈，内部保存了一个个的栈帧，每个栈帧就对应着一次方法的调用。既然知道了虚拟机栈里面存放的是一个个的栈帧，那么也不难猜出虚拟机栈里面都存储了什么东西。<br>Java虚拟机栈是存在OOM的，当线程所请求的栈的深度大于虚拟机栈的深度或者虚拟机栈可以动态扩容，当栈扩展时无法申请到足够的内存时，就会抛出OOM。<br><img src="https://raw.githubusercontents.com/niithub/pic/master/blog/image.hjcni6jh4bl.png" alt="image"></p><h2 id="虚拟机栈内部结构"><a href="#虚拟机栈内部结构" class="headerlink" title="虚拟机栈内部结构"></a>虚拟机栈内部结构</h2><p><img src="https://raw.githubusercontents.com/niithub/pic/master/blog/image.iuhg08ka3a.png" alt="image"></p><h2 id="局部变量表"><a href="#局部变量表" class="headerlink" title="局部变量表"></a>局部变量表</h2><p>主要存储方法的参数，所有的基本类型数据和对象地址，以及返回地址类型（return address）。<br>它以变量槽为最小的存储单位，Java虚拟机并没有规定一个变量槽占用多少内存空间，但是规定了一个变量槽可以存放一个32位以内的数据类型。如果存储的数据类型超过32位，比如long、double，那么就使用两个变量槽进行存储。</p><h2 id="操作数栈"><a href="#操作数栈" class="headerlink" title="操作数栈"></a>操作数栈</h2><p>操作数栈是一个先进后出的操作数栈，当一个方法刚开始执行的时候，一个新的栈帧也会随之被创建出来，这个方法的操作数栈是空的，它主要用于保存计算过程的中间结果，同时作为计算过程中变量临时的存储空间。<br>如果被调用的方法有返回值，那么返回值将会被压入当前栈帧的操作数栈中。操作数栈并非采用索引的方式进行数据访问，而是通过入栈（push）和出栈（pop）操作来完成数据的访问。</p><h2 id="动态链接"><a href="#动态链接" class="headerlink" title="动态链接"></a>动态链接</h2><p>栈帧中保存了一个方法的引用，当执行方法的时候，可以拿着这个引用到运行时常量池中找到这个方法。<br>动态链接的作用就是将这些方法的符号引用转换为调用方法的直接引用。</p><h2 id="方法返回地址"><a href="#方法返回地址" class="headerlink" title="方法返回地址"></a>方法返回地址</h2><p>在方法执行结束之后，要返回下一条要执行代码位置的值，也就是程序计数器的值。<br>异常导致的方法退出，不会返回任何值的。对于抛出的异常，栈帧中不会做任何记录，但是会记录在一个异常表中。</p><h1 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h1><p>虚拟机栈为虚拟机执行 Java 方法（也就是字节码）服务，而本地方法栈<code>线程私有</code>，为虚拟机使用到的 Native 方法服务。 在 HotSpot 虚拟机中和 Java 虚拟机栈合二为一。</p><h1 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h1><p>Java堆是虚拟机中最大的一块内存空间，它被所有的<code>线程共享</code>，在虚拟机启动时创建。它唯一的目的就是存放对象实例。<br>随着即时编译技术的发展进步，尤其是逃逸分析技术的日渐强大，栈上分配、变量替换等优化手段，让实例在”只在堆“中分配<code>不再成为绝对</code>。<br>Java堆是垃圾收集的主要区域，Java堆中也经常出现新生代、老年代、永久代等等，这里需要注意，这些并不是Java堆物理上的内存布局，它是作为垃圾收集器而划分一种内存布局。<br><img src="https://raw.githubusercontents.com/niithub/pic/master/blog/JVM.x49m9dnskc.png" alt="image"></p><h1 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h1><p><code>线程共享</code>的区域，主要用于存储被虚拟机加载的类型信息、常量、静态变量、即时编译器编译后的代码缓存等数据。<br>方法区它是<code>可以</code>被垃圾收集器进行<code>回收</code>的，主要针对<code>类型的卸载</code>和<code>常量池</code>的回收。<br>方法区也可以产生OOM，当方法区无法满足新的内存分配需求时，将抛出OutOfMemoryError异常。</p><h1 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h1><p>运行时常量池是方法区的一部分。Class文件中除了有类的版本、字段、方法、接口等信息外，还有一项信息是常量池表，它用来存储编译期生成的各种字面量和符号引用。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文讨论的内存空间基于Jdk8&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontents.com/niithub/pic/master/blog/image.2oe5fp5306w.
      
    
    </summary>
    
      <category term="Java" scheme="https://niithub.cn/categories/Java/"/>
    
    
      <category term="Java" scheme="https://niithub.cn/tags/Java/"/>
    
      <category term="Jvm" scheme="https://niithub.cn/tags/Jvm/"/>
    
  </entry>
  
  <entry>
    <title>IO实践</title>
    <link href="https://niithub.cn//posts/17b7d358/"/>
    <id>https://niithub.cn//posts/17b7d358/</id>
    <published>2021-12-21T08:21:51.000Z</published>
    <updated>2021-12-24T10:09:17.323Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文讨论的I/O均在Java框架内</p></blockquote><h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><h2 id="I-O"><a href="#I-O" class="headerlink" title="I/O"></a>I/O</h2><h3 id="BIO-Blocking-I-O"><a href="#BIO-Blocking-I-O" class="headerlink" title="BIO (Blocking I/O)"></a>BIO (Blocking I/O)</h3><p>同步阻塞I/O模式，数据的读取写入必须阻塞在一个线程内等待其完成。在活动连接数不是特别高（小于单机1000）的情况下，这种模型是比较不错的，可以让每一个连接专注于自己的 I/O 并且编程模型简单，也不用过多考虑系统的过载、限流等问题。</p><h3 id="NIO-New-I-O"><a href="#NIO-New-I-O" class="headerlink" title="NIO (New I/O)"></a>NIO (New I/O)</h3><p>NIO是一种同步非阻塞的I/O模型，在Java 1.4 中引入了NIO框架，对应 java.nio 包，提供了 Channel , Selector，Buffer等抽象。<br>NIO中的N可以理解为Non-blocking，它支持基于通道、面向缓冲的I/O操作方法。<br>NIO提供了与传统BIO模型中的 Socket 和 ServerSocket 相对应的 SocketChannel 和 ServerSocketChannel 两种不同的套接字通道实现,两种通道都支持阻塞和非阻塞两种模式。<br>阻塞模式使用就像传统中的支持一样，比较简单，但是性能和可靠性都不好；非阻塞模式正好与之相反。对于低负载、低并发的应用程序，可以使用同步阻塞I/O来提升开发速率和更好的维护性；对于高负载、高并发的（网络）应用，应使用 NIO 的非阻塞模式来开发。</p><h3 id="AIO-Asynchronous-I-O"><a href="#AIO-Asynchronous-I-O" class="headerlink" title="AIO (Asynchronous I/O)"></a>AIO (Asynchronous I/O)</h3><p>AIO 也就是 NIO 2。在 Java 7 中引入了 NIO 的改进版 NIO 2,它是异步非阻塞的IO模型。异步 IO 是基于事件和回调机制实现的，也就是应用操作之后会直接返回，不会堵塞在那里，当后台处理完成，操作系统会通知相应的线程进行后续的操作。<br>AIO 是异步IO的缩写，虽然 NIO 在网络操作中，提供了非阻塞的方法，但是 NIO 的 IO 行为还是同步的。对于 NIO 来说，我们的业务线程是在 IO 操作准备好时，得到通知，接着就由这个线程自行进行 IO 操作，IO操作本身是同步的。</p><h2 id="同步-异步"><a href="#同步-异步" class="headerlink" title="同步/异步"></a>同步/异步</h2><h3 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h3><p>发起一个调用后，被调用者未处理完请求之前，调用不返回。</p><h3 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h3><p>发起一个调用后，立刻得到被调用者的回应表示已接收到请求，但是被调用者并没有返回结果，此时我们可以处理其他的请求，被调用者通常依靠事件，回调等机制来通知调用者其返回结果。</p><h2 id="阻塞-非阻塞"><a href="#阻塞-非阻塞" class="headerlink" title="阻塞/非阻塞"></a>阻塞/非阻塞</h2><h3 id="阻塞"><a href="#阻塞" class="headerlink" title="阻塞"></a>阻塞</h3><p>发起一个请求，调用者一直等待请求结果返回，也就是当前线程会被挂起，无法从事其他任务，只有当条件就绪才能继续。</p><h3 id="非阻塞"><a href="#非阻塞" class="headerlink" title="非阻塞"></a>非阻塞</h3><p>发起一个请求，调用者不用一直等着结果返回，可以先去干其他事情。</p><h1 id="BIO"><a href="#BIO" class="headerlink" title="BIO"></a>BIO</h1><blockquote><p>在活动连接数不是特别高（小于单机1000）的情况下，这种模型是比较不错的，可以让每一个连接专注于自己的 I/O 并且编程模型简单，也不用过多考虑系统的过载、限流等问题。<br>当面对十万甚至百万级连接的时候，传统的 BIO 模型是无能为力的。</p></blockquote><h2 id="传统BIO模型示例"><a href="#传统BIO模型示例" class="headerlink" title="传统BIO模型示例"></a>传统BIO模型示例</h2><p><img src="https://cdn.jsdelivr.net/gh/niithub/pic/blog/image.gsrmxc0mli.png" alt="BIO的模型"></p><p>采用 BIO 通信模型 的服务端，通常由一个独立的 Acceptor 线程负责监听客户端的连接。我们一般通过在 while(true) 循环中服务端会调用 accept() 方法等待接收客户端的连接的方式监听请求，请求一旦接收到一个连接请求，就可以建立通信套接字在这个通信套接字上进行读写操作，此时不能再接收其他客户端连接请求，只能等待同当前连接的客户端的操作执行完成。<br>可以通过<code>多线程</code>来支持多个客户端的连接，如上图所示。</p><h3 id="多线程处理的Socket服务端代码示例"><a href="#多线程处理的Socket服务端代码示例" class="headerlink" title="多线程处理的Socket服务端代码示例"></a>多线程处理的Socket服务端代码示例</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListeningThread</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(ListeningThread.class);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>{</span><br><span class="line">        ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">111</span>);</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; {</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) {</span><br><span class="line">                <span class="keyword">if</span> (serverSocket.isClosed()) {</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">try</span> {</span><br><span class="line">                    Socket socket = serverSocket.accept();</span><br><span class="line">                    <span class="keyword">new</span> ConnectionThread(socket).start();</span><br><span class="line">                } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">                    LOGGER.error(<span class="string">""</span>, e);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConnectionThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(ConnectionThread.class);</span><br><span class="line">    <span class="comment">// 心跳时间间隔是60s</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> HEARTBEAT_INTERVAL = <span class="number">60000</span>;</span><br><span class="line">    <span class="keyword">private</span> Socket socket;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isRunning;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> lastHeartbeat;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConnectionThread</span><span class="params">(Socket socket)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.socket = socket;</span><br><span class="line">        isRunning = <span class="keyword">true</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="comment">// 心跳的线程</span></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; {</span><br><span class="line">            lastHeartbeat = LocalDateTime.now().toInstant(ZoneOffset.of(<span class="string">"+8"</span>)).toEpochMilli();</span><br><span class="line">            <span class="keyword">while</span> (isRunning) {</span><br><span class="line">                <span class="keyword">long</span> curTime = <span class="keyword">new</span> Date().getTime();</span><br><span class="line">                <span class="comment">// 如果当前时间距离上次心跳的时间间隔超过设置的时间间隔（60s），则断开连接</span></span><br><span class="line">                <span class="keyword">if</span> (curTime - lastHeartbeat &gt; HEARTBEAT_INTERVAL) {</span><br><span class="line">                    LOGGER.info(<span class="string">"Socket[{}] timeout {}s."</span>, socket.getInetAddress(), HEARTBEAT_INTERVAL / <span class="number">1000</span>);</span><br><span class="line">                    stopRunning();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">try</span> {</span><br><span class="line">                    Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">                } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">                    LOGGER.error(<span class="string">""</span>, e);</span><br><span class="line">                    Thread.currentThread().interrupt();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (isRunning) {</span><br><span class="line">            <span class="comment">// Check whether the socket is closed.</span></span><br><span class="line">            <span class="keyword">if</span> (socket.isClosed()) {</span><br><span class="line">                isRunning = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                InputStream inputStream = socket.getInputStream();</span><br><span class="line">                <span class="keyword">byte</span>[] temp = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">8</span>];</span><br><span class="line">                <span class="keyword">int</span> bytes = <span class="number">0</span>;</span><br><span class="line">                bytes = inputStream.read(temp);</span><br><span class="line">                <span class="keyword">if</span> (bytes == -<span class="number">1</span>) {</span><br><span class="line">                    inputStream.close();</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                }</span><br><span class="line">                <span class="comment">// 设置最近一次消息时间</span></span><br><span class="line">                lastHeartbeat = <span class="keyword">new</span> Date().getTime();</span><br><span class="line">            } <span class="keyword">catch</span> (SocketException e) {</span><br><span class="line">                LOGGER.info(<span class="string">"Socket [{}] is closed! [{}]"</span>, socket.getInetAddress(), e.getMessage());</span><br><span class="line">                <span class="keyword">if</span> (!socket.isClosed()) {</span><br><span class="line">                    stopRunning();</span><br><span class="line">                }</span><br><span class="line">            } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">                LOGGER.error(<span class="string">""</span>, e);</span><br><span class="line">                <span class="keyword">if</span> (!socket.isClosed()) {</span><br><span class="line">                    stopRunning();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stopRunning</span><span class="params">()</span> </span>{</span><br><span class="line">        isRunning = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            socket.close();</span><br><span class="line">        } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">            LOGGER.error(<span class="string">""</span>, e);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="基于线程池的BIO"><a href="#基于线程池的BIO" class="headerlink" title="基于线程池的BIO"></a>基于线程池的BIO</h2><p><img src="https://cdn.jsdelivr.net/gh/niithub/pic/blog/image.zce9c8dkrl.png" alt="基于线程池的BIO"></p><h1 id="NIO"><a href="#NIO" class="headerlink" title="NIO"></a>NIO</h1><blockquote><p>基于通道、面向缓冲的I/O操作</p></blockquote><p>NIO是一种同步非阻塞的I/O模型，在Java 1.4 中引入了NIO框架，对应 java.nio 包，提供了 Channel , Selector，Buffer等抽象。<br>ServerSocket 相对应的 SocketChannel 和 ServerSocketChannel 两种不同的套接字通道实现,两种通道都支持阻塞和非阻塞两种模式。阻塞模式使用简单，但性能和可靠性都不好；非阻塞模式正好与之相反。<br>对于低负载、低并发的应用程序，可以使用同步阻塞I/O来提升开发速率和更好的维护性；对于高负载、高并发的（网络）应用，应使用 NIO 的非阻塞模式来开发。</p><p><img src="https://cdn.jsdelivr.net/gh/niithub/pic/blog/image.tkzev5bkjp.png" alt="NIO"></p><p>特点：</p><ul><li>Selector 对应一个线程， 一个线程对应多个 channel(连接)</li><li>每个 channel 都注册到 Selector选择器上</li><li>每个 channel 都会对应一个 Buffer，channel 是双向的，可以读也可以写</li><li>Selector不断轮询查看Channel上的事件</li><li>Selector 会根据不同的事件，完成不同的处理操作</li><li>数据的读取写入是通过 Buffer</li></ul><h2 id="Selector-选择器"><a href="#Selector-选择器" class="headerlink" title="Selector(选择器)"></a>Selector(选择器)</h2><p>Selector是用来监控SocketChannel的事件的，其实是实现非阻塞的关键，使用单个线程处理多个通道。</p><ul><li><p>获得选择器对象</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Selector.open();</span><br></pre></td></tr></tbody></table></figure></li><li><p>通道设置成<code>非阻塞</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();</span><br><span class="line">serverSocketChannel.bind(inetSocketAddress);</span><br><span class="line">serverSocketChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);</span><br></pre></td></tr></tbody></table></figure></li></ul><p>Selector定义了四种事件，OP_READ、OP_WRITE、OP_CONNECT、OP_ACCEPT。</p><table><thead><tr><th>事件类型</th><th>释义</th><th>对应函数</th></tr></thead><tbody><tr><td>SelectionKey.OP_ACCEPT</td><td><code>连接就绪</code>事件，表示服务器监听到客户连接，可以接收信息</td><td>SelectionKey.isAcceptable()</td></tr><tr><td>SelectionKey.OP_CONNECT</td><td><code>连接就绪</code>事件，表示客户端与服务器成功建立连接</td><td>SelectionKey.isConnectable()</td></tr><tr><td>SelectionKey.OP_READ</td><td><code>读就绪</code>事件，表示通道中存在可读数据，可以执行读操作</td><td>SelectionKey.isReadable()</td></tr><tr><td>SelectionKey.OP_WRITE</td><td><code>写就绪</code>事件，表示已经可以向通道写数据</td><td>SelectionKey.isWritable()</td></tr></tbody></table><h2 id="Channel-通道"><a href="#Channel-通道" class="headerlink" title="Channel(通道)"></a>Channel(通道)</h2><p>NIO 通过Channel（通道） 进行读写。通道是双向的，可读也可写。无论读写，通道只能和Buffer交互。因为 Buffer，通道可以异步地读写。<br><img src="https://cdn.jsdelivr.net/gh/niithub/pic/blog/image.7diaclhth4n.png" alt="通信图"></p><p>Channel的实现类：</p><ol><li>FileChannel : 用于文件的数据读写</li><li>DatagramChannel : 用于 UDP 的数据读写</li><li>ServerSocketChannel : 类似 ServerSocket，用于 TCP 的数据读写</li><li>SocketChannel : 类似 Socket，用于 TCP 的数据读写</li></ol><h2 id="Buffer-缓冲区"><a href="#Buffer-缓冲区" class="headerlink" title="Buffer(缓冲区)"></a>Buffer(缓冲区)</h2><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>static ByteBuffer allocate(长度)</td><td>创建byte类型的指定长度的缓冲区</td></tr><tr><td>static ByteBuffer wrap(byte[] array)</td><td>创建一个有内容的byte类型缓冲区</td></tr><tr><td>int position()/position(int newPosition)</td><td>获得当前要操作的索引/修改当前要操作的索引位置</td></tr><tr><td>int limit()/limit(int newLimit)</td><td>获取最多能操作到哪个索引/修改最多能操作的索引位置</td></tr><tr><td>int capacity()</td><td>返回缓冲区的总长度</td></tr><tr><td>int remaining()/boolean hasRemaining()</td><td>还有多少能操作索引个数/是否还有能操作</td></tr><tr><td>put(byte b)/put(byte[] src)</td><td>添加一个字节/添加字节数组</td></tr><tr><td>flip()</td><td>写切换读模式 limit设置position位置, position设置0</td></tr><tr><td>get()</td><td>读一个字节</td></tr><tr><td>get(byte[] dst)</td><td>读多个字节</td></tr><tr><td>get(int index)</td><td>读指定索引的字节</td></tr><tr><td>rewind()</td><td>将position设置为0，可以重复读</td></tr><tr><td>clear()</td><td>切换写模式 position设置为0 , limit 设置为 capacity</td></tr><tr><td>array()</td><td>将缓冲区转换成字节数组返回</td></tr></tbody></table><h2 id="服务端代码示例"><a href="#服务端代码示例" class="headerlink" title="服务端代码示例"></a>服务端代码示例</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NioSocketServer</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ByteBuffer buffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">    <span class="keyword">private</span> Selector selector;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        Runnable run = () -&gt; {</span><br><span class="line">            NioSocketServer socketServer = <span class="keyword">new</span> NioSocketServer();</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                socketServer.start();</span><br><span class="line">            } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            }</span><br><span class="line">        };</span><br><span class="line">        <span class="keyword">new</span> Thread(run).start();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>{</span><br><span class="line">        <span class="keyword">this</span>.selector = Selector.open();</span><br><span class="line">        ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();</span><br><span class="line">        serverSocketChannel.bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">111</span>));</span><br><span class="line">        <span class="comment">// 通道设置为非阻塞, 因为selector需要轮询监听每个通道的事件</span></span><br><span class="line">        serverSocketChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">// 指定监听事件为 OP_ACCEPT 连接就绪</span></span><br><span class="line">        serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) {</span><br><span class="line">            <span class="keyword">this</span>.selector.select();</span><br><span class="line">            Set&lt;SelectionKey&gt; selectionKeySet = <span class="keyword">this</span>.selector.selectedKeys();</span><br><span class="line">            Iterator&lt;SelectionKey&gt; iterator = selectionKeySet.iterator();</span><br><span class="line">            SelectionKey key;</span><br><span class="line">            <span class="keyword">while</span> (iterator.hasNext()) {</span><br><span class="line">                key = iterator.next();</span><br><span class="line">                iterator.remove();</span><br><span class="line">                <span class="keyword">if</span> (!key.isValid()) {</span><br><span class="line">                    <span class="keyword">this</span>.close(key);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">if</span> (key.isAcceptable()) {</span><br><span class="line">                    <span class="keyword">this</span>.accept(key);</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">if</span> (key.isReadable()) {</span><br><span class="line">                    <span class="keyword">this</span>.read(key);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(SelectionKey selectionKey)</span> </span>{</span><br><span class="line">        ServerSocketChannel serverChannel = (ServerSocketChannel) selectionKey.channel();</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            SocketChannel channel = serverChannel.accept();</span><br><span class="line">            channel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">            Socket socket = channel.socket();</span><br><span class="line">            SocketAddress remoteAddr = socket.getRemoteSocketAddress();</span><br><span class="line">            System.out.println(<span class="string">"Connected to: "</span> + remoteAddr);</span><br><span class="line">            channel.register(<span class="keyword">this</span>.selector, SelectionKey.OP_READ);</span><br><span class="line">        } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">            System.out.println((<span class="string">"读取socket通信信息失败，异常信息："</span> + e.toString()));</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读取socket信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> selectionKey</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(SelectionKey selectionKey)</span> </span>{</span><br><span class="line">        buffer.flip();</span><br><span class="line">        <span class="keyword">int</span> numRead = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            SocketChannel socketChannel = (SocketChannel) selectionKey.channel();</span><br><span class="line">            numRead = socketChannel.read(buffer);</span><br><span class="line">        } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">            System.out.println(<span class="string">"socket读取信息失败，失败信息："</span> + e.toString());</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (numRead == -<span class="number">1</span>) {</span><br><span class="line">            <span class="keyword">this</span>.close(selectionKey);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">byte</span>[] data = <span class="keyword">new</span> <span class="keyword">byte</span>[numRead];</span><br><span class="line">        System.arraycopy(buffer.array(), <span class="number">0</span>, data, <span class="number">0</span>, numRead);</span><br><span class="line">        System.out.println(<span class="string">"客户端消息:"</span> + <span class="keyword">new</span> String(data));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关闭连接</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> selectionKey</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(SelectionKey selectionKey)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (selectionKey == <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        SocketChannel socketChannel = (SocketChannel) selectionKey.channel();</span><br><span class="line">        <span class="keyword">if</span> (!socketChannel.isConnected()) {</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        Socket socket = socketChannel.socket();</span><br><span class="line">        SocketAddress remoteAddr = socket.getRemoteSocketAddress();</span><br><span class="line">        System.out.println(<span class="string">"Connection closed by client: "</span> + remoteAddr);</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            socketChannel.close();</span><br><span class="line">        } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">            System.out.println(<span class="string">"socket关闭失败，失败信息："</span> + e.toString());</span><br><span class="line">        }</span><br><span class="line">        selectionKey.cancel();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文讨论的I/O均在Java框架内&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h1&gt;&lt;h2 id=&quot;I-O&quot;&gt;
      
    
    </summary>
    
      <category term="Java" scheme="https://niithub.cn/categories/Java/"/>
    
    
      <category term="Java" scheme="https://niithub.cn/tags/Java/"/>
    
      <category term="NIO" scheme="https://niithub.cn/tags/NIO/"/>
    
      <category term="IO" scheme="https://niithub.cn/tags/IO/"/>
    
  </entry>
  
  <entry>
    <title>微服务设计架构</title>
    <link href="https://niithub.cn//posts/2b221c31/"/>
    <id>https://niithub.cn//posts/2b221c31/</id>
    <published>2021-12-21T08:19:33.000Z</published>
    <updated>2021-12-24T10:09:17.323Z</updated>
    
    <content type="html"><![CDATA[<h2 id="应用架构"><a href="#应用架构" class="headerlink" title="应用架构"></a>应用架构</h2><p><a href="https://cdn.jsdelivr.net/gh/niithub/pic/blog/d1e21198d7c6ef54f918a45d366f17fe0296feca123a42e1321040184c796d4e.pdf">下载地址</a></p><p><img src="https://cdn.jsdelivr.net/gh/niithub/pic/blog/1.xk8ebxedfd.png" alt="架构"></p><h2 id="微服务设计模式"><a href="#微服务设计模式" class="headerlink" title="微服务设计模式"></a>微服务设计模式</h2><p><a href="https://cdn.jsdelivr.net/gh/niithub/pic/blog/b81aee9cf346e5ff1dfef34bf6a8f704eb6e3ecc51d0d648d516ef49e3e8af41.pdf">下载地址</a></p><p><img src="https://cdn.jsdelivr.net/gh/niithub/pic/blog/1.bikqpnh4y6m.png" alt="图片1"><br><img src="https://cdn.jsdelivr.net/gh/niithub/pic/blog/2.f9jvge40kzv.png" alt="图片2"><br><img src="https://cdn.jsdelivr.net/gh/niithub/pic/blog/3.t0wf6m2whjp.png" alt="图片3"><br><img src="https://cdn.jsdelivr.net/gh/niithub/pic/blog/4.n94v5deq6y.png" alt="图片4"><br><img src="https://cdn.jsdelivr.net/gh/niithub/pic/blog/5.zanydeponwk.png" alt="图片5"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;应用架构&quot;&gt;&lt;a href=&quot;#应用架构&quot; class=&quot;headerlink&quot; title=&quot;应用架构&quot;&gt;&lt;/a&gt;应用架构&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://cdn.jsdelivr.net/gh/niithub/pic/blog/d1e21198
      
    
    </summary>
    
      <category term="微服务" scheme="https://niithub.cn/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    
      <category term="微服务" scheme="https://niithub.cn/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="架构" scheme="https://niithub.cn/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Git操作命令</title>
    <link href="https://niithub.cn//posts/159ed7e6/"/>
    <id>https://niithub.cn//posts/159ed7e6/</id>
    <published>2021-12-14T10:23:54.000Z</published>
    <updated>2021-12-21T11:25:37.142Z</updated>
    
    <content type="html"><![CDATA[<h2 id="撤销本次pull"><a href="#撤销本次pull" class="headerlink" title="撤销本次pull"></a>撤销本次pull</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. git reflog</span><br><span class="line">2. git reset --hard 哈希值</span><br></pre></td></tr></tbody></table></figure><h2 id="撤销本次merge"><a href="#撤销本次merge" class="headerlink" title="撤销本次merge"></a>撤销本次merge</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge --abort</span><br></pre></td></tr></tbody></table></figure><h2 id="git-log高阶用法"><a href="#git-log高阶用法" class="headerlink" title="git log高阶用法"></a>git log高阶用法</h2><ul><li>查看每次提交的文件修改列表，和分支变化的图形信息<figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> --name-status --oneline --graph</span><br></pre></td></tr></tbody></table></figure></li></ul><h2 id="git-stash"><a href="#git-stash" class="headerlink" title="git stash"></a>git stash</h2><p>git stash 可以将当前工作状态（WIP，work in progress）临时存放在 stash 列表中，待 pull / merge 操作完成后，再从 stash 中重新应用这些修改。</p><ul><li><p>查看暂存的stash列表</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash list</span><br></pre></td></tr></tbody></table></figure></li><li><p>恢复上一次的 WIP 状态，并从列表中移除</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash pop</span><br></pre></td></tr></tbody></table></figure></li><li><p>新增的文件也一起 stash</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash save</span><br></pre></td></tr></tbody></table></figure></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;撤销本次pull&quot;&gt;&lt;a href=&quot;#撤销本次pull&quot; class=&quot;headerlink&quot; title=&quot;撤销本次pull&quot;&gt;&lt;/a&gt;撤销本次pull&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;
      
    
    </summary>
    
      <category term="Git" scheme="https://niithub.cn/categories/Git/"/>
    
    
      <category term="Git" scheme="https://niithub.cn/tags/Git/"/>
    
      <category term="命令" scheme="https://niithub.cn/tags/%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>MySQL的最左前缀</title>
    <link href="https://niithub.cn//posts/2649bdb8/"/>
    <id>https://niithub.cn//posts/2649bdb8/</id>
    <published>2021-12-07T09:31:38.000Z</published>
    <updated>2021-12-07T09:49:52.586Z</updated>
    
    <content type="html"><![CDATA[<h1 id="最左前缀原则"><a href="#最左前缀原则" class="headerlink" title="最左前缀原则"></a>最左前缀原则</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ol><li>创建一个联合索引(col1, col2, col3), 则该联合索引支持的索引有[(col1), (col1, col2), (col1, col2, col3)]</li><li>联合索引最多支持16列</li></ol><h2 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h2><p>存在索引 (a, b, c) </p><table><thead><tr><th>查询条件</th><th>实际使用的索引</th></tr></thead><tbody><tr><td>a, b, c</td><td>a, b, c</td></tr><tr><td>a, c</td><td>a</td></tr><tr><td>a, b</td><td>a, b</td></tr><tr><td>a</td><td>a</td></tr><tr><td>b, c</td><td>无</td></tr></tbody></table><p>注意：<code>where条件</code>顺序可以随意组装，比如 a, b, c 你可以写成 a, c, b、 c, a, b 等，这些都不影响，但是出现的字段必须是上面写到的</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;最左前缀原则&quot;&gt;&lt;a href=&quot;#最左前缀原则&quot; class=&quot;headerlink&quot; title=&quot;最左前缀原则&quot;&gt;&lt;/a&gt;最左前缀原则&lt;/h1&gt;&lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="MySQL" scheme="https://niithub.cn/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="https://niithub.cn/tags/MySQL/"/>
    
      <category term="优化" scheme="https://niithub.cn/tags/%E4%BC%98%E5%8C%96/"/>
    
      <category term="索引" scheme="https://niithub.cn/tags/%E7%B4%A2%E5%BC%95/"/>
    
  </entry>
  
  <entry>
    <title>Java代码优化</title>
    <link href="https://niithub.cn//posts/a2337e7d/"/>
    <id>https://niithub.cn//posts/a2337e7d/</id>
    <published>2021-12-03T03:17:32.000Z</published>
    <updated>2021-12-03T09:07:13.763Z</updated>
    
    <content type="html"><![CDATA[<h2 id="尽量重用对象-循环内不要不断创建对象引用"><a href="#尽量重用对象-循环内不要不断创建对象引用" class="headerlink" title="尽量重用对象/循环内不要不断创建对象引用"></a>尽量重用对象/循环内不要不断创建对象引用</h2><p>由于Java虚拟机不仅要花时间生成对象，以后可能还需要花时间对这些对象进行垃圾回收和处理，因此，生成过多的对象将会给程序的性能带来很大的影响。<br>举例：<br></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, a = <span class="number">1</span>; i &lt; <span class="number">10000</span>; i++) {</span><br><span class="line">    Object o = <span class="keyword">new</span> Object();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><br>建议改为：<br><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Object o = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, a = <span class="number">1</span>; i &lt; <span class="number">10000</span>; i++) {</span><br><span class="line">    o = <span class="keyword">new</span> Object();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><br>这样的话，内存中只有一份Object对象引用，每次new Object的时候，Object对象引用指向不同的Object罢了，但是内存中只有一份，这样就大大节省了内存空间了。<p></p><h2 id="尽可能使用局部变量"><a href="#尽可能使用局部变量" class="headerlink" title="尽可能使用局部变量"></a>尽可能使用局部变量</h2><p>调用方法时传递的参数以及在调用中创建的临时变量都保存在栈中速度较快，其他变量，如静态变量、实例变量等，都在堆中创建，速度较慢。另外，栈中创建的变量，随着方法的运行结束，这些内容就没了，不需要额外的垃圾回收.</p><h2 id="尽量减少对变量的重复计算"><a href="#尽量减少对变量的重复计算" class="headerlink" title="尽量减少对变量的重复计算"></a>尽量减少对变量的重复计算</h2><p>举例<br></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) {</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><br>建议替换为：<br><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, <span class="keyword">int</span> length = list.size(); i &lt; length; i++) {</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><br>这样，在list.size很大的时候，就减少了很多的消耗。<p></p><h2 id="尽量采用懒加载的策略，即在需要的时候才创建"><a href="#尽量采用懒加载的策略，即在需要的时候才创建" class="headerlink" title="尽量采用懒加载的策略，即在需要的时候才创建"></a>尽量采用懒加载的策略，即在需要的时候才创建</h2><h2 id="当复制大量数据时，使用System-arraycopy命令"><a href="#当复制大量数据时，使用System-arraycopy命令" class="headerlink" title="当复制大量数据时，使用System.arraycopy命令"></a>当复制大量数据时，使用System.arraycopy命令</h2><h2 id="乘法和除法使用移位操作"><a href="#乘法和除法使用移位操作" class="headerlink" title="乘法和除法使用移位操作"></a>乘法和除法使用移位操作</h2><p>用移位操作可以极大地提高性能，因为在计算机底层，对位的操作是最方便、最快的。<br>举例：<br></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, a = <span class="number">1</span>; i &lt; <span class="number">10000</span>; i++) {</span><br><span class="line">    a = i * <span class="number">8</span>;</span><br><span class="line">    a = i / <span class="number">2</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><br>建议改为：<br><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, a = <span class="number">1</span>; i &lt; <span class="number">10000</span>; i++) {</span><br><span class="line">    a = i &lt;&lt; <span class="number">3</span>;</span><br><span class="line">    a = i &gt;&gt; <span class="number">1</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><h2 id="尽量使用HashMap、ArrayList、StringBuilder，除非线程安全需要，否则不推荐使用Hashtable、Vector、StringBuffer，后三者由于使用同步机制而导致了性能开销"><a href="#尽量使用HashMap、ArrayList、StringBuilder，除非线程安全需要，否则不推荐使用Hashtable、Vector、StringBuffer，后三者由于使用同步机制而导致了性能开销" class="headerlink" title="尽量使用HashMap、ArrayList、StringBuilder，除非线程安全需要，否则不推荐使用Hashtable、Vector、StringBuffer，后三者由于使用同步机制而导致了性能开销"></a>尽量使用HashMap、ArrayList、StringBuilder，除非线程安全需要，否则不推荐使用Hashtable、Vector、StringBuffer，后三者由于使用同步机制而导致了性能开销</h2><h2 id="尽量在合适的场合使用单例"><a href="#尽量在合适的场合使用单例" class="headerlink" title="尽量在合适的场合使用单例"></a>尽量在合适的场合使用单例</h2><p>使用单例可以减轻加载的负担、缩短加载的时间、提高加载的效率，单例主要适用于以下三个方面：</p><ul><li>控制资源的使用，通过线程同步来控制资源的并发访问</li><li>控制实例的产生，以达到节约资源的目的</li><li>控制数据的共享，在不建立直接关联的条件下，让多个不相关的进程或线程之间实现通信</li></ul><h2 id="尽量避免随意使用静态变量"><a href="#尽量避免随意使用静态变量" class="headerlink" title="尽量避免随意使用静态变量"></a>尽量避免随意使用静态变量</h2><p>当某个对象被定义为static的变量所引用，那么gc通常是不会回收这个对象所占有的堆内存的。<br></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> B b = <span class="keyword">new</span> B();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><br>此时静态变量b的生命周期与A类相同，如果A类不被卸载，那么引用B指向的B对象会常驻内存，直到程序终止。<p></p><h2 id="使用带缓冲的输入输出流进行IO操作"><a href="#使用带缓冲的输入输出流进行IO操作" class="headerlink" title="使用带缓冲的输入输出流进行IO操作"></a>使用带缓冲的输入输出流进行IO操作</h2><p>带缓冲的输入输出流，即BufferedReader、BufferedWriter、BufferedInputStream、BufferedOutputStream，这可以极大地提升IO效率。</p><h2 id="不要让public方法中有太多的形参"><a href="#不要让public方法中有太多的形参" class="headerlink" title="不要让public方法中有太多的形参"></a>不要让public方法中有太多的形参</h2><p>public方法即对外提供的方法，如果给这些方法太多形参的话主要有两点坏处：</p><ul><li>违反了面向对象的编程思想，Java讲求一切都是对象，太多的形参，和面向对象的编程思想并不契合</li><li>参数太多势必导致方法调用的出错概率增加</li></ul><h2 id="公用的集合类中不使用的数据一定要及时remove掉"><a href="#公用的集合类中不使用的数据一定要及时remove掉" class="headerlink" title="公用的集合类中不使用的数据一定要及时remove掉"></a>公用的集合类中不使用的数据一定要及时remove掉</h2><p>如果一个集合类是公用的（也就是说不是方法里面的属性），那么这个集合里面的元素是不会自动释放的，因为始终有引用指向它们。所以，如果公用集合里面的某些数据不使用而不去remove掉它们，那么将会造成这个公用集合不断增大，使得系统有内存泄露的隐患。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;尽量重用对象-循环内不要不断创建对象引用&quot;&gt;&lt;a href=&quot;#尽量重用对象-循环内不要不断创建对象引用&quot; class=&quot;headerlink&quot; title=&quot;尽量重用对象/循环内不要不断创建对象引用&quot;&gt;&lt;/a&gt;尽量重用对象/循环内不要不断创建对象引用&lt;/h2&gt;&lt;
      
    
    </summary>
    
      <category term="Java" scheme="https://niithub.cn/categories/Java/"/>
    
    
      <category term="Java" scheme="https://niithub.cn/tags/Java/"/>
    
      <category term="代码优化" scheme="https://niithub.cn/tags/%E4%BB%A3%E7%A0%81%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Valid注解的使用</title>
    <link href="https://niithub.cn//posts/dcc76ec7/"/>
    <id>https://niithub.cn//posts/dcc76ec7/</id>
    <published>2021-11-30T09:56:42.000Z</published>
    <updated>2021-12-07T09:36:12.594Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Valid-and-Validated"><a href="#Valid-and-Validated" class="headerlink" title="@Valid and @Validated"></a>@Valid and @Validated</h1><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><p>@Valid是方法级别的注解，我们可以用来校验成员属性，所在包<code>javax.validation</code>。注意，@Valid不支持组校验，@Validated支持组校验，所在包<code>org.springframework.validation.annotation</code>。</p><h2 id="Valid支持的校验注解"><a href="#Valid支持的校验注解" class="headerlink" title="@Valid支持的校验注解"></a>@Valid支持的校验注解</h2><table><thead><tr><th>注解名称</th><th>释义</th></tr></thead><tbody><tr><td>@AssertTrue</td><td>值必须是true</td></tr><tr><td>@AssertFalse</td><td>值必须是false</td></tr><tr><td>@DecimalMax</td><td>限制必须为一个不大于指定值的数字</td></tr><tr><td>@DecimalMin</td><td>限制必须为一个不小于指定值的数字</td></tr><tr><td>@Digits(integer, fraction)</td><td>限制必须为一个小数，且整数部分的位数不能超过integer，小数部分的位数不能超过fraction</td></tr><tr><td>@Future</td><td>限制必须是一个将来的日期</td></tr><tr><td>@Max</td><td>限制必须为一个不大于指定值的数字</td></tr><tr><td>@Min</td><td>限制必须为一个不小于指定值的数字</td></tr><tr><td>@Null</td><td>值不能为空</td></tr><tr><td>@NotNull</td><td>值不能为空</td></tr><tr><td>@Past</td><td>验证注解的元素值（日期类型）比当前时间早</td></tr><tr><td>@Pattern</td><td>限制必须符合指定的正则表达式</td></tr><tr><td>@Size</td><td>可以被应用于String, Collection, Map, array类型，长度必须在min and max之间</td></tr></tbody></table><h2 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h2><h3 id="基础使用"><a href="#基础使用" class="headerlink" title="基础使用"></a>基础使用</h3><p>@Valid的使用示例：<br></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserAccount</span> </span>{</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="meta">@Size(min = 4, max = 15)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@NotBlank</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Min(value = 18, message = "Age should not be less than 18")</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@NotBlank</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// standard constructors / setters / getters / toString   </span></span><br><span class="line">    </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = "/saveBasicInfo", method = RequestMethod.POST)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">saveBasicInfo</span><span class="params">(<span class="meta">@Valid</span> <span class="meta">@ModelAttribute("useraccount")</span> UserAccount useraccount, </span></span></span><br><span class="line"><span class="function"><span class="params">  BindingResult result)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (result.hasErrors()) {</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"error"</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="分组示例"><a href="#分组示例" class="headerlink" title="分组示例"></a>分组示例</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserAccount</span> </span>{</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@NotNull(groups = BasicInfo.class)</span></span><br><span class="line">    <span class="meta">@Size(min = 4, max = 15, groups = BasicInfo.class)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@NotBlank(groups = BasicInfo.class)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Min(value = 18, message = "Age should not be less than 18", groups = AdvanceInfo.class)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@NotBlank(groups = AdvanceInfo.class)</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// standard constructors / setters / getters / toString   </span></span><br><span class="line">    </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = "/saveBasicInfoStep1", method = RequestMethod.POST)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">saveBasicInfoStep1</span><span class="params">(<span class="meta">@Validated({BasicInfo.class})</span>  <span class="meta">@ModelAttribute("useraccount")</span> UserAccount useraccount, BindingResult result)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (result.hasErrors()) {</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"error"</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="处理参数为List的情况"><a href="#处理参数为List的情况" class="headerlink" title="处理参数为List的情况"></a>处理参数为List的情况</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">Validator validator;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostMapping(value = "")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> GxProductResult <span class="title">productTypeUpdate</span><span class="params">(<span class="meta">@RequestBody</span> List&lt;DTO&gt; dtoList)</span> </span>{</span><br><span class="line">    Iterator&lt;DTO&gt; iterator = dtoList.listIterator();</span><br><span class="line">    <span class="comment">// 校验参数是否合法</span></span><br><span class="line">    <span class="keyword">while</span> (iterator.hasNext()) {</span><br><span class="line">        DTO dto = iterator.next();</span><br><span class="line">        BeanPropertyBindingResult errors = <span class="keyword">new</span> BeanPropertyBindingResult(dto, dto.getId());</span><br><span class="line">        validator.validate(gxProductType, errors);</span><br><span class="line">        <span class="keyword">if</span> (errors.hasErrors()) {</span><br><span class="line">            FieldError fieldError = errors.getFieldError();</span><br><span class="line">            error.put(<span class="number">1</span>, fieldError.getDefaultMessage());</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ol><li><a href="https://web.archive.org/web/20200929135357/http://www.mydlq.club/article/49/">SpringBoot 中使用 @Valid 注解 + Exception 全局处理器优雅处理参数验证</a></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Valid-and-Validated&quot;&gt;&lt;a href=&quot;#Valid-and-Validated&quot; class=&quot;headerlink&quot; title=&quot;@Valid and @Validated&quot;&gt;&lt;/a&gt;@Valid and @Validated&lt;/h1&gt;&lt;
      
    
    </summary>
    
      <category term="Annotation" scheme="https://niithub.cn/categories/Annotation/"/>
    
    
      <category term="注解" scheme="https://niithub.cn/tags/%E6%B3%A8%E8%A7%A3/"/>
    
      <category term="SpringBoot" scheme="https://niithub.cn/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>hexo使用说明</title>
    <link href="https://niithub.cn//posts/82ca5a28/"/>
    <id>https://niithub.cn//posts/82ca5a28/</id>
    <published>2021-10-14T14:56:32.000Z</published>
    <updated>2021-10-14T15:50:11.520Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>安装hexo</p><a id="more"></a><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo</span><br></pre></td></tr></tbody></table></figure></li><li><p>安装发布hexo必须的git插件</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-deployer-git</span><br></pre></td></tr></tbody></table></figure></li><li><p>修改_config.yml</p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github<span class="selector-class">.com</span>:YOUR_ID/YOUR_ID<span class="selector-class">.github</span><span class="selector-class">.io</span>.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></tbody></table></figure></li><li><p>新建文章</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></tbody></table></figure></li><li><p>清理hexo编译结果</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx hexo clean</span><br></pre></td></tr></tbody></table></figure></li><li><p>hexo编译</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx hexo g</span><br></pre></td></tr></tbody></table></figure></li><li><p>hexo发布</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx hexo d</span><br></pre></td></tr></tbody></table></figure></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;p&gt;安装hexo&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://niithub.cn/categories/Linux/"/>
    
      <category term="命令记录" scheme="https://niithub.cn/categories/Linux/%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="Linux" scheme="https://niithub.cn/tags/Linux/"/>
    
      <category term="安装记录" scheme="https://niithub.cn/tags/%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>Java代理的代码示例</title>
    <link href="https://niithub.cn//posts/c1b60574/"/>
    <id>https://niithub.cn//posts/c1b60574/</id>
    <published>2021-10-10T13:56:11.000Z</published>
    <updated>2021-10-13T16:21:04.010Z</updated>
    
    <content type="html"><![CDATA[<h1 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h1><p>StaticProxy.java<br></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//代理对象</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StaticProxy</span> <span class="keyword">implements</span> <span class="title">Subject</span></span>{</span><br><span class="line"><span class="comment">//实际目标对象</span></span><br><span class="line">    <span class="keyword">private</span> Subject subject;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StaticProxy</span><span class="params">(Subject subject)</span></span>{</span><br><span class="line">        <span class="keyword">this</span>.subject = subject;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"PreProcess"</span>);</span><br><span class="line">        subject.request();</span><br><span class="line">        System.out.println(<span class="string">"PostProcess"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><p>StaticProxyDemo.java<br></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//静态代理模式</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticProxyDemo</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>{</span><br><span class="line">    <span class="comment">//创建实际对象</span></span><br><span class="line">        SubjectImpl subject = <span class="keyword">new</span> SubjectImpl();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//把实际对象封装到代理对象中</span></span><br><span class="line">        StaticProxy p = <span class="keyword">new</span> StaticProxy(subject);</span><br><span class="line">        p.request();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p></p><p>Subject.java<br></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Subject</span></span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p></p><p>SubjectImpl.java<br></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//目标对象</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubjectImpl</span> <span class="keyword">implements</span> <span class="title">Subject</span></span>{</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span></span>{</span><br><span class="line">      System.out.println(<span class="string">"I am dealing the request."</span>);</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p></p><h1 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h1><p>├─code<br>│ ├─multiple<br>│ │ ├─Cook.java<br>│ │ ├─CookImpl.java<br>│ │ ├─Driver.java<br>│ │ ├─MultipleInterfacesProxyTest.java<br>│ │ ├─ProxyHandler.java<br>│ │<br>│ │─DynamicProxyDemo.java<br>│ │─ProxyHandler.java<br>│ │─Subject.java<br>│ │─SubjectImpl.java</p><p>DynamicProxyDemo.java<br></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">//动态代理模式</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicProxyDemo</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">    <span class="comment">//1.创建目标对象</span></span><br><span class="line">    SubjectImpl realSubject = <span class="keyword">new</span> SubjectImpl();    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//2.创建调用处理器对象</span></span><br><span class="line">    ProxyHandler handler = <span class="keyword">new</span> ProxyHandler(realSubject); </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//3.动态生成代理对象</span></span><br><span class="line">        Subject proxySubject = </span><br><span class="line">        (Subject)Proxy.newProxyInstance</span><br><span class="line">          (SubjectImpl.class.getClassLoader(),</span><br><span class="line">                   SubjectImpl.class.getInterfaces(), handler); </span><br><span class="line">        <span class="comment">//proxySubject真实类型com.sun.proxy.$Proxy0</span></span><br><span class="line">        <span class="comment">//proxySubject继承Proxy类，实现Subject接口</span></span><br><span class="line">        <span class="comment">//newProxyInstance的第二个参数，就是指定代理对象的接口</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//4.客户端通过代理对象调用方法</span></span><br><span class="line">        <span class="comment">//本次调用将自动被代理处理器的invoke方法接收</span></span><br><span class="line">        proxySubject.request();    </span><br><span class="line">        </span><br><span class="line">        System.out.println(proxySubject.getClass().getName());</span><br><span class="line">        System.out.println(proxySubject.getClass().getSuperclass().getName());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><p>ProxyHandler.java<br></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 代理类的调用处理器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProxyHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span></span>{</span><br><span class="line">    <span class="keyword">private</span> Subject subject;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProxyHandler</span><span class="params">(Subject subject)</span></span>{</span><br><span class="line">        <span class="keyword">this</span>.subject = subject;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//此函数在代理对象调用任何一个方法时都会被调用。</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Throwable </span>{</span><br><span class="line">    System.out.println(proxy.getClass().getName());</span><br><span class="line">    <span class="comment">//定义预处理的工作，当然你也可以根据 method 的不同进行不同的预处理工作</span></span><br><span class="line">        System.out.println(<span class="string">"====before===="</span>);</span><br><span class="line">        Object result = method.invoke(subject, args);</span><br><span class="line">        System.out.println(<span class="string">"====after===="</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><p>Subject.java<br></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Subject</span></span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><p>SubjectImpl.java<br></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//目标对象</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubjectImpl</span> <span class="keyword">implements</span> <span class="title">Subject</span></span>{</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span></span>{</span><br><span class="line">      System.out.println(<span class="string">"I am dealing the request."</span>);</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><p>multiple/Cook.java<br></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> multiple.interfaces;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Cook</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doWork</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><p>multiple/CookImpl.java<br></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> multiple.interfaces;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CookImpl</span> <span class="keyword">implements</span> <span class="title">Cook</span></span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doWork</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">System.out.println(<span class="string">"cook for you"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><p>multiple/Driver.java<br></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> multiple.interfaces;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Driver</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doWork</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><p>multiple/MultipleInterfacesProxyTest.java<br></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> multiple.interfaces;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MultipleInterfacesProxyTest</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        Cook cook = <span class="keyword">new</span> CookImpl();</span><br><span class="line">        ClassLoader cl = MultipleInterfacesProxyTest.class.getClassLoader();</span><br><span class="line">        ProxyHandler handler = <span class="keyword">new</span> ProxyHandler(cook);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//生成代理类型</span></span><br><span class="line">        Class&lt;?&gt; proxyClass = Proxy.getProxyClass(cl, <span class="keyword">new</span> Class&lt;?&gt;[]{Driver.class,Cook.class});</span><br><span class="line">                </span><br><span class="line">        <span class="comment">//生成代理对象</span></span><br><span class="line">        Object proxy = proxyClass.getConstructor(<span class="keyword">new</span> Class[]{InvocationHandler.class}).</span><br><span class="line">                newInstance(<span class="keyword">new</span> Object[]{handler});</span><br><span class="line">        System.out.println(Proxy.isProxyClass(proxyClass));</span><br><span class="line">        </span><br><span class="line">        Proxy p = (Proxy) proxy;</span><br><span class="line">        System.out.println(p.getInvocationHandler(proxy).getClass().getName());        </span><br><span class="line">        System.out.println(<span class="string">"proxy类型:"</span> + proxyClass.getName());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//代理对象都继承于java.lang.reflect.Proxy，但是获取父类确是Object而不是Proxy</span></span><br><span class="line">        Class father = proxyClass.getSuperclass();</span><br><span class="line">        System.out.println(<span class="string">"proxy的父类类型:"</span> + father.getName());</span><br><span class="line">        </span><br><span class="line">        Class[] cs = proxy.getClass().getInterfaces();</span><br><span class="line">        <span class="keyword">for</span>(Class c:cs)</span><br><span class="line">        {</span><br><span class="line">        System.out.println(<span class="string">"proxy的父接口类型:"</span> + c.getName());</span><br><span class="line">        }</span><br><span class="line">        System.out.println(<span class="string">"====================="</span>);</span><br><span class="line">        </span><br><span class="line">        Method[] ms = proxy.getClass().getMethods();</span><br><span class="line">        <span class="keyword">for</span>(Method m:ms)</span><br><span class="line">        {</span><br><span class="line">        System.out.println(<span class="string">"调用方法 "</span> + m.getName() + <span class="string">"；参数为 "</span> + Arrays.deepToString(m.getParameters()));</span><br><span class="line">        }</span><br><span class="line">        System.out.println(<span class="string">"====================="</span>);</span><br><span class="line">        </span><br><span class="line">        Cook c = (Cook) proxy;</span><br><span class="line">        c.doWork();</span><br><span class="line">        </span><br><span class="line">        Driver d = (Driver) proxy;</span><br><span class="line">        d.doWork();     </span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><p>multiple/ProxyHandler.java<br></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> multiple.interfaces;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 代理类的调用处理器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProxyHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span></span>{</span><br><span class="line">    <span class="keyword">private</span> Cook cook;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProxyHandler</span><span class="params">(Cook cook)</span></span>{</span><br><span class="line">        <span class="keyword">this</span>.cook = cook;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//此函数在代理对象调用任何一个方法时都会被调用。</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Throwable </span>{</span><br><span class="line">    System.out.println(<span class="string">"proxy类型:"</span> + proxy.getClass().getName());</span><br><span class="line">    System.out.println(<span class="string">"调用方法 "</span> + method + <span class="string">"；参数为 "</span> + Arrays.deepToString(args));</span><br><span class="line">        Object result = method.invoke(cook, args);        </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;静态代理&quot;&gt;&lt;a href=&quot;#静态代理&quot; class=&quot;headerlink&quot; title=&quot;静态代理&quot;&gt;&lt;/a&gt;静态代理&lt;/h1&gt;&lt;p&gt;StaticProxy.java&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;
      
    
    </summary>
    
      <category term="Java" scheme="https://niithub.cn/categories/Java/"/>
    
    
      <category term="代码示例" scheme="https://niithub.cn/tags/%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B/"/>
    
      <category term="Java代理" scheme="https://niithub.cn/tags/Java%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>PreAuthorize and PostAuthorize in Spring Security</title>
    <link href="https://niithub.cn//posts/9304ed3c/"/>
    <id>https://niithub.cn//posts/9304ed3c/</id>
    <published>2021-06-16T06:59:28.000Z</published>
    <updated>2021-12-03T06:10:14.746Z</updated>
    
    <content type="html"><![CDATA[<p>Spring Security provides method level security using <code>@PreAuthorize</code> and <code>@PostAuthorize</code> annotations. This is expression-based access control.<br>The <code>@PreAuthorize</code> can check for authorization before entering into method. The <code>@PreAuthorize</code> authorizes on the basis of role or the argument which is passed to the method.<br>The <code>@PostAuthorize</code> checks for authrorisation after method execution. The <code>@PostAuthorize</code> authorizes on the basis of logged in roles, return object by method and passed argument to the method. For the returned object spring security provides built-in keyword i.e. <code>returnObject</code>.</p><h2 id="Using-PreAuthorize-and-PostAuthorize"><a href="#Using-PreAuthorize-and-PostAuthorize" class="headerlink" title="Using PreAuthorize and PostAuthorize"></a>Using PreAuthorize and PostAuthorize</h2><p>Find the code for <code>@PreAuthorize</code> and <code>@PostAuthorize</code> in the interface of the service layer.  </p><p><strong>IBookService.java</strong><br></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.concretepage.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.concretepage.bean.Book;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.security.access.prepost.PostAuthorize;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.access.prepost.PreAuthorize;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IBookService</span> </span>{</span><br><span class="line">    <span class="meta">@PreAuthorize("hasRole('ROLE_WRITE')")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addBook</span><span class="params">(Book book)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostAuthorize("returnObject.owner == authentication.name")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Book <span class="title">getBook</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PreAuthorize("#book.owner == authentication.name")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteBook</span><span class="params">(Book book)</span></span>;</span><br><span class="line">}  </span><br></pre></td></tr></tbody></table></figure><p></p><p>Look at the interface above, we have used <code>@PreAuthorize</code> and <code>@PostAuthorize</code> annotations. The <code>authentication</code> and <code>principal</code> keyword can directly be used to access user informations. The _#_ is used to access argument of the method.<br>Now take attention on <code>@PostAuthorize</code> that built-in keyword <code>returnObject</code> has been used. Here <code>returnObject</code> is equivalent to <code>Book</code> instance returned by the method. Now find the Spring Security XML file.<br><strong>security-config.xml</strong><br></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">http</span>  <span class="attr">auto-config</span>=<span class="string">"true"</span>  <span class="attr">use-expressions</span>=<span class="string">"true"</span>&gt;</span>  <span class="tag">&lt;<span class="name">intercept-url</span>  <span class="attr">pattern</span>=<span class="string">"/login"</span>  <span class="attr">access</span>=<span class="string">"hasAnyRole('ROLE_READ','ROLE_WRITE')"</span>  /&gt;</span>  <span class="tag">&lt;<span class="name">logout</span>  <span class="attr">logout-success-url</span>=<span class="string">"/login"</span>  /&gt;</span>  <span class="tag">&lt;/<span class="name">http</span>&gt;</span>  <span class="tag">&lt;<span class="name">authentication-manager</span>&gt;</span>  <span class="tag">&lt;<span class="name">authentication-provider</span>&gt;</span>  <span class="tag">&lt;<span class="name">user-service</span>&gt;</span>  <span class="tag">&lt;<span class="name">user</span>  <span class="attr">name</span>=<span class="string">"ram"</span>  <span class="attr">password</span>=<span class="string">"con1234"</span>  <span class="attr">authorities</span>=<span class="string">"ROLE_READ,ROLE_WRITE"</span>  /&gt;</span>  <span class="tag">&lt;<span class="name">user</span>  <span class="attr">name</span>=<span class="string">"rahim"</span>  <span class="attr">password</span>=<span class="string">"con1234"</span>  <span class="attr">authorities</span>=<span class="string">"ROLE_READ"</span>  /&gt;</span>  <span class="tag">&lt;/<span class="name">user-service</span>&gt;</span>  <span class="tag">&lt;/<span class="name">authentication-provider</span>&gt;</span>  <span class="tag">&lt;/<span class="name">authentication-manager</span>&gt;</span>  <span class="tag">&lt;<span class="name">global-method-security</span>  <span class="attr">pre-post-annotations</span>=<span class="string">"enabled"</span>/&gt;</span>  <span class="tag">&lt;<span class="name">beans:bean</span>  <span class="attr">name</span>=<span class="string">"bookService"</span>  <span class="attr">class</span>=<span class="string">"com.concretepage.service.BookService"</span>/&gt;</span>  </span><br></pre></td></tr></tbody></table></figure><p></p><h2 id="Enable-pre-post-Annotations"><a href="#Enable-pre-post-Annotations" class="headerlink" title="Enable pre-post Annotations"></a>Enable pre-post Annotations</h2><p>To use <code>@PreAuthorize</code> and <code>@PostAuthorize</code> annotations in our Spring Security application, we need to enable pre-post annotations.  </p><p>In case we are using Java configuration, then that class needs to be annotated with <code>@EnableGlobalMethodSecurity</code> as given below.<br></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>  </span><br><span class="line"><span class="meta">@EnableWebSecurity</span>  </span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity(prePostEnabled=true)</span>  </span><br><span class="line"><span class="keyword">public</span>  <span class="class"><span class="keyword">class</span>  <span class="title">SecurityConfig</span>  <span class="keyword">extends</span>  <span class="title">WebSecurityConfigurerAdapter</span>  </span>{  </span><br><span class="line">    ------  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Spring Security provides method level security using &lt;code&gt;@PreAuthorize&lt;/code&gt; and &lt;code&gt;@PostAuthorize&lt;/code&gt; annotations. This is expr
      
    
    </summary>
    
      <category term="转载" scheme="https://niithub.cn/categories/%E8%BD%AC%E8%BD%BD/"/>
    
      <category term="Spring" scheme="https://niithub.cn/categories/%E8%BD%AC%E8%BD%BD/Spring/"/>
    
    
      <category term="Spring Security" scheme="https://niithub.cn/tags/Spring-Security/"/>
    
      <category term="Annotation" scheme="https://niithub.cn/tags/Annotation/"/>
    
  </entry>
  
  <entry>
    <title>MySQL常用语句</title>
    <link href="https://niithub.cn//posts/adb47c67/"/>
    <id>https://niithub.cn//posts/adb47c67/</id>
    <published>2020-11-12T12:24:02.000Z</published>
    <updated>2021-10-13T16:21:04.010Z</updated>
    
    <content type="html"><![CDATA[<ul><li>创建索引</li></ul><p>在创建索引时，可以规定索引能否包含重复值。如果不包含，则索引应该创建为PRIMARY KEY或UNIQUE索引。对于单列惟一性索引，这保证单列不包含重复的值。对于多列惟一性索引，保证多个值的组合不重复。</p><ol><li>ALTER TABLE用来创建普通索引、UNIQUE索引或PRIMARY KEY索引。<figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">table</span> <span class="keyword">ADD</span> <span class="keyword">INDEX</span> 索引名 (字段名);</span><br></pre></td></tr></tbody></table></figure></li><li>CREATE INDEX可对表增加普通索引或UNIQUE索引<figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> index_name <span class="keyword">ON</span> table_name (column_list)</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> <span class="keyword">INDEX</span> index_name <span class="keyword">ON</span> table_name (column_list)</span><br></pre></td></tr></tbody></table></figure></li></ol><ul><li>删除索引</li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">INDEX</span> index_name <span class="keyword">ON</span> talbe_name</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">DROP</span> <span class="keyword">INDEX</span> index_name</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">DROP</span> PRIMARY <span class="keyword">KEY</span></span><br></pre></td></tr></tbody></table></figure><p>前两条语句是等价的，删除掉table_name中的索引index_name，因为一个表只可能有一个PRIMARY KEY索引，因此不需要指定索引名。</p><ul><li>表中插入数据</li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名 (字段名, 字段名, 字段名) <span class="keyword">values</span>(对应值, 对应值, 对应值);</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;创建索引&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在创建索引时，可以规定索引能否包含重复值。如果不包含，则索引应该创建为PRIMARY KEY或UNIQUE索引。对于单列惟一性索引，这保证单列不包含重复的值。对于多列惟一性索引，保证多个值的组合不重复。&lt;/p&gt;
&lt;ol&gt;
&lt;
      
    
    </summary>
    
      <category term="MySQL" scheme="https://niithub.cn/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="https://niithub.cn/tags/MySQL/"/>
    
      <category term="语句" scheme="https://niithub.cn/tags/%E8%AF%AD%E5%8F%A5/"/>
    
  </entry>
  
  <entry>
    <title>多次读取@Requestbody中的数据</title>
    <link href="https://niithub.cn//posts/2596fc85/"/>
    <id>https://niithub.cn//posts/2596fc85/</id>
    <published>2020-11-12T11:37:35.000Z</published>
    <updated>2021-10-13T16:21:04.010Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题现象"><a href="#问题现象" class="headerlink" title="问题现象"></a>问题现象</h1><p>为了保证接口请求的安全性，一般都会做签名校验，系统在接收到请求执行相关逻辑操作前，先使用拦截器获取<code>@RequestBody</code>中的签名数据，做安全校验。因为业务需要，某个接口做了两次校验，即两处都需要从<code>@RequestBody</code>中获取数据做校验。此时，系统抛出以下异常：<br></p><figure class="highlight cmd"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">I/O error while reading input message; nested exception is java.io.IOException: Stream closed</span><br></pre></td></tr></tbody></table></figure><p></p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p><code>POST</code>方式是以<strong>流</strong>的方式来传递数据，而流只能读取、使用一次。在拦截器中读取<code>@Requestbody</code>中的数据后，<code>@Requestbody</code>中的数据将不复存在，导致第二次读取数据时抛异常。</p><h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><ol><li>读取流前先把流保存一下</li><li>使用过滤器拦截读取，再通过<code>chain.doFilter(wrapper, response);</code>将保存的流丢到后面程序处理</li></ol><h1 id="实施"><a href="#实施" class="headerlink" title="实施"></a>实施</h1><h2 id="新建一个类读取RequestBody"><a href="#新建一个类读取RequestBody" class="headerlink" title="新建一个类读取RequestBody"></a>新建一个类读取RequestBody</h2><p>新建HttpHelper类的目的在于读取RequestBody</p><figure class="highlight actionscript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"><span class="meta-keyword">import</span> org.slf4j.Logger;</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">import</span> org.slf4j.LoggerFactory;</span></span><br><span class="line"></span><br><span class="line"><span class="meta"><span class="meta-keyword">import</span> javax.servlet.http.HttpServletRequest;</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">import</span> java.io.BufferedReader;</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">import</span> java.io.IOException;</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">import</span> java.io.InputStream;</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">import</span> java.io.InputStreamReader;</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">import</span> java.nio.charset.Charset;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpHelper</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(HttpHelper.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String getBodyString(HttpServletRequest request) {</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        InputStream inputStream = <span class="literal">null</span>;</span><br><span class="line">        BufferedReader reader = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            inputStream = request.getInputStream();</span><br><span class="line">            reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(inputStream, Charset.forName(<span class="string">"UTF-8"</span>)));</span><br><span class="line">            String line = <span class="string">""</span>;</span><br><span class="line">            <span class="keyword">while</span> ((line = reader.readLine()) != <span class="literal">null</span>) {</span><br><span class="line">                sb.append(line);</span><br><span class="line">            }</span><br><span class="line">        } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">            LOGGER.error(<span class="string">"流读取失败-request，request对象：{}，堆栈信息：{}"</span>, request, e);</span><br><span class="line">        } <span class="keyword">finally</span> {</span><br><span class="line">            <span class="keyword">if</span> (inputStream != <span class="literal">null</span>) {</span><br><span class="line">                <span class="keyword">try</span> {</span><br><span class="line">                    inputStream.close();</span><br><span class="line">                } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">                    LOGGER.error(<span class="string">"流关闭失败-request，request对象：{}，堆栈信息：{}"</span>, request, e);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (reader != <span class="literal">null</span>) {</span><br><span class="line">                <span class="keyword">try</span> {</span><br><span class="line">                    reader.close();</span><br><span class="line">                } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">                    LOGGER.error(<span class="string">"流关闭失败-inputStream，inputStream：{}，堆栈信息：{}"</span>, inputStream, e));</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="重写HttpServletRequestWrapper保存读到的流"><a href="#重写HttpServletRequestWrapper保存读到的流" class="headerlink" title="重写HttpServletRequestWrapper保存读到的流"></a>重写<code>HttpServletRequestWrapper</code>保存读到的流</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.ReadListener;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletInputStream;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequestWrapper;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.Charset;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReHttpServletRequestWrapper</span> <span class="keyword">extends</span> <span class="title">HttpServletRequestWrapper</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">byte</span>[] body;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ReHttpServletRequestWrapper</span><span class="params">(HttpServletRequest request)</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>(request);</span><br><span class="line">        body = HttpHelper.getBodyString(request).getBytes(Charset.forName(<span class="string">"UTF-8"</span>));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BufferedReader <span class="title">getReader</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(getInputStream()));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletInputStream <span class="title">getInputStream</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> ByteArrayInputStream basis = <span class="keyword">new</span> ByteArrayInputStream(body);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ServletInputStream() {</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>{</span><br><span class="line">                <span class="keyword">return</span> basis.read();</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFinished</span><span class="params">()</span> </span>{</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isReady</span><span class="params">()</span> </span>{</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setReadListener</span><span class="params">(ReadListener readListener)</span> </span>{</span><br><span class="line"></span><br><span class="line">            }</span><br><span class="line">        };</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="信息回写到-RequestBody"><a href="#信息回写到-RequestBody" class="headerlink" title="信息回写到@RequestBody"></a>信息回写到<code>@RequestBody</code></h2><p>过滤器读取流时，如果发现<code>@RequestBody</code>中数据为空，获取存储在<code>HttpServletRequest</code>中的数据，回写到<code>@RequestBody</code>。</p><figure class="highlight scala"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.web.filter.<span class="type">OncePerRequestFilter</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.<span class="type">FilterChain</span>;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.<span class="type">ServletException</span>;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.<span class="type">ServletRequest</span>;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.<span class="type">HttpServletRequest</span>;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.<span class="type">HttpServletResponse</span>;</span><br><span class="line"><span class="keyword">import</span> java.io.<span class="type">IOException</span>;</span><br><span class="line"><span class="keyword">import</span> java.io.<span class="type">PrintWriter</span>;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractCustomFilter</span> <span class="keyword">extends</span> <span class="title">OncePerRequestFilter</span> </span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> void doFilterInternal(<span class="type">HttpServletRequest</span> request, <span class="type">HttpServletResponse</span> response, <span class="type">FilterChain</span> filterChain)</span><br><span class="line">            <span class="keyword">throws</span> <span class="type">ServletException</span>, <span class="type">IOException</span> {</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> result = run(request, response);</span><br><span class="line">        <span class="keyword">if</span> (result != <span class="literal">null</span>) {</span><br><span class="line">            response.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">            <span class="type">PrintWriter</span> out = response.getWriter();</span><br><span class="line">            out.print(result.toString());</span><br><span class="line">            out.flush();</span><br><span class="line">            out.close();</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="type">ServletRequest</span> requestWrapper;</span><br><span class="line">            <span class="keyword">if</span> (request instanceof <span class="type">HttpServletRequest</span>) {</span><br><span class="line">                requestWrapper = <span class="keyword">new</span> <span class="type">ReHttpServletRequestWrapper</span>(request);</span><br><span class="line">                <span class="keyword">if</span> (requestWrapper != <span class="literal">null</span>) {</span><br><span class="line">                    request = (<span class="type">HttpServletRequest</span>) requestWrapper;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            filterChain.doFilter(request, response);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 过滤</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param request</span></span><br><span class="line"><span class="comment">     * @param response</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="type">Object</span> run(<span class="type">HttpServletRequest</span> request, <span class="type">HttpServletResponse</span> response);</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ol><li><a href="https://juejin.im/post/6844904169602547726">@RequestBody参数已经被读取，究竟是何原因</a></li><li><a href="https://www.codeleading.com/article/5397202614/">拦截器拦截requestbody数据如何防止流被读取后数据丢失</a></li><li><a href="https://aysaml.com/articles/2019/05/15/1557888345020.html">解决使用@Requestbody时报错Stream closed</a></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;问题现象&quot;&gt;&lt;a href=&quot;#问题现象&quot; class=&quot;headerlink&quot; title=&quot;问题现象&quot;&gt;&lt;/a&gt;问题现象&lt;/h1&gt;&lt;p&gt;为了保证接口请求的安全性，一般都会做签名校验，系统在接收到请求执行相关逻辑操作前，先使用拦截器获取&lt;code&gt;@Reques
      
    
    </summary>
    
      <category term="问题处理" scheme="https://niithub.cn/categories/%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86/"/>
    
    
      <category term="Spring" scheme="https://niithub.cn/tags/Spring/"/>
    
      <category term="流" scheme="https://niithub.cn/tags/%E6%B5%81/"/>
    
      <category term="request" scheme="https://niithub.cn/tags/request/"/>
    
  </entry>
  
  <entry>
    <title>MySQL中的函数</title>
    <link href="https://niithub.cn//posts/2881bb93/"/>
    <id>https://niithub.cn//posts/2881bb93/</id>
    <published>2020-11-11T14:40:15.000Z</published>
    <updated>2021-10-13T16:21:04.010Z</updated>
    
    <content type="html"><![CDATA[<h2 id="GROUP-CONCAT"><a href="#GROUP-CONCAT" class="headerlink" title="GROUP_CONCAT()"></a>GROUP_CONCAT()</h2><p>语法：<code>GROUP_CONCAT(row)</code><br>作用：拼接同一个字段的多条记录</p><p>eg：</p><ul><li>不使用函数</li></ul><figure class="highlight n1ql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> service_name <span class="keyword">from</span> service;</span><br></pre></td></tr></tbody></table></figure><p>结果如下图所示：<br><img src="https://cdn.jsdelivr.net/gh/niithub/pic/blog/image.0l0v49vj58cq.png" alt=""></p><ul><li>使用函数后</li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">group_concat</span>(<span class="keyword">distinct</span> service_name) <span class="keyword">from</span> service;</span><br></pre></td></tr></tbody></table></figure><p>结果如下图所示：<br><img src="https://cdn.jsdelivr.net/gh/niithub/pic/blog/image.f1vor63z4jw.png" alt=""></p><h2 id="DATEDIFF"><a href="#DATEDIFF" class="headerlink" title="DATEDIFF()"></a>DATEDIFF()</h2><p>语法：<code>DATEDIFF(date1,date2)</code><br>作用：计算两个日期的间隔，且只有值的日期部分参与计算</p><p> 结果如下图所示：<br> <img src="https://cdn.jsdelivr.net/gh/niithub/pic/blog/image.xg9799nf6b.png" alt="示例1"><br> <img src="https://cdn.jsdelivr.net/gh/niithub/pic/blog/image.9b2w9vmvyoa.png" alt="示例2"></p><h2 id="IFNULL"><a href="#IFNULL" class="headerlink" title="IFNULL()"></a>IFNULL()</h2><p>语法：<code>IFNULL(expression, alt_value)</code><br>作用：如果第一个参数的表达式 expression 为 NULL，则返回第二个参数的备用值。</p><p>eg:</p><ul><li>使用函数前</li></ul><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select card_id_a from table limit 1;</span><br></pre></td></tr></tbody></table></figure><p> 结果如下图所示：<br><img src="https://cdn.jsdelivr.net/gh/niithub/pic/blog/image.qml0m8sm55b.png" alt="image"></p><ul><li>使用函数后</li></ul><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select IFNULL(card_id_a, '空') from table limit 1;</span><br></pre></td></tr></tbody></table></figure><p> 结果如下图所示：<br><img src="https://cdn.jsdelivr.net/gh/niithub/pic/blog/image.fz7f7alef0f.png" alt=""></p><h2 id="CURDATE"><a href="#CURDATE" class="headerlink" title="CURDATE()"></a>CURDATE()</h2><p>作用：返回当前的日期</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT NOW(),CURDATE(),CURTIME();</span><br></pre></td></tr></tbody></table></figure><p> 结果如下图所示：<br><img src="https://cdn.jsdelivr.net/gh/niithub/pic/blog/image.eiqnsjz92z.png" alt=""></p><h2 id="FLOOR"><a href="#FLOOR" class="headerlink" title="FLOOR()"></a>FLOOR()</h2><p>语法：<code>FLOOR(X)</code><br>作用：返回X的最大整数值，但不能大于X</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT FLOOR(7.55);</span><br></pre></td></tr></tbody></table></figure><p> 结果如下图所示：<br><img src="https://cdn.jsdelivr.net/gh/niithub/pic/blog/image.31ewqlyz2l.png" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;GROUP-CONCAT&quot;&gt;&lt;a href=&quot;#GROUP-CONCAT&quot; class=&quot;headerlink&quot; title=&quot;GROUP_CONCAT()&quot;&gt;&lt;/a&gt;GROUP_CONCAT()&lt;/h2&gt;&lt;p&gt;语法：&lt;code&gt;GROUP_CONCAT(row)
      
    
    </summary>
    
      <category term="MySQL" scheme="https://niithub.cn/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="https://niithub.cn/tags/MySQL/"/>
    
      <category term="函数" scheme="https://niithub.cn/tags/%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis中的转义字符</title>
    <link href="https://niithub.cn//posts/5f587efb/"/>
    <id>https://niithub.cn//posts/5f587efb/</id>
    <published>2020-11-11T13:43:48.000Z</published>
    <updated>2021-10-13T16:21:04.010Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th>原字符</th><th>转义字符</th><th>说明</th></tr></thead><tbody><tr><td>&lt;</td><td>\&lt;</td><td>小于</td></tr><tr><td>&lt;=</td><td>\&lt;=</td><td>小于或等于</td></tr><tr><td>&gt;</td><td>\&gt;</td><td>大于</td></tr><tr><td>&gt;=</td><td>\&gt;=</td><td>大于或等于</td></tr><tr><td>&lt;&gt;</td><td>\&lt;\&gt;</td><td>不等于</td></tr><tr><td>&amp;</td><td>\&amp;</td><td>且</td></tr><tr><td>‘</td><td>\'</td><td>单引号</td></tr><tr><td>“</td><td>\"</td><td>双引号</td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;原字符&lt;/th&gt;
&lt;th&gt;转义字符&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&amp;lt;&lt;/td&gt;
&lt;td&gt;\&amp;lt;&lt;/td&gt;
&lt;td&gt;小于&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;

      
    
    </summary>
    
      <category term="MyBatis" scheme="https://niithub.cn/categories/MyBatis/"/>
    
    
      <category term="转义字符" scheme="https://niithub.cn/tags/%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6/"/>
    
      <category term="MyBatis" scheme="https://niithub.cn/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>读书笔记-202011</title>
    <link href="https://niithub.cn//posts/54d67a1b/"/>
    <id>https://niithub.cn//posts/54d67a1b/</id>
    <published>2020-11-08T11:37:34.000Z</published>
    <updated>2021-10-13T16:21:04.010Z</updated>
    
    <content type="html"><![CDATA[<h1 id="社会学研究"><a href="#社会学研究" class="headerlink" title="社会学研究"></a>社会学研究</h1><h2 id="乡村共同体重构与老年心理健康——农村老年心理干预的中国方案"><a href="#乡村共同体重构与老年心理健康——农村老年心理干预的中国方案" class="headerlink" title="乡村共同体重构与老年心理健康——农村老年心理干预的中国方案"></a>乡村共同体重构与老年心理健康——农村老年心理干预的中国方案</h2><p><code>以下内容摘自</code><a href="https://kns.cnki.net/kcms/detail/Detail.aspx?dbname=CJFDLAST2020&amp;filename=SHXJ202005001&amp;v=">乡村共同体重构与老年心理健康——农村老年心理干预的中国方案</a></p><p>当今农村家庭养老弱化,道德约束与公共监督的缺失是重要原因之一。家庭养老从伦理关系与文化传统的约束机制简化为经济上的计算与权衡,这不但深刻地影响着物质性养老的具体执行,更使得精神关怀严重匮乏,甚至导致老人为减轻子女负担而选择利他性自杀。这种养老策略从个体家庭泛化为整个农村社会的实践,同时乡土社会的碎片化也使得乡邻不愿干预他人的家事。两者叠加的结果是对养老的乡村公共监督逐渐消失。在本研究中,当整个村子对子女的养老行为公开加以评点议论时,褒善贬恶的舆论会在客观上产生影响,社会监督也逐渐形成。</p><p>老年互助在我国早已有之,民间互助团体如老人会在1949年之前较为常见依托地缘纽带和村落邻里关系形成的老年村民互助和相关道德话语,往往会在老年挫败感最强或不想活下去时产生缓解作用或带来转机。这是增强友邻关系可增进老人心理健康的重要原因。</p><p>第二个层面的友邻互助来自乡邻的他助。干预活动对全村所有人都产生了影响,唤醒与培育着全村善待老人的共同体文化与理念。</p><p>从另一层面而言,村干部成为守门人,在客观上被视为政府乃至国家的代表。在干预中有一项内容是发放“爱心联系卡”。</p><p>“爱心联系卡”上有老人信息和守门人的信息,发放给临界点老人和高危老人,主要用于当老人出现问题或突发危险时,他们或家人、周围的人能够根据卡片信息及时联系到守门人。为避免对老人产生标签化伤害和污名化,我们告诉老人:“卡片为随机发放,您正好被抽中。”事实表明,老人们非常乐意佩戴卡片;甚至没有被发放卡片的老人(心理问题较少的老人)会来问:“为什么我们没有卡?”当问及老人为什么愿意佩戴时,他们说:“这是国家关心我,我高兴呀!觉得国家、村里是真正地关心我,觉得活得有指望”。</p><p>在整个研究中,所有村民对干预研究最常见的评价是,“上面(国家)都关心老人了,我们也得关心呀!”这类话语口口相传,大家都深以为然,更内化为大家参与行动的合理性、正义性动机。尽管我们在项目中很少提及国家的态度,但人们会很自然地冠以“国家的名义”。这是研究开展初期的“未预结果”(unintended consequence)。</p><p>“国家的名义”让更多的普通人参与行动,同时也强化了老人获得国家关心的内在感受。农村老人对国家、集体主义有着特殊情怀。1949年至1978年间,我国建立了去自我、去家庭、去血缘的以“人民”为核心的共同体。这种集体主义生存方式在20世纪80年代改革开放后渐渐转变,进入21世纪后呈现快速消亡的趋势。中国当前的这一批老人恰恰是出生并成长在集体主义环境之中,或者说在他们的“个人生活中集体主义挥之不去”,因而在日常生活中比年轻一代更热衷于集体表征,也更乐于身处于集体之中。来自国家的关怀,或者说集体主义生存方式对于现在的农村老年人是一种潜在的、难以复制的情怀。我们的干预研究契合了老年人的这种情怀,对老年人而言,来自“上面”或者说“国家”及“政府”的关心,其意义更加深远。</p><p>在社会变迁下,礼治社会很难出现,这是乡土社会的特征。在传统礼治秩序面临冲击与瓦解的中国乡村中,公共生活与道德监督出现缺失(黄家亮,2018)。我们的研究一直被乡民们解读为“国家”关怀老人,村干部被视为政府权力代表,志愿者村民成为守望相助的邻人,老人自身与家人积极响应,其他村民深受感召,活动辐射到整个村庄。社会学研究通常承认,熟悉的人群中产生的道德约束与情感联系的强度与性质完全不同于陌生人群,对个体而言,社区共同体边界里面对面互动的熟悉的人群不仅常常是个体认知社会的基本场域、基本情景区,而且是个体在社会中满足与否的基本定位点、基本参照对象。当养老、爱老、敬老不再纸上谈兵,而是成为整个村子许多村民不断实践的日常过程时,其产生的道德约束就不再是空谈,每个置身于这个场域和情景的人不得不卷入其中,并重新认定这一规范对自己的作用与意义。</p><p>这类似于一个道德化的过程,“社区作为面对面交往的地方性共同体,隐蔽地嵌入个体意识的心理基础”,熟人社区中“不会消失的见证人”对个体形成道德约束和监督。社区中的道德声音作为他人的非正式赞同会形成一个非正式影响的关系网络,比国家力量更能为社会秩序提供道德基础。这一过程在一定程度上改变了私人生活不受监督、礼治秩序解体后孝道失范的状态。群体监督与规约的复出超越私人家庭,对子女产生监督作用,对全体乡邻爱老理念与行为产生激发与感召效应,初步唤醒了传统固有的与养老相关的内生性乡村文化,呈现出老年友好的乡村共同体文化特征。</p><h2 id="在禄村书写文明——以圣谕坛为主线的复调民族志"><a href="#在禄村书写文明——以圣谕坛为主线的复调民族志" class="headerlink" title="在禄村书写文明——以圣谕坛为主线的复调民族志"></a>在禄村书写文明——以圣谕坛为主线的复调民族志</h2><p><code>以下内容摘自</code><a href="https://kns.cnki.net/kcms/detail/Detail.aspx?dbname=CJFDLAST2020&amp;filename=SHXJ202005010&amp;v=">在禄村书写文明——以圣谕坛为主线的复调民族志</a></p><p>宗教的作用之一,就是为混沌的世态赋予秩序。</p><p>人们在面对高度不确定性的环境时,需要将其归因为一套熟悉的话语系统,并通过可操作的程序来加以化解。而抗日战争期间的禄村,正是处在这样一个风云变幻的时局之中,所有这些看似荒诞不经的传说如果被“翻译”过来,表达的都是对社区外部环境不确定性的深深焦虑。</p><p>人们并不会用超自然的方式去应对能用技术解决的问题,恰恰是在那些无法用技术去解决的不确定领域,宗教和巫术才会粉墨登场。</p><p>民间宗教的兴起是中国历史上的一件大事,继佛、道、儒臻于成熟之后,“三教合一”的民间宗教成为中国人信仰世界的新增长点。凭借人人可行的道德来超越宿命和因果,是激发大批下层士人投身善书事业的重要心理动机。</p><h1 id="政治"><a href="#政治" class="headerlink" title="政治"></a>政治</h1><h2 id="意识形态演变分析"><a href="#意识形态演变分析" class="headerlink" title="***意识形态演变分析"></a>***意识形态演变分析</h2><p>历史唯物主义认为,意识形态一般是指在一定的社会经济基础上形成的系统的思想观念,代表了某一阶级或社会集团的利益,又反过来指导这一阶级或集团的行动,可以给人提供采取特定行为的驱动力。</p><h1 id="民族研究"><a href="#民族研究" class="headerlink" title="民族研究"></a>民族研究</h1><h2 id="移动之悖-全球新冠疫情传播的人类学反思"><a href="#移动之悖-全球新冠疫情传播的人类学反思" class="headerlink" title="移动之悖:全球新冠疫情传播的人类学反思"></a>移动之悖:全球新冠疫情传播的人类学反思</h2><p><code>以下内容摘自</code><a href="https://kns.cnki.net/kcms/detail/Detail.aspx?dbname=CJFDLAST2020&amp;filename=MZYJ202003005&amp;v=">在禄村书写文明——以圣谕坛为主线的复调民族志</a></p><p>任何社会里的个人生活,都是随着其年龄的增长,从一个阶段向另一个阶段移动的序列。</p><p>特定的动物、植物为原始人提供的食物关系;特定的动物、植物与原始人建立的亲合关系;图腾制度不只是一种文化现象,而是“自然条件的结果”。</p><h1 id="考古"><a href="#考古" class="headerlink" title="考古"></a>考古</h1><h2 id="怕辽代韩德让墓志考释"><a href="#怕辽代韩德让墓志考释" class="headerlink" title="怕辽代韩德让墓志考释"></a>怕辽代韩德让墓志考释</h2><p><code>以下内容摘自</code><a href="https://kns.cnki.net/kcms/detail/Detail.aspx?dbname=CJFDLAST2020&amp;filename=KAGU202005009&amp;v=">辽代韩德让墓志考释</a></p><p>瑶林琼树,不足拟其形容;璞玉浑金,不足知其名器。而又蜀龙顾凤,祢鹗徐麟,时瑞国祯,孰为等伦;乐水周山,宪陂邈海,风摽度量,孰测远大;边笥樗囊,丘墙张市,生知众望,孰能同类;谢兰绪柳,阮竹和松,岁寒风流,孰可比崇。其文也,鄙百家之异端,而师诸周孔,可以同三代之风;其武也,轻一夫之余勇,而慕彼关张,可以为万人之敌。其于九功九德,五礼五乐,三政三法,一话一言,二南二妙,六射六博,性习相近,好尚本异。是以在诸兄弟,独白眉以最良;袭乃公侯,才黑头而必复。加之以公忠许国,则致君亲垂其裳,迈帝皇王霸之道;以孝友承家,则使弟侄成其器,传将相侯伯之荣。以贞廉谨身,则不顾货财;以正直临事,则唯行阴德。以信义定交,则生者罔隔其贵贱,死者必恤其子孙。以谦和待士,则贤者縻之以好爵,俾其陈力就列;愚者诱之以善道,遣其进德修业。以宽仁御众,则喜愠讵形于颜色;以整肃率下,则言动不过于辞则。故得从始至末,自下升高。历事两朝,践履余二十任;总持二柄,周旋仅四十年。曾无间言,绰有余裕。其匡时之烈业,存于史谍;其盖世之勋庸,镂于鼎钟。虽力牧佐命于轩皇,皋陶矢谋于舜帝,伊尹作训于太甲,姬旦摄政于成王,萧相暨车千秋见重于炎汉,裴监与李世勣为荣于巨唐,彼我拟抡,羌不足同年而语矣!宜哉。箕子之所谓向用五福,而王年过贰膳,得不谓之寿乎?禄享万钟,得不谓之富乎?生平少疾患,得不谓之康宁乎?性分多庆善,得不谓之攸好德乎?成始卒之道,尽修短之限,得不谓之考终命乎?伟欤!富贵极矣!功德著矣!福寿全矣!哀荣备矣!以昔以今,未有如王之具美者矣!殁而无恨,藏也有期。英灵将閟于重泉,茂实是虞于高岸。宜刊贞石,用表佳城。陪以园陵,汉室庶传于扬秉;生其荆棘,雍门免叹于田文。呜乎哀哉!</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;社会学研究&quot;&gt;&lt;a href=&quot;#社会学研究&quot; class=&quot;headerlink&quot; title=&quot;社会学研究&quot;&gt;&lt;/a&gt;社会学研究&lt;/h1&gt;&lt;h2 id=&quot;乡村共同体重构与老年心理健康——农村老年心理干预的中国方案&quot;&gt;&lt;a href=&quot;#乡村共同体重构与老年心理
      
    
    </summary>
    
      <category term="读书笔记" scheme="https://niithub.cn/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="文章摘抄" scheme="https://niithub.cn/tags/%E6%96%87%E7%AB%A0%E6%91%98%E6%8A%84/"/>
    
  </entry>
  
  <entry>
    <title>MySQL Explain</title>
    <link href="https://niithub.cn//posts/142c8884/"/>
    <id>https://niithub.cn//posts/142c8884/</id>
    <published>2020-11-02T12:19:35.000Z</published>
    <updated>2021-10-13T16:21:04.010Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们写完查询语句后，可以使用<code>explain</code>分析SQL语句的优劣，MySQL执行完<code>explain</code>后会输出SELECT 执行的详细信息。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; explain select * from servers;</span><br><span class="line">+<span class="comment">----+-------------+---------+------+---------------+------+---------+------+------+-------+</span></span><br><span class="line">| id | select_type | table   | type | possible_keys | key  | key_len | ref  | rows | Extra |</span><br><span class="line">+<span class="comment">----+-------------+---------+------+---------------+------+---------+------+------+-------+</span></span><br><span class="line">|  1 | SIMPLE      | servers | ALL  | NULL          | NULL | NULL    | NULL |    1 | NULL  |</span><br><span class="line">+<span class="comment">----+-------------+---------+------+---------------+------+---------+------+------+-------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.03</span> sec)</span><br></pre></td></tr></tbody></table></figure><h2 id="EXPLAIN输出说明"><a href="#EXPLAIN输出说明" class="headerlink" title="EXPLAIN输出说明"></a>EXPLAIN输出说明</h2><table><thead><tr><th>列名</th><th>说明</th></tr></thead><tbody><tr><td>id</td><td>SQL执行顺序。id相同的执行列可视为一组，同组的SQL语句执行顺序从上往下；在所有组中，id值越大，优先级越高，越先执行</td></tr><tr><td>select_type</td><td>select子句的类型</td></tr><tr><td>table</td><td>表名</td></tr><tr><td>type</td><td>访问类型</td></tr><tr><td>possible_keys</td><td>可能使用的索引列，select查询涉及到的字段上若存在索引，则列出索引，但展示的索引不一定真的被使用</td></tr><tr><td>Key</td><td>MySQL实际决定使用的索引</td></tr><tr><td>key_len</td><td>索引中使用的字节数，注意该字段显示的值为索引字段的最大可能长度，并非实际使用长度</td></tr><tr><td>ref</td><td>连接匹配条件</td></tr><tr><td>rows</td><td>连接匹配条件</td></tr><tr><td>extra</td><td>额外信息</td></tr></tbody></table><h3 id="select-type的详细解释"><a href="#select-type的详细解释" class="headerlink" title="select_type的详细解释"></a>select_type的详细解释</h3><table><thead><tr><th>值名</th><th>解释</th></tr></thead><tbody><tr><td>SIMPLE</td><td>简单SELECT,不使用UNION或子查询等</td></tr><tr><td>PRIMARY</td><td>查询中若包含任何复杂的子部分,最外层的select被标记为PRIMARY</td></tr><tr><td>UNION</td><td>UNION中的第二个或后面的SELECT语句</td></tr><tr><td>DEPENDENT UNION</td><td>UNION中的第二个或后面的SELECT语句，取决于外面的查询</td></tr><tr><td>UNION RESULT</td><td>UNION的结果</td></tr><tr><td>SUBQUERY</td><td>子查询中的第一个SELECT</td></tr><tr><td>DEPENDENT SUBQUERY</td><td>子查询中的第一个SELECT，取决于外面的查询</td></tr><tr><td>DERIVED</td><td>派生表的SELECT, FROM子句的子查询</td></tr><tr><td>UNCACHEABLE SUBQUERY</td><td>一个子查询的结果不能被缓存，必须重新评估外链接的第一行</td></tr></tbody></table><h3 id="type的详细解释"><a href="#type的详细解释" class="headerlink" title="type的详细解释"></a>type的详细解释</h3><p><code>TYPE</code>表示MySQL在表中找到所需行的方式，又称“访问类型”，它是判断查询是否高效的重要依据依据。<br>常用的类型有： ALL, index, range, index_subquery, unique_subquery, index_merge, ref_or_null, fulltext, ref, eq_ref, const, system, NULL（从左到右，性能从差到好）。</p><table><thead><tr><th>值名</th><th>解释</th></tr></thead><tbody><tr><td>Null</td><td>意味说mysql能在优化阶段分解查询语句，在执行阶段甚至用不到访问表或索引（高效）</td></tr><tr><td>system</td><td>这是const连接类型的一种特例，表仅有一行满足条件</td></tr><tr><td>const</td><td>当确定最多只会有一行匹配的时候，MySQL优化器会在查询前读取它而且只读取一次</td></tr><tr><td>eq_ref</td><td>此类型通常出现在多表的 join 查询, 表示对于前表的每一个结果, 都只能匹配到后表的一行结果，通常在使用唯一性索引或主键查找时会发生, 查询效率较高</td></tr><tr><td>ref</td><td>此类型通常出现在多表的 join 查询, 此类索引访问只有使用<code>非唯一性索引</code>或<code>唯一性索引非唯一性前缀</code>时或使用了<code>最左前缀</code>规则索引。ref可以用于使用=或&lt;=&gt;操作符的带索引的列。</td></tr><tr><td>range</td><td>范围扫描，一个有限制的索引扫描，这个类型通常出现在 =, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;=, IS NULL, &lt;=&gt;, BETWEEN, IN() 操作中.</td></tr><tr><td>index</td><td>index 类型则仅仅扫描所有的索引, 而不扫描数据</td></tr><tr><td>All</td><td>全表扫描</td></tr></tbody></table><h3 id="extra的详细解释"><a href="#extra的详细解释" class="headerlink" title="extra的详细解释"></a>extra的详细解释</h3><table><thead><tr><th>值名</th><th>解释</th></tr></thead><tbody><tr><td>Using filesort</td><td>表示 MySQL 需额外的排序操作, 不能通过索引顺序达到排序效果，查询时CPU消耗大，<strong>建议优化</strong></td></tr><tr><td>Using temporary</td><td>查询有使用临时表, 一般出现于排序, 分组和多表 join 的情况, 查询效率不高, <strong>建议优化</strong></td></tr><tr><td>Using index</td><td>表示查询在索引树中就可查找所需数据, 不用扫描表数据文件, 往往说明性能不错</td></tr><tr><td>Using index condition</td><td></td></tr><tr><td>Using where</td><td>查询使用了where 语句来处理结果</td></tr><tr><td>Using join buffer</td><td>在获取连接条件时没有使用索引，并且需要连接缓冲区来存储中间结果，<strong>建议优化</strong></td></tr><tr><td>impossible where</td><td>强调了where语句会导致没有符合条件的行</td></tr><tr><td>select tables optimized away</td><td>这个值意味着仅通过使用索引，优化器可能仅从聚合函数结果中返回一行</td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;我们写完查询语句后，可以使用&lt;code&gt;explain&lt;/code&gt;分析SQL语句的优劣，MySQL执行完&lt;code&gt;explain&lt;/co
      
    
    </summary>
    
      <category term="SQL" scheme="https://niithub.cn/categories/SQL/"/>
    
    
      <category term="SQL分析" scheme="https://niithub.cn/tags/SQL%E5%88%86%E6%9E%90/"/>
    
      <category term="优化" scheme="https://niithub.cn/tags/%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>SQL效率优化</title>
    <link href="https://niithub.cn//posts/7b0c14fd/"/>
    <id>https://niithub.cn//posts/7b0c14fd/</id>
    <published>2020-11-02T06:48:18.000Z</published>
    <updated>2021-10-27T07:49:16.282Z</updated>
    
    <content type="html"><![CDATA[<h1 id="判断条件中值类型不同"><a href="#判断条件中值类型不同" class="headerlink" title="判断条件中值类型不同"></a>判断条件中值类型不同</h1><ul><li><p>问题产生原因<br>如果where子句中的判断条件值类型不同，即 where a = b时，a的类型和b不相同，即使a有索引，索引也不会生效。</p></li><li><p>举例<br>举例a的类型为<code>varchar</code>，且a列为索引列。where语句中使用a为条件查询时，where a = ‘3’，索引生效;当where a = 3，因为<code>3</code>的数据类型为int，字段a的类型为<code>varchar</code>，所以MySQL会自动将<code>3</code>转换成varchar，同时索引失效。</p></li><li><p>解决办法<br>使用<code>CONVERT()</code>函数转换参数值类型，使值类型一致。</p></li><li><p>CONVERT()语法</p><ol><li>CONVERT(value, type)</li><li>CONVERT(value USING charset)</li></ol></li></ul><p>type支持的类型:</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>DATE</td><td>参数类型转换成<code>DATE</code>，”YYYY-MM-DD”</td></tr><tr><td>DATETIME</td><td>参数类型转换成<code>DATETIME</code>，”YYYY-MM-DD HH:MM:SS”</td></tr><tr><td>DECIMAL</td><td>参数类型转换成数据类型，DECIMAL(M,D)，M是数据总长度（默认值是10），D是小数位长度</td></tr><tr><td>TIME</td><td>参数类型转换成<code>TIME</code>，”HH:MM:SS”</td></tr><tr><td>CHAR</td><td>参数类型转换成固定长度的字符</td></tr><tr><td>NCHAR</td><td>参数类型转换成使用国家编码集的字符型</td></tr><tr><td>SIGNED</td><td>参数类型转换成64-bit的整型</td></tr><tr><td>UNSIGNED</td><td>参数类型转换成64-bit的无符号整型</td></tr><tr><td>BINARY</td><td>参数类型转换成二进制字符</td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;判断条件中值类型不同&quot;&gt;&lt;a href=&quot;#判断条件中值类型不同&quot; class=&quot;headerlink&quot; title=&quot;判断条件中值类型不同&quot;&gt;&lt;/a&gt;判断条件中值类型不同&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;问题产生原因&lt;br&gt;如果where子句中的判断条件值类型不
      
    
    </summary>
    
      <category term="SQL" scheme="https://niithub.cn/categories/SQL/"/>
    
    
      <category term="优化" scheme="https://niithub.cn/tags/%E4%BC%98%E5%8C%96/"/>
    
      <category term="SQL" scheme="https://niithub.cn/tags/SQL/"/>
    
      <category term="索引" scheme="https://niithub.cn/tags/%E7%B4%A2%E5%BC%95/"/>
    
  </entry>
  
  <entry>
    <title>Java-Stream使用记录</title>
    <link href="https://niithub.cn//posts/251bc8b7/"/>
    <id>https://niithub.cn//posts/251bc8b7/</id>
    <published>2020-11-02T06:46:31.000Z</published>
    <updated>2021-12-07T09:36:12.594Z</updated>
    
    <content type="html"><![CDATA[<p>Java 8 中的 Stream 是对集合（Collection）对象功能的增强，它专注于对集合对象进行各种非常便利、高效的聚合操作（aggregate operation），或者大批量数据操作 (bulk data operation)。Stream 就如同一个迭代器（Iterator），单向，不可往复，数据只能遍历一次，遍历过一次后即用尽了。和迭代器又不同的是，Stream 可以并行化操作，迭代器只能命令式地、串行化操作。使用并行去遍历时，数据会被分成多个段，其中每一个都在不同的线程中处理，然后将结果一起输出。</p><p>Stream 的并行操作依赖于 Java7 中引入的 Fork/Join 框架（JSR166y）来拆分任务和加速处理过程。</p><p>流的特性包括：</p><ul><li><p>没有内部存储，只是用操作管道从 source（数据结构、数组、generator function、IO channel）获取数据。</p></li><li><p>它也绝不修改自己所封装的底层数据结构的数据。例如 Stream 的 filter 操作会产生一个不包含被过滤元素的新 Stream，而不是从 source 删除那些元素。</p></li><li><p>所有 Stream 的操作必须以 lambda 表达式为参数</p></li><li><p>不支持索引访问</p></li><li><p>你可以请求第一个元素，但无法请求第二个，第三个，或最后一个。</p></li><li><p>很容易生成数组或者 List</p></li><li><p>惰性化</p></li><li>很多 Stream 操作是向后延迟的，一直到它弄清楚了最后需要多少数据才会开始。</li><li>Intermediate 操作永远是惰性化的</li><li>并行能力</li><li>当一个 Stream 是并行化的，就不需要再写多线程代码，所有对它的操作会自动并行进行的。</li><li>集合有固定大小，Stream 则不必。limit(n) 和 findFirst() 这类的 short-circuiting 操作可以对无限的 Stream 进行运算并很快完成。</li></ul><h1 id="Stream流"><a href="#Stream流" class="headerlink" title="Stream流"></a>Stream流</h1><p>当我们使用一个流的时候，通常包括三个基本步骤：</p><ul><li>获取一个数据源（source）</li><li>数据转换</li><li><p>执行操作获取想要的结果，每次转换原有 Stream 对象不改变，返回一个新的 Stream 对象（可以有多次转换），这就允许对其操作可以像链条一样排列，变成一个管道，如下图所示。</p><p><img src="https://cdn.jsdelivr.net/gh/niithub/pic/blog/991852719.png" alt=""></p></li></ul><h1 id="生成流的方式"><a href="#生成流的方式" class="headerlink" title="生成流的方式"></a>生成流的方式</h1><h2 id="Collection和数组"><a href="#Collection和数组" class="headerlink" title="Collection和数组"></a>Collection和数组</h2><ul><li>Collection.stream()</li><li>Collection.parallelStream()</li><li>Arrays.stream(T array) or Stream.of() </li></ul><h2 id="BufferedReader"><a href="#BufferedReader" class="headerlink" title="BufferedReader"></a>BufferedReader</h2><ul><li>java.io.BufferedReader.lines()</li><li>静态工厂</li><li>java.util.stream.IntStream.range()</li><li>java.nio.file.Files.walk()</li><li>自己构建</li><li>java.util.Spliterator</li></ul><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><ul><li>Random.ints()</li><li>BitSet.stream()</li><li>Pattern.splitAsStream(java.lang.CharSequence)</li><li>JarFile.stream()</li></ul><h1 id="流的操作类型"><a href="#流的操作类型" class="headerlink" title="流的操作类型"></a>流的操作类型</h1><h2 id="Intermediate"><a href="#Intermediate" class="headerlink" title="Intermediate"></a>Intermediate</h2><p>一个流可以后面跟随零个或多个 intermediate 操作。其目的主要是打开流，做出某种程度的数据映射/过滤，然后返回一个新的流，交给下一个操作使用。这类操作都是惰性化的（lazy），不会消耗流，就是说，仅仅调用到这类方法，并没有真正开始流的遍历。</p><h2 id="Terminal"><a href="#Terminal" class="headerlink" title="Terminal"></a>Terminal</h2><p>一个流只能有一个 terminal 操作，当这个操作执行后，流就被使用“光”了，无法再被操作。所以这必定是流的最后一个操作。Terminal 操作的执行，才会真正开始流的遍历，并且会生成一个结果，或者一个 side effect。</p><h2 id="操作示例"><a href="#操作示例" class="headerlink" title="操作示例"></a>操作示例</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> sum = widgets.stream()</span><br><span class="line">        .filter(w -&gt; w.getColor() == RED)</span><br><span class="line">        .mapToInt(w -&gt; w.getWeight())</span><br><span class="line">        .sum();</span><br></pre></td></tr></tbody></table></figure><p><code>stream()</code>获取当前小物件的 source，<code>filter</code> 和 <code>mapToInt</code> 为 <code>intermediate</code> 操作，进行数据筛选和转换，最后一个 <code>sum()</code> 为 <code>terminal</code> 操作，对符合条件的全部小物件作重量求和。</p><h1 id="流的使用"><a href="#流的使用" class="headerlink" title="流的使用"></a>流的使用</h1><p>  对 Stream 的使用就是实现一个 filter-map-reduce 过程，产生一个最终结果。</p><h2 id="构造流的方式"><a href="#构造流的方式" class="headerlink" title="构造流的方式"></a>构造流的方式</h2>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. Individual values</span></span><br><span class="line">Stream stream = Stream.of(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>);</span><br><span class="line"><span class="comment">// 2. Arrays</span></span><br><span class="line">String [] strArray = <span class="keyword">new</span> String[] {<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>};</span><br><span class="line">stream = Stream.of(strArray);</span><br><span class="line">stream = Arrays.stream(strArray);</span><br><span class="line"><span class="comment">// 3. Collections</span></span><br><span class="line">List&lt;String&gt; list = Arrays.asList(strArray);</span><br><span class="line">stream = list.stream();</span><br></pre></td></tr></tbody></table></figure><h2 id="流转换成其他数据结构"><a href="#流转换成其他数据结构" class="headerlink" title="流转换成其他数据结构"></a>流转换成其他数据结构</h2>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. Array</span></span><br><span class="line">String[] strArray1 = stream.toArray(String[]::<span class="keyword">new</span>);</span><br><span class="line"><span class="comment">// 2. Collection</span></span><br><span class="line">List&lt;String&gt; list1 = stream.collect(Collectors.toList());</span><br><span class="line">List&lt;String&gt; list2 = stream.collect(Collectors.toCollection(ArrayList::<span class="keyword">new</span>));</span><br><span class="line">Set set1 = stream.collect(Collectors.toSet());</span><br><span class="line">Stack stack1 = stream.collect(Collectors.toCollection(Stack::<span class="keyword">new</span>));</span><br><span class="line"><span class="comment">// 3. String</span></span><br><span class="line">String str = stream.collect(Collectors.joining()).toString();</span><br></pre></td></tr></tbody></table></figure><h2 id="流的操作"><a href="#流的操作" class="headerlink" title="流的操作"></a>流的操作</h2><ul><li><p>Intermediate</p><p>map (mapToInt, flatMap 等)、 filter、 distinct、 sorted、 peek、 limit、 skip、 parallel、 sequential、 unordered</p></li><li><p>Terminal</p><p>forEach、 forEachOrdered、 toArray、 reduce、 collect、 min、 max、 count、 anyMatch、 allMatch、 noneMatch、 findFirst、 findAny、 iterator</p></li><li><p>Short-circuiting</p><p>anyMatch、 allMatch、 noneMatch、 findFirst、 findAny、 limit</p></li></ul><h1 id="流的使用详解"><a href="#流的使用详解" class="headerlink" title="流的使用详解"></a>流的使用详解</h1><h2 id="Collect结果"><a href="#Collect结果" class="headerlink" title="Collect结果"></a>Collect结果</h2><ul><li>map(一对一)：作用是把 input Stream 的每一个元素，映射成 output Stream 的另外一个元素<br><img src="https://cdn.jsdelivr.net/gh/niithub/pic/blog/1605104679.jpg" alt=""></li><li><p>flatMap(一对多)：flatMap 把 input Stream 中的层级结构扁平化，就是将最底层元素抽出来放到一起，最终 output 的新 Stream 里面已经没有 List 了，都是直接的数据。<br><img src="https://cdn.jsdelivr.net/gh/niithub/pic/blog/1605104715.jpg" alt=""></p></li><li><p>filter：filter 对原始 Stream 进行某项过滤，通过过滤的元素被留下来生成一个新 Stream。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Integer[] sixNums = {<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>};</span><br><span class="line">Integer[] evens =</span><br><span class="line">        Stream.of(sixNums).filter(n -&gt; n%<span class="number">2</span> == <span class="number">0</span>).toArray(Integer[]::<span class="keyword">new</span>);</span><br></pre></td></tr></tbody></table></figure></li><li>forEach：forEach 方法接收一个 Lambda 表达式，然后在 Stream 的每一个元素上执行该表达式。forEach 是 terminal 操作，因此它执行后，Stream 的元素就被”消费”掉了，你无法对一个 Stream 进行两次 terminal 运算。forEach 不能修改自己包含的本地变量值，也不能用 break/return 之类的关键字提前结束循环。</li><li>findFirst： termimal 兼 short-circuiting 操作，它总是返回 Stream 的第一个元素，或者空，注意：返回值类型：Optional，使用它的目的是尽可能避免 NullPointerException。</li><li><p>reduce：主要作用是把 Stream 元素组合起来。它提供一个起始值，然后依照运算规则（BinaryOperator），和前面 Stream 的第一个、第二个、第 n 个元素组合。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符串连接，concat = "ABCD"</span></span><br><span class="line">String concat = Stream.of(<span class="string">"A"</span>, <span class="string">"B"</span>, <span class="string">"C"</span>, <span class="string">"D"</span>).reduce(<span class="string">""</span>, String::concat);</span><br><span class="line"><span class="comment">// 求最小值，minValue = -3.0</span></span><br><span class="line"><span class="keyword">double</span> minValue = Stream.of(-<span class="number">1.5</span>, <span class="number">1.0</span>, -<span class="number">3.0</span>, -<span class="number">2.0</span>).reduce(Double.MAX_VALUE, Double::min);</span><br><span class="line"><span class="comment">// 求和，sumValue = 10, 有起始值</span></span><br><span class="line"><span class="keyword">int</span> sumValue = Stream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>).reduce(<span class="number">0</span>, Integer::sum);</span><br><span class="line"><span class="comment">// 求和，sumValue = 10, 无起始值</span></span><br><span class="line">sumValue = Stream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>).reduce(Integer::sum).get();</span><br><span class="line"><span class="comment">// 过滤，字符串连接，concat = "ace"</span></span><br><span class="line">concat = Stream.of(<span class="string">"a"</span>, <span class="string">"B"</span>, <span class="string">"c"</span>, <span class="string">"D"</span>, <span class="string">"e"</span>, <span class="string">"F"</span>).</span><br><span class="line">filter(x -&gt; x.compareTo(<span class="string">"Z"</span>) &gt; <span class="number">0</span>).</span><br><span class="line">reduce(<span class="string">""</span>, String::concat);</span><br></pre></td></tr></tbody></table></figure></li><li><p>limit/skip：limit 返回 Stream 的前面 n 个元素；skip 则是扔掉前 n 个元素（它是由一个叫 subStream 的方法改名而来）。</p></li><li><p>allMatch：Stream 中全部元素符合传入的 predicate，返回 true</p></li><li><p>anyMatch：Stream 中只要有一个元素符合传入的 predicate，返回 true</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Predicate&lt;Integer&gt; predicate = i -&gt; i % <span class="number">2</span> == <span class="number">0</span>;</span><br><span class="line">Stream stream = Stream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>);</span><br><span class="line">Assert.isTrue(stream.anyMatch(predicate));</span><br></pre></td></tr></tbody></table></figure></li><li><p>noneMatch：Stream 中没有一个元素符合传入的 predicate，返回 true</p></li></ul><h2 id="收集器"><a href="#收集器" class="headerlink" title="收集器"></a>收集器</h2><p><img src="https://cdn.jsdelivr.net/gh/niithub/pic/blog/2196872658-3ef8902eeaf9c742.5vf1g4cq0nv.png" alt="image"></p><h3 id="收集"><a href="#收集" class="headerlink" title="收集"></a>收集</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>).stream().collect(Collectors.toList());</span><br></pre></td></tr></tbody></table></figure><h3 id="Grouping-和-Partitioning"><a href="#Grouping-和-Partitioning" class="headerlink" title="Grouping 和 Partitioning"></a>Grouping 和 Partitioning</h3><h4 id="groupingBy"><a href="#groupingBy" class="headerlink" title="groupingBy"></a>groupingBy</h4><ul><li><p>根据某一个字段或条件进行分组，返回一个 Map，其中 key 为分组的字段或条件，value 默认为 list，groupingByConcurrent() 是其并发版本</p><figure class="highlight reasonml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, List&lt;DataMap&gt;&gt; ids = <span class="built_in">list</span>.stream<span class="literal">()</span>.collect(<span class="module-access"><span class="module"><span class="identifier">Collectors</span>.</span></span>grouping<span class="constructor">By(<span class="params">p</span> -&gt; <span class="params">p</span>.<span class="params">getString</span>(<span class="string">"id"</span>)</span>));</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">- 如果 grouping<span class="constructor">By()</span> 分组的依据是一个 <span class="built_in">bool</span> 条件，则 key 的值为 <span class="literal">true</span>/<span class="literal">false</span> ，此时与 partitioning<span class="constructor">By()</span> 等价，但效率不如partitioningBy</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>Map&lt;Boolean, List<datamap>&gt; result = list.stream().collect(Collectors.groupingBy(p -&gt; p.getString(“id”).equalsIgnoreCase(“name”)));</datamap></p><figure class="highlight reasonml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- grouping<span class="constructor">By()</span>也支持两个入参，后一个参数可对分组后的 value 作进一步的处理</span><br><span class="line">  </span><br><span class="line">  - 结果集返回Set</span><br><span class="line">  ```JAVA</span><br><span class="line">  Map&lt;String, List&lt;DataMap&gt;&gt; ids = <span class="built_in">list</span>.stream<span class="literal">()</span>.collect(<span class="module-access"><span class="module"><span class="identifier">Collectors</span>.</span></span>grouping<span class="constructor">By(<span class="params">p</span> -&gt; <span class="params">p</span>.<span class="params">getString</span>(<span class="string">"id"</span>)</span>, <span class="module-access"><span class="module"><span class="identifier">Collectors</span>.</span></span><span class="keyword">to</span><span class="constructor">Set()</span>));</span><br></pre></td></tr></tbody></table></figure><ul><li>返回 value 集合中元素的数量<figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, List&lt;DataMap&gt;&gt; ids = list.stream().collect(Collectors.groupingBy(p -&gt; p.getString(<span class="string">"id"</span>), Collectors.counting()));</span><br></pre></td></tr></tbody></table></figure></li></ul><h4 id="partitioningBy"><a href="#partitioningBy" class="headerlink" title="partitioningBy"></a>partitioningBy</h4><p>返回值是boolean类型的，且返回值只能将数据分为两组也就是ture和false两组数据</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;Boolean, List&lt;DataMap&gt;&gt; result = list.stream().collect(Collectors.partitioningBy(p -&gt; p.getString(<span class="string">"id"</span>).equalsIgnoreCase(<span class="string">"name"</span>)));</span><br></pre></td></tr></tbody></table></figure></li></ul><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ol><li><a href="https://www.ixiaozhi.com/java-8-steam">使用 Java 8 中的 Stream</a></li><li><a href="https://www.baeldung.com/java-stream-filter-lambda">java-stream-filter-lambda</a></li><li><a href="https://www.baeldung.com/java-stream-filter-lambda">Java Stream Filter with Lambda Expression</a></li><li><a href="https://houbb.github.io/2019/02/27/java8-15-stream-collect-01">Java8收集器</a></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Java 8 中的 Stream 是对集合（Collection）对象功能的增强，它专注于对集合对象进行各种非常便利、高效的聚合操作（aggregate operation），或者大批量数据操作 (bulk data operation)。Stream 就如同一个迭代器（I
      
    
    </summary>
    
      <category term="Java" scheme="https://niithub.cn/categories/Java/"/>
    
      <category term="JDK" scheme="https://niithub.cn/categories/Java/JDK/"/>
    
    
      <category term="Stream" scheme="https://niithub.cn/tags/Stream/"/>
    
  </entry>
  
  <entry>
    <title>Java延迟阻塞队列-DelayQueue</title>
    <link href="https://niithub.cn//posts/eb2269ad/"/>
    <id>https://niithub.cn//posts/eb2269ad/</id>
    <published>2020-10-10T06:57:57.000Z</published>
    <updated>2021-10-13T16:21:04.010Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>DelayQueue是<code>java.util.concurrent</code>包中提供的无界延迟阻塞队列，可以被应用于生产者、消费者项目。DelayQueue中的元素只有在剩余存活时间为0后，才可以被消费者获取到。队列中元素的剩余存活时间升序排列。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelayQueue</span>&lt;<span class="title">E</span> <span class="keyword">extends</span> <span class="title">Delayed</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractQueue</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">BlockingQueue</span>&lt;<span class="title">E</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Delayed</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">Delayed</span>&gt; </span>{</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the remaining delay associated with this object, in the</span></span><br><span class="line"><span class="comment">     * given time unit.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> unit the time unit</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the remaining delay; zero or negative values indicate</span></span><br><span class="line"><span class="comment">     * that the delay has already elapsed</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">getDelay</span><span class="params">(TimeUnit unit)</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="https://cdn.jsdelivr.net/gh/niithub/pic/blog/20201010161322.png" alt=""></p><h1 id="DelayQueue的使用"><a href="#DelayQueue的使用" class="headerlink" title="DelayQueue的使用"></a>DelayQueue的使用</h1><p><code>DelayQueue</code>类提供了两个构造方法，一个是无参构造方法，一个是从其他集合中获取元素。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DelayQueue()</span><br><span class="line">DelayQueue(Collection&lt;? extends E&gt; c)</span><br></pre></td></tr></tbody></table></figure><h2 id="DelayQueue的节点元素"><a href="#DelayQueue的节点元素" class="headerlink" title="DelayQueue的节点元素"></a>DelayQueue的节点元素</h2><p>由于<code>DelayQueue</code>只能从<code>Delayed</code>类中获取元素，所以我们可以像下面这样创建一个节点-DelayedElement：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.Delayed;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : niithub</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> : 延迟队列里的对象元素</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> : 2020/10/10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelayedElement</span> <span class="keyword">implements</span> <span class="title">Delayed</span> </span>{</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 元素在队列中存活时长</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Long delay;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 元素出队时间节点</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Long expire;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 元素入队时间节点</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Long now;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DelayedElement</span><span class="params">(String name, Long delay)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.delay = delay;</span><br><span class="line">        expire = System.currentTimeMillis() + delay;</span><br><span class="line">        now = System.currentTimeMillis();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得延迟时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> unit</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getDelay</span><span class="params">(TimeUnit unit)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> unit.convert(<span class="keyword">this</span>.expire - System.currentTimeMillis(), TimeUnit.MILLISECONDS);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过比较存活时间排序</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> o</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Delayed o)</span> </span>{</span><br><span class="line">        DelayedElement delayedElement = (DelayedElement) o;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.expire &lt; delayedElement.expire) {</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.expire &gt; delayedElement.expire) {</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">final</span> StringBuilder sb = <span class="keyword">new</span> StringBuilder(<span class="string">"DelayedElement{"</span>);</span><br><span class="line">        sb.append(<span class="string">"delay="</span>).append(delay);</span><br><span class="line">        sb.append(<span class="string">", expire="</span>).append(expire);</span><br><span class="line">        sb.append(<span class="string">", now="</span>).append(now);</span><br><span class="line">        sb.append(<span class="string">'}'</span>);</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>上例中可以看出，构造函数中接收外部传入的元素存活时间<code>delay</code>，构造函数中计算出<code>expire</code>-元素的出队时间。<code>getDelay()</code>方法返回该元素的剩余存活时间，时间单位可自由设定。<br>当消费者使用<code>poll()</code>或<code>take()</code>从队列中获取元素时，<code>DelayQueue</code>将执行<code>getDelay()</code>方法，计算队列的头结点剩余存活时间，判断头结点是否允许出队，即能否被消费者获取到。当<code>getDelay()</code>返回0时，头结点可以出队，消费者能顺利获取到元素；当getDelay()返回负数时，表明头结点仍有存活时间，队列阻塞。</p><h2 id="创建DelayQueue"><a href="#创建DelayQueue" class="headerlink" title="创建DelayQueue"></a>创建DelayQueue</h2><ul><li>方法1<figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DelayQueue&lt;DelayedElement&gt; queue = <span class="keyword">new</span> DelayQueue&lt;&gt;();</span><br></pre></td></tr></tbody></table></figure></li><li>方法2<figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;DelayedElement&gt; listTask = ... <span class="comment">// a list of DelayTask objects</span></span><br><span class="line">DelayQueue&lt;DelayedElement&gt; queue = <span class="keyword">new</span> DelayQueue&lt;&gt;(listTask);</span><br></pre></td></tr></tbody></table></figure><h2 id="向队列中插入元素"><a href="#向队列中插入元素" class="headerlink" title="向队列中插入元素"></a>向队列中插入元素</h2></li></ul><p><code>DelayQueue</code>为入队操作提供了两个方法，<code>put()</code>和<code>offer()</code>。</p><table><thead><tr><th>返回值</th><th>方法名</th><th>描述</th></tr></thead><tbody><tr><td>boolean</td><td>offer(E e)</td><td>向delayQueue中插入元素</td></tr><tr><td>boolean</td><td>offer(E e, long timeout, TimeUnit unit)</td><td>向delayQueue中插入元素</td></tr><tr><td>void</td><td>put(E e)</td><td>向delayQueue中插入元素</td></tr></tbody></table><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">DelayedElement task1 = <span class="keyword">new</span> DelayedElement(<span class="string">"Learn Java"</span>, <span class="number">20_000</span>);</span><br><span class="line">DelayedElement task2 = <span class="keyword">new</span> DelayedElement(<span class="string">"Code Java"</span>, <span class="number">100_000</span>);</span><br><span class="line">DelayedElement task3 = <span class="keyword">new</span> DelayedElement(<span class="string">"Do Project"</span>, <span class="number">200_000</span>);</span><br><span class="line"> </span><br><span class="line">queue.offer(task1);</span><br><span class="line">queue.offer(task2);</span><br><span class="line">queue.offer(task3);</span><br></pre></td></tr></tbody></table></figure><h2 id="从阻塞队列中获取元素"><a href="#从阻塞队列中获取元素" class="headerlink" title="从阻塞队列中获取元素"></a>从阻塞队列中获取元素</h2><p><code>DelayQueue</code>为获取元素操作同样提供了三个方法，<code>poll()</code>、<code>take()</code>和<code>peek()</code>。</p><table><thead><tr><th>返回值</th><th>方法名</th><th>描述</th></tr></thead><tbody><tr><td>E</td><td>take()</td><td>检索并删除此队列的头结点，如果当前队列中元素均还在存活时间内，则阻塞当前队列直至某个元素的存活时间失效</td></tr><tr><td>E</td><td>poll()</td><td>检索并删除此队列的头结点，如果该队列没有延迟过期的元素，则返回null。</td></tr><tr><td>E</td><td>peek()</td><td>检索但不删除此队列的头结点，如果此队列为空，则返回null。与轮询不同，如果队列中没有过期的元素可用，此方法将返回下一个过期的元素(如果存在的话)。</td></tr></tbody></table><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">DelayedElement task = queue.poll();</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> (task != <span class="keyword">null</span>) {</span><br><span class="line">    System.out.println(<span class="string">"Process: "</span> + task);</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">    System.out.println(<span class="string">"No expired task"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> {</span><br><span class="line">    DelayedElement task = queue.take();</span><br><span class="line">    System.out.println(<span class="string">"Process: "</span> + task);</span><br><span class="line">} <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">DelayedElement task = queue.peek();</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> (task != <span class="keyword">null</span>) {</span><br><span class="line">    System.out.println(<span class="string">"Process: "</span> + task);</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">    System.out.println(<span class="string">"Queue is empty"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="生产者-消费者模式示例"><a href="#生产者-消费者模式示例" class="headerlink" title="生产者/消费者模式示例"></a>生产者/消费者模式示例</h2><h3 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h3><p>  DelayQueueProducer类的run()被调用时，元素入队。<br>  </p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> DelayQueue&lt;DelayedElement&gt; queue;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> taskCount;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Producer</span><span class="params">(DelayQueue&lt;DelayedElement&gt; queue)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.queue = queue;</span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>) {</span><br><span class="line">            queue.put(produce());</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">private</span> DelayedElement <span class="title">produce</span><span class="params">()</span> </span>{</span><br><span class="line">        String taskName = <span class="string">"Task "</span> + (++taskCount);</span><br><span class="line">        <span class="keyword">long</span> delayTime = <span class="keyword">new</span> Random().nextInt(<span class="number">10000</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        } <span class="keyword">catch</span> (InterruptedException ie) {</span><br><span class="line">            ie.printStackTrace();</span><br><span class="line">        }</span><br><span class="line"> </span><br><span class="line">        System.out.println(getName() + <span class="string">": produced "</span> + taskName);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DelayedElement(taskName, delayTime);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><h3 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h3>   <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> DelayQueue&lt;DelayedElement&gt; queue;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> taskCount;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Consumer</span><span class="params">(DelayQueue&lt;DelayedElement&gt; queue)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.queue = queue;</span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>) {</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                DelayedElement task = queue.take();</span><br><span class="line">                consume(task);</span><br><span class="line">            } <span class="keyword">catch</span> (InterruptedException ie) {</span><br><span class="line">                ie.printStackTrace();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">consume</span><span class="params">(DelayedElement task)</span> </span>{</span><br><span class="line">        System.out.println(getName() + <span class="string">": prepare to process "</span> + task);</span><br><span class="line">        task.run();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3>   <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelayQueueTest</span> </span>{</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> CONSUMER_THREADS = <span class="number">3</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        DelayQueue&lt;DelayedElement&gt; queueTasks = <span class="keyword">new</span> DelayQueue&lt;&gt;();</span><br><span class="line"> </span><br><span class="line">        Producer producer = <span class="keyword">new</span> Producer(queueTasks);</span><br><span class="line">        producer.start();</span><br><span class="line"> </span><br><span class="line">        Consumer[] consumers = <span class="keyword">new</span> Consumer[CONSUMER_THREADS];</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; CONSUMER_THREADS; i++) {</span><br><span class="line">            consumers[<span class="number">0</span>] = <span class="keyword">new</span> Consumer(queueTasks);</span><br><span class="line">            consumers[<span class="number">0</span>].start();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://www.codejava.net/java-core/concurrency/java-delayqueue-examples">Java DelayQueue Examples</a></li><li><a href="https://biteeniu.github.io/java/java-delay-queue/">延迟队列</a></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;DelayQueue是&lt;code&gt;java.util.concurrent&lt;/code&gt;包中提供的无界延迟阻塞队列，可以被应用于生产者、消费
      
    
    </summary>
    
      <category term="Java" scheme="https://niithub.cn/categories/Java/"/>
    
    
      <category term="阻塞队列" scheme="https://niithub.cn/tags/%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97/"/>
    
      <category term="Queue" scheme="https://niithub.cn/tags/Queue/"/>
    
  </entry>
  
  <entry>
    <title>解决JVM_Bind Error</title>
    <link href="https://niithub.cn//posts/6ae395c2/"/>
    <id>https://niithub.cn//posts/6ae395c2/</id>
    <published>2020-09-23T12:26:05.000Z</published>
    <updated>2021-10-13T16:21:04.009Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>  在使用IDEA重启Java项目时，有时会遇到下面这个错误：<br>  </p><figure class="highlight actionscript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Address already <span class="keyword">in</span> <span class="keyword">use</span>: JVM_Bind</span><br></pre></td></tr></tbody></table></figure><p></p><h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>  从错误提示字面意思理解是当前Application想绑定的端口已经被其他被的Application监听了，所以JVM才会抛出这个异常。</p><p>  Java程序需要一定的时间来完成中止运行操作，如果在你点<code>restart</code>的时候程序还在操作数据库，那么该程序在完成操作之前会一直保持数据库链接。</p><p>  基于上述原因，有时我们在IDEA中<code>restart</code>项目后，会遇到JVM_Bind这个错误。</p><h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><ul><li><p>（预防方法）不使用<code>restart</code>来重启项目，选择先<code>stop</code>项目，等个5s左右在<code>run</code></p></li><li><p>杀进监听你想绑定的那个端口的进程</p><ul><li><p>Windows</p><p>使用下面这个命令来查找某个端口对应的PID</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\&gt;netstat -ano | find <span class="string">"8080"</span></span><br></pre></td></tr></tbody></table></figure><p>一般结果会是这样的：</p><figure class="highlight angelscript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TCP    <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">8080</span>           <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">0</span>              LISTENING       <span class="number">26732</span></span><br></pre></td></tr></tbody></table></figure><p><code>26732</code>就是8080端口对应的PID，手动杀死该进程</p><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">taskkill <span class="regexp">/f /</span>pid <span class="number">26732</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>Linux</p><p>查找端口对应的PID</p><figure class="highlight angelscript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">trader@</span>asia:~ netstat -nap | grep <span class="number">8080</span></span><br></pre></td></tr></tbody></table></figure><p>手动杀死该进程</p><figure class="highlight angelscript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill -s <span class="number">9</span> <span class="number">13279</span></span><br></pre></td></tr></tbody></table></figure></li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h1&gt;&lt;p&gt;  在使用IDEA重启Java项目时，有时会遇到下面这个错误：&lt;br&gt;  &lt;/p&gt;&lt;figure class=&quot;highlight acti
      
    
    </summary>
    
      <category term="解决问题" scheme="https://niithub.cn/categories/%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98/"/>
    
    
      <category term="Windows" scheme="https://niithub.cn/tags/Windows/"/>
    
      <category term="端口占用" scheme="https://niithub.cn/tags/%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8/"/>
    
      <category term="IDEA" scheme="https://niithub.cn/tags/IDEA/"/>
    
  </entry>
  
  <entry>
    <title>使用jsDelivr加速Github仓库</title>
    <link href="https://niithub.cn//posts/fc2f9574/"/>
    <id>https://niithub.cn//posts/fc2f9574/</id>
    <published>2020-09-22T12:21:34.000Z</published>
    <updated>2021-10-13T16:21:04.009Z</updated>
    
    <content type="html"><![CDATA[<p>JSDelivr是国外的一家优秀的公共 CDN 服务提供商，也是首个「打通中国大陆（网宿公司运营）与海外的免费 CDN 服务」。JSDelivr的CDN节点可以引用的资源有Npm、Github、WordPress等，因此，我们可以使用JSDelivr来为我们的Github仓库提供CDN加速。<br>注意：Github仓库体积需<code>小于50M</code>。</p><p>通过访问符合JSDelivr规则的URL，我们就可访问到JSDelivr的CDN节点提供的资源。详细规则可参考<a href="https://www.jsdelivr.com/">官网</a>。</p><ul><li><p>URL标识分类</p><ul><li><p>Npm加速链接</p><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="regexp">//</span>cdn.jsdelivr.net<span class="regexp">/npm/</span>package@version/file</span><br></pre></td></tr></tbody></table></figure></li><li><p>Github加速链接</p><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="regexp">//</span>cdn.jsdelivr.net<span class="regexp">/gh/u</span>ser<span class="regexp">/repo@version/</span>file</span><br></pre></td></tr></tbody></table></figure></li><li><p>WordPress加速链接</p><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="regexp">//</span>cdn.jsdelivr.net<span class="regexp">/wp/</span>plugins<span class="regexp">/project/</span>tags<span class="regexp">/version/</span>file</span><br></pre></td></tr></tbody></table></figure></li></ul></li><li><p>Github资源加速链接示例</p><ul><li><p>用户名/仓库名@版本号/文件名</p><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">//</span> load jQuery v3.<span class="number">2.1</span></span><br><span class="line">https:<span class="regexp">//</span>cdn.jsdelivr.net<span class="regexp">/gh/</span>jquery<span class="regexp">/jquery@3.2.1/</span>dist/jquery.min.js</span><br></pre></td></tr></tbody></table></figure><p>通过上面这个链接，我们可以经由JSDelivr的CDN节点访问到<code>用户</code>jquery的<code>jquery</code>仓库，具体访问的是<code>版本</code>为<code>3.2.1</code>的jquery仓库的dist文件夹下的jquery.min.js文件。</p><p>如果加速链接中忽略版本号，则默认访问仓库的master分支。</p></li><li><p>在任意JS/CSS文件后添加<code>.min</code>能得到一个缩小版</p><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">//</span> load min js</span><br><span class="line">https:<span class="regexp">//</span>cdn.jsdelivr.net<span class="regexp">/gh/</span>jquery<span class="regexp">/jquery@3.2.1/</span>src/core.min.js</span><br></pre></td></tr></tbody></table></figure><p>如果访问的目标仓库对应地址中只有<code>core.js</code>这个文件，而没有<code>core.min.js</code>，JSDelivr会自动生成一个<code>min.js</code>。</p></li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;JSDelivr是国外的一家优秀的公共 CDN 服务提供商，也是首个「打通中国大陆（网宿公司运营）与海外的免费 CDN 服务」。JSDelivr的CDN节点可以引用的资源有Npm、Github、WordPress等，因此，我们可以使用JSDelivr来为我们的Github仓
      
    
    </summary>
    
      <category term="工具" scheme="https://niithub.cn/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="CDN" scheme="https://niithub.cn/tags/CDN/"/>
    
      <category term="Github" scheme="https://niithub.cn/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>MySQL-解除安全模式</title>
    <link href="https://niithub.cn//posts/5cbc292c/"/>
    <id>https://niithub.cn//posts/5cbc292c/</id>
    <published>2020-09-21T12:55:04.000Z</published>
    <updated>2021-10-14T15:50:11.520Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>有时我们在使用SQL修改数据库中数据时，会遇到下面的错误提示：<br><a id="more"></a><br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error Code: 1175. You are using safe update mode and you tried to update a table without a WHERE that uses a KEY column To disable safe mode, toggle the option in Preferences -&gt; SQL Editor and reconnect.</span><br></pre></td></tr></tbody></table></figure><p></p><h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>产生这个问题的原因是MySQL开启了“安全修改”模式-“<a href="https://dev.mysql.com/doc/refman/8.0/en/mysql-command-options.html#option_mysql_safe-updates">–safe-updates</a>”,MySQL的官方文档中指出，开启了“安全修改”模式后，<code>UPDATE</code>和<code>DELETE</code>操作必须在<code>WHERE</code>条件或<code>LIMIT</code>条件中显式使用key来映射待操作的数据行。如果不显式使用key指定数据，MySQL就会报错。<br>此外，该模式还对产生(或可能产生)非常大的结果集的<code>SELECT</code>语句施加了限制。</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><h2 id="关闭“安全修改”模式"><a href="#关闭“安全修改”模式" class="headerlink" title="关闭“安全修改”模式"></a>关闭“安全修改”模式</h2>  <figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> SQL_SAFE_UPDATES=<span class="number">0</span>;</span><br></pre></td></tr></tbody></table></figure><h2 id="在条件中显式声明key"><a href="#在条件中显式声明key" class="headerlink" title="在条件中显式声明key"></a>在条件中显式声明key</h2><p>  在<code>WHERE</code>条件或<code>LIMIT</code>条件中显式声明<code>key</code></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h1&gt;&lt;p&gt;有时我们在使用SQL修改数据库中数据时，会遇到下面的错误提示：&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="MySQL" scheme="https://niithub.cn/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="https://niithub.cn/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>在遍历中删除List的元素</title>
    <link href="https://niithub.cn//posts/5136b1ee/"/>
    <id>https://niithub.cn//posts/5136b1ee/</id>
    <published>2020-09-21T12:31:49.000Z</published>
    <updated>2021-10-13T16:21:04.009Z</updated>
    
    <content type="html"><![CDATA[<h1 id="遍历链表-数组的三种方式"><a href="#遍历链表-数组的三种方式" class="headerlink" title="遍历链表/数组的三种方式"></a>遍历链表/数组的三种方式</h1><ul><li><p>Iterator遍历</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">Iterator iterator = list.iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) {</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 如果想获取迭代器中的元素</span></span><br><span class="line">    Object cur = iterator.next();</span><br><span class="line">    ...</span><br><span class="line">}</span><br><span class="line">...</span><br></pre></td></tr></tbody></table></figure></li><li><p>for循环遍历</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i ++) {</span><br><span class="line">    System.out.println(list.get(i));</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>增强型for循环遍历</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(String tmp: list) {</span><br><span class="line">    System.out.println(tmp);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><h1 id="两种错误的在遍历中删除元素的方式"><a href="#两种错误的在遍历中删除元素的方式" class="headerlink" title="两种错误的在遍历中删除元素的方式"></a>两种错误的在遍历中删除元素的方式</h1><ul><li><p>for循环<code>顺序遍历</code></p><p>直接使用简单for循环，以for (int i = 0; i &lt; list.size(); i++) 进行遍历，这种方式可能会在遍历的过程中<code>漏掉</code>部分元素，从而出现少删的情况。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 假设list初始长度为4，{1,2,3,4}，element元素为2</span></span><br><span class="line"><span class="comment"> * 第二个元素满足条件被删掉，此时下标i为1，且原有的数组的第三个元素，变成了新数组的第二个元素</span></span><br><span class="line"><span class="comment"> * 新数组为{1,3,4}</span></span><br><span class="line"><span class="comment"> * 自增后i=2,但下标为2此时指向的是新数组中的第三个元素，即原数组中的第四个元素</span></span><br><span class="line"><span class="comment"> * `原数组中的第三个元素就被漏掉了`</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> list</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List <span class="title">forRemove</span><span class="params">(List list, Object element)</span> </span>{</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) {</span><br><span class="line">        <span class="keyword">if</span> (element.equals(list.get(i))) {</span><br><span class="line">            list.remove(i);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>增强型for循环遍历</p><p>使用增强for循环时，如果删除后继续向下循环则会报java.util.ConcurrentModificationException</p><figure class="highlight reasonml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Exception <span class="keyword">in</span> thread <span class="string">"main"</span> java.util.ConcurrentModificationException</span><br><span class="line">    at java.util.<span class="module-access"><span class="module"><span class="identifier">ArrayList$Itr</span>.</span></span>check<span class="constructor">ForComodification(ArrayList.<span class="params">java</span>:901)</span></span><br><span class="line">    at java.util.<span class="module-access"><span class="module"><span class="identifier">ArrayList$Itr</span>.</span></span>next(<span class="module-access"><span class="module"><span class="identifier">ArrayList</span>.</span></span>java:<span class="number">851</span>)</span><br><span class="line">    at com.lingyejun.leetcode.<span class="module-access"><span class="module"><span class="identifier">RemoveListElement</span>.</span></span>force<span class="constructor">ForRemove(RemoveListElement.<span class="params">java</span>:57)</span></span><br><span class="line">    at com.lingyejun.leetcode.<span class="module-access"><span class="module"><span class="identifier">RemoveListElement</span>.</span></span>main(<span class="module-access"><span class="module"><span class="identifier">RemoveListElement</span>.</span></span>java:<span class="number">112</span>)</span><br></pre></td></tr></tbody></table></figure></li></ul><h1 id="在遍历中删除元素的两种正确示例"><a href="#在遍历中删除元素的两种正确示例" class="headerlink" title="在遍历中删除元素的两种正确示例"></a>在遍历中删除元素的两种正确示例</h1><ul><li><p>Iterator遍历</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Iterator iterator = list.iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) {</span><br><span class="line">    Object cur = iterator.next();</span><br><span class="line">    <span class="keyword">if</span> (cur.equals(element)) {</span><br><span class="line">        <span class="comment">// 这里是Iterator.remove()，而不是list.remove()</span></span><br><span class="line">        iterator.remove();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>增强型for循环删除元素后break</p><p>使用增强for循环，删除元素后，立即跳出，则正常退出，但缺点是不能向后继续循环了。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (Object item : list) {</span><br><span class="line">    <span class="keyword">if</span> (item.equals(element)) {</span><br><span class="line">        list.remove(item);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;遍历链表-数组的三种方式&quot;&gt;&lt;a href=&quot;#遍历链表-数组的三种方式&quot; class=&quot;headerlink&quot; title=&quot;遍历链表/数组的三种方式&quot;&gt;&lt;/a&gt;遍历链表/数组的三种方式&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Iterator遍历&lt;/p&gt;
&lt;figur
      
    
    </summary>
    
      <category term="Java" scheme="https://niithub.cn/categories/Java/"/>
    
    
      <category term="Java" scheme="https://niithub.cn/tags/Java/"/>
    
      <category term="List" scheme="https://niithub.cn/tags/List/"/>
    
  </entry>
  
  <entry>
    <title>Git设置代理</title>
    <link href="https://niithub.cn//posts/cb59751e/"/>
    <id>https://niithub.cn//posts/cb59751e/</id>
    <published>2020-09-14T12:37:16.000Z</published>
    <updated>2021-10-14T15:50:11.520Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>查看本地代理服务器的端口</p><a id="more"></a><p>以<code>v2rayN</code>为例，查看本地代理服务器端口的方法为打开<code>v2rayN</code>的安装目录，查看<code>config.json</code>文件。</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">  {</span><br><span class="line">   ...</span><br><span class="line">  "inbounds": [</span><br><span class="line">    {</span><br><span class="line">      <span class="attr">"tag"</span>: <span class="string">"proxy"</span>,</span><br><span class="line">      <span class="attr">"port"</span>: <span class="number">10919</span>,</span><br><span class="line">      <span class="attr">"listen"</span>: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">      <span class="attr">"protocol"</span>: <span class="string">"socks"</span>,</span><br><span class="line">      <span class="attr">"sniffing"</span>: {</span><br><span class="line">        <span class="attr">"enabled"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">"destOverride"</span>: [</span><br><span class="line">          <span class="string">"http"</span>,</span><br><span class="line">          <span class="string">"tls"</span></span><br><span class="line">        ]</span><br><span class="line">      },</span><br><span class="line">      <span class="attr">"settings"</span>: {</span><br><span class="line">        <span class="attr">"auth"</span>: <span class="string">"noauth"</span>,</span><br><span class="line">        <span class="attr">"udp"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">"ip"</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">"address"</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">"clients"</span>: <span class="literal">null</span></span><br><span class="line">      },</span><br><span class="line">      <span class="attr">"streamSettings"</span>: <span class="literal">null</span></span><br><span class="line">    }</span><br><span class="line">  ]</span><br><span class="line">  ...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>上述JSON代码中，指出本地代理服务器使用的协议为<code>Socket5</code>，代理端口为<code>10919</code>。</p></li><li><p>为Git配置代理</p><p>Git 同时支持<code>Socket5</code>和<code>HTTP</code>代理，具体配置根据本地代理服务器实际情况配置即可。</p><ul><li><p>Socket5 代理</p><p>Git 默认的 Socket5 代理应设置为：(<code>${server}</code>是服务器地址，<code>${port}</code>是代理端口)</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">   git config --global http.proxy socks5://<span class="variable">${server}</span>:{port}</span><br><span class="line">git config --global https.proxy socks5://<span class="variable">${server}</span>:{port}</span><br></pre></td></tr></tbody></table></figure><p>以我本地服务器设置为例，设置代理的具体代码为：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.proxy socks5://127.0.0.1:10919</span><br><span class="line">git config --global https.proxy socks5://127.0.0.1:10919</span><br></pre></td></tr></tbody></table></figure><ul><li><p>HTTP代理</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.proxy http://<span class="variable">${server}</span>:{port}</span><br><span class="line">git config --global https.proxy https://<span class="variable">${server}</span>:{port}</span><br></pre></td></tr></tbody></table></figure></li></ul><p>以我本地服务器设置为例，设置代理的具体代码为：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.proxy http://127.0.0.1:10919</span><br><span class="line">git config --global https.proxy https://127.0.0.1:10919</span><br></pre></td></tr></tbody></table></figure></li></ul></li><li><p>取消代理设置</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global --<span class="built_in">unset</span> http.proxy </span><br><span class="line">git config --global --<span class="built_in">unset</span> https.proxy</span><br></pre></td></tr></tbody></table></figure></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;p&gt;查看本地代理服务器的端口&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
      <category term="Git" scheme="https://niithub.cn/categories/Git/"/>
    
    
      <category term="设置" scheme="https://niithub.cn/tags/%E8%AE%BE%E7%BD%AE/"/>
    
      <category term="Git" scheme="https://niithub.cn/tags/Git/"/>
    
      <category term="VPN" scheme="https://niithub.cn/tags/VPN/"/>
    
  </entry>
  
  <entry>
    <title>Spring-基于注解的缓存</title>
    <link href="https://niithub.cn//posts/4592c72b/"/>
    <id>https://niithub.cn//posts/4592c72b/</id>
    <published>2020-09-02T12:27:12.000Z</published>
    <updated>2021-10-13T16:21:04.009Z</updated>
    
    <content type="html"><![CDATA[<p>从3.1版本开始，Spring引入了对Cache的支持，还提供了<code>@Cacheable</code>、<code>@CacheEvict</code>、<code>@CachePut</code>、<code>@Caching</code>、<code>@CacheConfig</code>注解操作Cache。</p><p><code>@Cacheable</code>:  触发将信息存入缓存的操作<br><code>@CacheEvict</code>:  触发从缓存中删除特定已缓存信息的操作<br><code>CachePut</code>:  在不干扰方法执行的同时，更新缓存信息<br><code>@Caching</code>:  可以让一个方法同时使用多个嵌套的<code>@Cacheable</code>、<code>@CachePut</code>、<code>@CacheEvict</code>注<br>解<br><code>@CacheConfig</code>:  在类这一级别上共享一些常见的缓存相关设置</p><a id="more"></a><p>可以通过在<code>@Configuration</code>类使用<code>@EnableCaching</code>注解的方式开启Spring Cache的控制。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>{</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="Cacheable"><a href="#Cacheable" class="headerlink" title="@Cacheable"></a>@Cacheable</h1><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul><li><p>可以标记在一个方法上，也可以标记在类上，当标记在类上时，当前类的所有方法都支持缓存</p></li><li><p>当注解的方法被调用时，如果缓存中有值，则直接返回缓存中的数据</p></li></ul><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>value</td><td>缓存的空间名称，必须指定，Value值可以是一个Cache也可以是多个Cache，当需要指定多个Cache时，value写作成一个数组。也可以用cacheNames指定空间名称。</td></tr><tr><td>key</td><td>缓存的key，可以为空，如果指定要按照 SpEL 表达式编写，如果不指定，则缺省按照方法的所有参数进行组合。同一个空间名称value下的key唯一。</td></tr><tr><td>condition</td><td>缓存的条件，默认为true，使用 SpEL 编写，返回true或者false，只有为true才进行缓存。为true时：如果缓存有值，则不执行方法；如果缓存没值，则执行方法并将结果保存到缓存。为false时：不执行缓存，每次都执行方法。</td></tr></tbody></table><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><h3 id="value的使用"><a href="#value的使用" class="headerlink" title="value的使用"></a>value的使用</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Cacheable("books")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Book <span class="title">findBook</span><span class="params">(ISBN isbn)</span> </span>{...}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Cacheable({"books1", "books2"})</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Book <span class="title">findBook</span><span class="params">(ISBN isbn)</span> </span>{...}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Cacheable(value="books")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Book <span class="title">findBook</span><span class="params">(String isbn)</span> </span>{...}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Cacheable(CacaheNames="books")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Book <span class="title">findBook</span><span class="params">(String isbn)</span> </span>{...}</span><br></pre></td></tr></tbody></table></figure><p>以上三种注解的使用结果是相同的，此时如果查询缓存，查询的<code>key</code>一般为<code>books/{isbn}</code>。每次<code>findBook</code>方法被调用时，都会先检查缓存中是否已有Book数据，如果已经有Book数据，则直接返回数据，而不是重复执行<code>findBook</code>方法。</p><h3 id="key的使用"><a href="#key的使用" class="headerlink" title="key的使用"></a>key的使用</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Cacheable(value="books", key="isbn + '_' + #id")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Book <span class="title">findBook</span><span class="params">(String isbn, Integer id)</span> </span>{...}</span><br></pre></td></tr></tbody></table></figure><p>当isbn=”book0101”, id=002时，查询缓存所需要的key一般为 <code>books/book0101_002</code>。</p><h3 id="condition的使用"><a href="#condition的使用" class="headerlink" title="condition的使用"></a>condition的使用</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Cacheable(cacheNames = "books", key = "'book_'+ #id", condition = "#id &gt; 100")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Book <span class="title">findBook</span><span class="params">(String isbn, Integer id)</span> </span>{...}</span><br></pre></td></tr></tbody></table></figure><p>上例表示只有当id大于100时才开启缓存，缓存空间名为books，缓存的key为’book_’+#id，即当传入的id为101时,查询缓存的key为<code>books/book_101</code>。</p><h1 id="CachePut"><a href="#CachePut" class="headerlink" title="@CachePut"></a>@CachePut</h1><h2 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a>说明</h2><p>与@Cacheable不同的是，@CachePut是一个方法注解，使用@CachePut标注的方法在执行前不会去检查缓存中是否存在之前执行过的结果，而是每次都会执行该方法，并将执行结果以键值对的形式存入指定的缓存中。</p><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>key</td><td>同@Cacheable</td></tr><tr><td>value</td><td>同@Cacheable</td></tr><tr><td>condition</td><td>和@Cacheable区别是，无论是true还是false都会执行方法</td></tr></tbody></table><h2 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CachePut(value = "books", key = "'book_'+#id", condition = "#id &gt; 100")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Book <span class="title">findBook</span><span class="params">(String isbn, Integer id)</span> </span>{...}</span><br></pre></td></tr></tbody></table></figure><p>上例表示当id大于100时开启缓存，缓存空间名为books，缓存的key为’book_’+#id</p><h1 id="CacheEvict"><a href="#CacheEvict" class="headerlink" title="@CacheEvict"></a>@CacheEvict</h1><h2 id="说明-2"><a href="#说明-2" class="headerlink" title="说明"></a>说明</h2><ul><li><p>@CacheEvict是用来标注在需要清除缓存元素的方法或类上的。当标记在一个类上时表示其中所有的方法的执行都会触发缓存的清除操作。</p></li><li><p>@CacheEvict可以指定的属性有value、key、condition、allEntries和beforeInvocation。</p></li></ul><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>value</td><td>同@Cacheable</td></tr><tr><td>key</td><td>同@Cacheable</td></tr><tr><td>condition</td><td>缓存的条件，可以为空，使用 SpEL 编写，返回true或者false，只有为 true 才进行缓存。</td></tr><tr><td>allEntries</td><td>是否清空所有缓存内容，默认为 false。如果为 true，则方法调用后将清空指定value空间下的所有缓存。</td></tr><tr><td>beforeInvocation</td><td>是否在方法执行前就清空，默认为false。如果为true，则在方法执行前就清空缓存。为false时，如果方法执行抛出异常，则不会清空缓存。</td></tr></tbody></table><h2 id="例子-2"><a href="#例子-2" class="headerlink" title="例子"></a>例子</h2><h3 id="allEntries的使用"><a href="#allEntries的使用" class="headerlink" title="allEntries的使用"></a>allEntries的使用</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CacheEvict(value="users", allEntries=true)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Integer id)</span> </span>{}</span><br></pre></td></tr></tbody></table></figure><p>上例表示清除缓存空间名为’users’的缓存中的所有数据。</p><h3 id="beforeInvocation的使用"><a href="#beforeInvocation的使用" class="headerlink" title="beforeInvocation的使用"></a>beforeInvocation的使用</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CacheEvict(value="users", beforeInvocation=true)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Integer id)</span> </span>{}</span><br></pre></td></tr></tbody></table></figure><h1 id="Caching"><a href="#Caching" class="headerlink" title="@Caching"></a>@Caching</h1><h2 id="说明-3"><a href="#说明-3" class="headerlink" title="说明"></a>说明</h2><ul><li>@Caching注解可以让我们在一个方法或者类上同时指定多个Spring Cache相关的注解。</li><li>拥有三个属性：cacheable、put和evict，分别用于指定@Cacheable、@CachePut和@CacheEvict</li></ul><h2 id="例子-3"><a href="#例子-3" class="headerlink" title="例子"></a>例子</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Caching(cacheable = @Cacheable("users"), evict = { @CacheEvict("cache2"),@CacheEvict(value = "cache3", allEntries = true) })</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">find</span><span class="params">(Integer id)</span> </span>{}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从3.1版本开始，Spring引入了对Cache的支持，还提供了&lt;code&gt;@Cacheable&lt;/code&gt;、&lt;code&gt;@CacheEvict&lt;/code&gt;、&lt;code&gt;@CachePut&lt;/code&gt;、&lt;code&gt;@Caching&lt;/code&gt;、&lt;code&gt;@CacheConfig&lt;/code&gt;注解操作Cache。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;@Cacheable&lt;/code&gt;:  触发将信息存入缓存的操作&lt;br&gt;&lt;code&gt;@CacheEvict&lt;/code&gt;:  触发从缓存中删除特定已缓存信息的操作&lt;br&gt;&lt;code&gt;CachePut&lt;/code&gt;:  在不干扰方法执行的同时，更新缓存信息&lt;br&gt;&lt;code&gt;@Caching&lt;/code&gt;:  可以让一个方法同时使用多个嵌套的&lt;code&gt;@Cacheable&lt;/code&gt;、&lt;code&gt;@CachePut&lt;/code&gt;、&lt;code&gt;@CacheEvict&lt;/code&gt;注&lt;br&gt;解&lt;br&gt;&lt;code&gt;@CacheConfig&lt;/code&gt;:  在类这一级别上共享一些常见的缓存相关设置&lt;/p&gt;
    
    </summary>
    
      <category term="Spring" scheme="https://niithub.cn/categories/Spring/"/>
    
      <category term="注解" scheme="https://niithub.cn/categories/Spring/%E6%B3%A8%E8%A7%A3/"/>
    
    
      <category term="注解" scheme="https://niithub.cn/tags/%E6%B3%A8%E8%A7%A3/"/>
    
      <category term="Spring" scheme="https://niithub.cn/tags/Spring/"/>
    
      <category term="缓存" scheme="https://niithub.cn/tags/%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>Centos开启中文输入法</title>
    <link href="https://niithub.cn//posts/d4ca125/"/>
    <id>https://niithub.cn//posts/d4ca125/</id>
    <published>2020-08-20T02:07:07.000Z</published>
    <updated>2021-10-13T16:21:04.009Z</updated>
    
    <content type="html"><![CDATA[<p>Centos系统中自带中文输入法-智能拼音，开启中文输入法的操作步骤如下：<br>Applications –&gt;  System Tools –&gt;  Setting –&gt;  Region &amp; Language – &gt;  Input Source  点击”+”，找到 Chinese(china) ，选择”汉语(Itelligent Pinyin)”</p><p><img src="https://cdn.jsdelivr.net/gh/niithub/pic/blog/20201026202134.png" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Centos系统中自带中文输入法-智能拼音，开启中文输入法的操作步骤如下：&lt;br&gt;Applications –&amp;gt;  System Tools –&amp;gt;  Setting –&amp;gt;  Region &amp;amp; Language – &amp;gt;  Input Sourc
      
    
    </summary>
    
      <category term="Linux" scheme="https://niithub.cn/categories/Linux/"/>
    
      <category term="CentOS" scheme="https://niithub.cn/categories/Linux/CentOS/"/>
    
      <category term="日常记录" scheme="https://niithub.cn/categories/Linux/CentOS/%E6%97%A5%E5%B8%B8%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="CentOS" scheme="https://niithub.cn/tags/CentOS/"/>
    
      <category term="设置" scheme="https://niithub.cn/tags/%E8%AE%BE%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>Linux必要安装配置</title>
    <link href="https://niithub.cn//posts/f31f360f/"/>
    <id>https://niithub.cn//posts/f31f360f/</id>
    <published>2020-08-19T06:22:31.000Z</published>
    <updated>2021-10-14T14:50:12.678Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>安装图形化界面</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum groupinstall GNOME Desktop</span><br></pre></td></tr></tbody></table></figure><a id="more"></a></li></ul><ul><li><p>配置yum源</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/yum.repos.d/</span><br><span class="line">sudo mv CentOS-Base.repo CentOS-Base.repo_bak</span><br><span class="line"></span><br><span class="line">sudo wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line">yum clean all</span><br><span class="line">yum makecache</span><br></pre></td></tr></tbody></table></figure></li><li><p>安装Node.js</p><ul><li><p>安装</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://nodejs.org/dist/latest-v10.x/node-v10.24.1-linux-x64.tar.xz</span><br><span class="line">tar -xf node-v8.11.1-linux-x64.tar.xz --directory /usr/<span class="built_in">local</span> --strip-components 1</span><br></pre></td></tr></tbody></table></figure></li><li><p>配置</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br><span class="line">npm config <span class="built_in">set</span> disturl https://npm.taobao.org/dist</span><br><span class="line">npm config <span class="built_in">set</span> puppeteer_download_host https://npm.taobao.org/mirrors</span><br></pre></td></tr></tbody></table></figure></li></ul></li><li><p>安装git</p><ul><li><p>下载git</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -t install git</span><br></pre></td></tr></tbody></table></figure></li><li><p>配置git</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name yourName</span><br><span class="line">git config --global user.email yourEmail</span><br><span class="line">git config --global http.sslverify <span class="literal">false</span></span><br><span class="line">git config --global https.sslverify <span class="literal">false</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>生成密钥</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">"yourEmail"</span></span><br></pre></td></tr></tbody></table></figure></li></ul></li><li><p>安装Nginx</p><ul><li><p>添加Nginx存储库</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install epel-release</span><br></pre></td></tr></tbody></table></figure></li><li><p>安装Nginx</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install nginx</span><br></pre></td></tr></tbody></table></figure></li><li><p>启动Nginx</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start nginx</span><br></pre></td></tr></tbody></table></figure></li><li><p>重启Nginx</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service nginx restart</span><br></pre></td></tr></tbody></table></figure></li><li><p>开机自启动Nginx</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> nginx</span><br></pre></td></tr></tbody></table></figure></li></ul></li><li><p>字符集修改</p><ul><li><p>进入配置目录</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/sysconfig/</span><br></pre></td></tr></tbody></table></figure></li><li><p>修改字符集</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo vi i18n</span><br><span class="line">LANG=<span class="string">'zh_CN.utf8'</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>读取更改后的配置</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/sysconfig/i18n</span><br></pre></td></tr></tbody></table></figure></li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;p&gt;安装图形化界面&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;yum groupinstall GNOME Desktop&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://niithub.cn/categories/Linux/"/>
    
      <category term="CentOS" scheme="https://niithub.cn/categories/Linux/CentOS/"/>
    
      <category term="命令记录" scheme="https://niithub.cn/categories/Linux/CentOS/%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="CentOS" scheme="https://niithub.cn/tags/CentOS/"/>
    
      <category term="Linux" scheme="https://niithub.cn/tags/Linux/"/>
    
      <category term="安装记录" scheme="https://niithub.cn/tags/%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>PostConstruct注解</title>
    <link href="https://niithub.cn//posts/c710e893/"/>
    <id>https://niithub.cn//posts/c710e893/</id>
    <published>2020-07-24T07:00:43.000Z</published>
    <updated>2021-10-13T16:21:04.009Z</updated>
    
    <content type="html"><![CDATA[<p>从Java EE5规范开始，Servlet中增加了影响Servlet生命周期的注解，<code>@PostConstruct</code>，这个注解用来修饰方法，并且在依赖注入后执行初始化操作。这个注解可以在所有的类上使用，即使这个类没有请求任何资源，使用<code>@PostConstruct</code>注解的方法也可以被注入。</p><blockquote><p> 注意：一个类中只能使用该注解一次。</p></blockquote><p>通常使用该注解在static方法中注入bean：<br></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DSHWechatApiUtil</span> </span>{&nbsp;&nbsp;&nbsp; </span><br><span class="line">    <span class="meta">@Autowired</span>&nbsp;&nbsp;&nbsp;</span><br><span class="line">    <span class="keyword">private</span> ParamConfig paramConfig;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ParamConfig staticParamConfig;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>{</span><br><span class="line">        staticParamConfig = paramConfig;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> JSONObject <span class="title">example</span><span class="params">()</span> </span>{</span><br><span class="line">        JSONObject returnObject = <span class="keyword">new</span> JSONObject();</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            returnObject = staticParamConfig.doSomething(...);</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> returnObject;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><a id="more"></a><p>使用<code>@PostConstruct</code> 注解的方法必须遵循以下规范：</p><ul><li>该方法不得有任何参数，除非是在 EJB 拦截器 (interceptor) 的情况下，根据 EJB 规范的定义<br>，在这种情况下它将带有一个 InvocationContext对象</li><li>该方法的返回类型必须为 void</li><li>使用<code>@PostConstruct</code>注解的方法访问控制符可以是 public、protected、package private 或 private；</li></ul><p>使用<code>@PostConstruct</code>有如下两种方式：</p><p>Method 1:</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostConstruct</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">someMethod</span><span class="params">()</span></span>{}</span><br></pre></td></tr></tbody></table></figure><p>Method 2:</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@PostConstruct</span> <span class="function"><span class="keyword">void</span> <span class="title">someMethod</span><span class="params">()</span></span>{}</span><br></pre></td></tr></tbody></table></figure><p>被<code>@PostConstruct</code>修饰的方法会在服务器加载Servlet的时候运行，并且只会被服务器执行一次。<br><code>@PostConstruct</code>在构造函数之后执行，init（）方法之前执行，生命周期如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/niithub/pic/blog/20201026202210.png" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从Java EE5规范开始，Servlet中增加了影响Servlet生命周期的注解，&lt;code&gt;@PostConstruct&lt;/code&gt;，这个注解用来修饰方法，并且在依赖注入后执行初始化操作。这个注解可以在所有的类上使用，即使这个类没有请求任何资源，使用&lt;code&gt;@PostConstruct&lt;/code&gt;注解的方法也可以被注入。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; 注意：一个类中只能使用该注解一次。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;通常使用该注解在static方法中注入bean：&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Component&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DSHWechatApiUtil&lt;/span&gt; &lt;/span&gt;{&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Autowired&lt;/span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; ParamConfig paramConfig;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Autowired&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; ParamConfig staticParamConfig;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@PostConstruct&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        staticParamConfig = paramConfig;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; JSONObject &lt;span class=&quot;title&quot;&gt;example&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        JSONObject returnObject = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; JSONObject();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            returnObject = staticParamConfig.doSomething(...);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        } &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (Exception e) {&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        }&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; returnObject;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://niithub.cn/tags/Java/"/>
    
      <category term="注解" scheme="https://niithub.cn/tags/%E6%B3%A8%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>MySQL之replace into()</title>
    <link href="https://niithub.cn//posts/5f13f7b7/"/>
    <id>https://niithub.cn//posts/5f13f7b7/</id>
    <published>2020-07-23T07:15:00.000Z</published>
    <updated>2021-10-13T16:21:04.011Z</updated>
    
    <content type="html"><![CDATA[<p>REPLACE()是MySQL数据库对普通SQL的扩展，该函数主要运用在以下场景：<br>往存在主键或唯一索引的表中插入一条新数据，如果原表中已经有此行数据（根据<code>主键</code>或<code>唯一索引</code>判断），则删除原数据后插入新数据，若未发现<code>主键重复</code>或<code>唯一索引重复</code>则直接插入原数据。</p><pre><code>注：MySQL使用主键或唯一索引来辨别要插入的新数据是否已经在原表中存在，如果待操作的表不存在主键或唯一索引，则REPLACE()将像INSERT()执行。    在对表执行REPLACE()时，你需要至少拥有INSERT和DELETE权限。</code></pre> <a id="more"></a><ul><li><p>使用<code>REPLACE</code>往MySQL中插入一行新数据</p><p>  下面是<code>REPLACE</code>的语法:</p>  <figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">REPLACE</span> [<span class="keyword">INTO</span>] table_name(column_list) <span class="keyword">VALUES</span>(value_list);</span><br></pre></td></tr></tbody></table></figure><p>  除了<code>REPLACE</code>和<code>INSERT</code>不同外，其他地方很像插入语句。</p><p>  让我们通过一个例子来看看REPLACE函数的执行过程。</p><p>  首先建立一张名为<code>cities</code>的表：</p>  <figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> cities (</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">INT</span> AUTO_INCREMENT PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">    population <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><p>  往表中插入一些数据：</p>  <figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span></span><br><span class="line"><span class="keyword">INTO</span></span><br><span class="line">cities (<span class="keyword">name</span>, population)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">'New York'</span>, <span class="number">8008278</span>),</span><br><span class="line">(<span class="string">'Los Angeles'</span>, <span class="number">3694825</span>),</span><br><span class="line">(<span class="string">'San Diego'</span>, <span class="number">1223405</span>);</span><br></pre></td></tr></tbody></table></figure><p>  执行查询操作，以验证数据是否插入成功。</p>  <figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> cities;</span><br></pre></td></tr></tbody></table></figure><p>  <img src="https://cdn.jsdelivr.net/gh/niithub/pic/blog/20201026202338.png" alt=""></p><p>  使用REPLACE()将<code>Los Angeles</code>的人口数改为<code>3696820</code>:</p>  <figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">REPLACE</span> <span class="keyword">INTO</span> cities(<span class="keyword">id</span>,population) <span class="keyword">VALUES</span>(<span class="number">2</span>,<span class="number">3696820</span>);</span><br></pre></td></tr></tbody></table></figure><p>  再次查询，验证使用REPLACE()修改是否生效。<br>  <img src="https://cdn.jsdelivr.net/gh/niithub/pic/blog/20201026202414.png" alt=""><br>  修改列的<code>name</code>字段值变为<code>NULL</code>，REPLACE()的执行过程如下所示：</p><ul><li>首先，REPLACE()试图往表中插入一条新的数据，由于id=2已经存在，所以插入操作执行失败。</li><li>REPLACE()删除原有的id=2的这行数据，插入了一行新的id=2,population=3696820的数据，由于在REPLACE语句中未定义<code>name</code>的值，所以新数据行<code>name</code>为NULL。</li></ul></li><li><p>使用<code>REPLACE</code>修改MySQL中的数据</p><p>使用REPLACE修改时，所用语法如下所示：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">REPLACE</span> <span class="keyword">INTO</span> <span class="keyword">table</span></span><br><span class="line"><span class="keyword">SET</span> column1 = value1, column2 = value2;</span><br></pre></td></tr></tbody></table></figure><p>语法和<code>UPDATE</code>语句很像，但<code>REPLACE</code>的语法中没有<code>WHERE</code>条件子句。<br>下面这个例子将使用<code>REPLACE</code>把<code>id=2</code>的数据修改为下面所示。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">REPLACE</span> <span class="keyword">INTO</span> cities</span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">id</span> = <span class="number">2</span>,</span><br><span class="line">    <span class="keyword">name</span> = <span class="string">'Phoenix'</span>,</span><br><span class="line">    population = <span class="number">1768980</span>;</span><br></pre></td></tr></tbody></table></figure><p>和<code>UPDATE</code>语句不同的是，如果在<code>SET</code>子句中没有指定列的值，<code>REPLACE</code>语句将为该列赋予默认值。</p><p>执行查询操作，以验证数据修改操作是否成功。<img src="https://cdn.jsdelivr.net/gh/niithub/pic/blog/20201026202448.png" alt=""></p><ul><li>使用<code>REPLACE</code>插入<code>SELECT</code>查询出的数据信息<br>使用REPLACE插入SELECT查询出的信息时，所用语法如下所示：<figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">REPLACE</span> <span class="keyword">INTO</span> table_1(column_list)</span><br><span class="line"><span class="keyword">SELECT</span> column_list</span><br><span class="line"><span class="keyword">FROM</span> table_2</span><br><span class="line"><span class="keyword">WHERE</span> where_condition;</span><br></pre></td></tr></tbody></table></figure>同样的，上述语法和<code>INSERT INTO SELECT</code>的语法有点相似。</li></ul><p>接下来我们用<code>REPLACE INTO</code>来复制<code>cities</code>表中<code>id=1</code>的行数据。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">REPLACE</span> <span class="keyword">INTO</span> </span><br><span class="line">    cities(<span class="keyword">name</span>,population)</span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    <span class="keyword">name</span>,</span><br><span class="line">    population </span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">   cities </span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">1</span>;</span><br></pre></td></tr></tbody></table></figure><p>执行查询操作，以验证数据复制操作是否成功。<br><img src="https://cdn.jsdelivr.net/gh/niithub/pic/blog/20201026202541.png" alt=""></p></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;REPLACE()是MySQL数据库对普通SQL的扩展，该函数主要运用在以下场景：&lt;br&gt;往存在主键或唯一索引的表中插入一条新数据，如果原表中已经有此行数据（根据&lt;code&gt;主键&lt;/code&gt;或&lt;code&gt;唯一索引&lt;/code&gt;判断），则删除原数据后插入新数据，若未发现&lt;code&gt;主键重复&lt;/code&gt;或&lt;code&gt;唯一索引重复&lt;/code&gt;则直接插入原数据。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;注：MySQL使用主键或唯一索引来辨别要插入的新数据是否已经在原表中存在，如果待操作的表不存在主键或唯一索引，则REPLACE()将像INSERT()执行。
    在对表执行REPLACE()时，你需要至少拥有INSERT和DELETE权限。
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="MySQL" scheme="https://niithub.cn/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="https://niithub.cn/tags/MySQL/"/>
    
      <category term="函数" scheme="https://niithub.cn/tags/%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>MySQL之FIND_IN_SET()函数的使用</title>
    <link href="https://niithub.cn//posts/725ce6e3/"/>
    <id>https://niithub.cn//posts/725ce6e3/</id>
    <published>2020-07-22T07:14:00.000Z</published>
    <updated>2021-10-13T16:21:04.011Z</updated>
    
    <content type="html"><![CDATA[<p>MySQL提供了一个名为 <code>FIND_IN_SET()</code> 的内置字符串函数，允许您在逗号分隔的字符串列表中查找指定字符串的位置。</p><p>该函数的语法：<code>FIND_IN_SET(str, strlist)</code>str为要查询的字符串，strlist为目标字符串，参数以<code>,</code>分隔，如<code>(1,2,3,4)</code>。</p><p>函数查询结果为null或元素位置，当str/strlist任意一个参数为null时，函数返回值为null；当strlist中不包含str或strlist为空字符串时，函数返回值为0；当str中包含<code>,</code>时函数将无法运行。</p>  <figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">MySQL&gt; SELECT find_in_set('2', '1,2,3,4');</span><br><span class="line">    -&gt; 2</span><br><span class="line">MySQL&gt; SELECT find_in_set('6', '1');</span><br><span class="line">    -&gt; 0</span><br><span class="line">MySQL&gt; SELECT find_in_set('2', null);</span><br><span class="line">    -&gt; NULL</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;MySQL提供了一个名为 &lt;code&gt;FIND_IN_SET()&lt;/code&gt; 的内置字符串函数，允许您在逗号分隔的字符串列表中查找指定字符串的位置。&lt;/p&gt;
&lt;p&gt;该函数的语法：&lt;code&gt;FIND_IN_SET(str, strlist)&lt;/code&gt;str为要查询的字
      
    
    </summary>
    
      <category term="MySQL" scheme="https://niithub.cn/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="https://niithub.cn/tags/MySQL/"/>
    
      <category term="函数" scheme="https://niithub.cn/tags/%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>直接插入排序</title>
    <link href="https://niithub.cn//posts/2b06d603/"/>
    <id>https://niithub.cn//posts/2b06d603/</id>
    <published>2019-08-05T08:36:00.000Z</published>
    <updated>2021-10-13T16:21:04.011Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基本知识"><a href="#基本知识" class="headerlink" title="基本知识"></a>基本知识</h3><ol><li>直接插入排序的最好情况下时间复杂度为O(n)，最坏情况下时间复杂度为O(n^2)。</li><li>直接插入排序只需要一个记录的辅助空间，其空间复杂度为O(1)</li><li>直接插入排序是<strong>稳定的</strong>排序算法，适用于待排序记录数较少且基本有效的情况。<strong>当待排序的记录数目过多时，插入排序的性能直线下降</strong>。<a id="more"></a><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3></li></ol><p>假如8个记录的关键字序列为（56, 68, 25, 45, 90, 38, 10, 72）<br><img src="https://oscimg.oschina.net/oscnet/0caac6b26a6aa985462aa29dd514d75ac8c.jpg" alt=""></p><h3 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h3><ol><li><p>插入前需要找到插入位置，移动记录空出插入位置，第i趟插入排序将记录L.rcd[i+1]插入到有序区L.rcd[1..i]中</p></li><li><p>其中中括号中的序列表示有序序列，中括号后面的序列表示无序序列，每一趟的直接插入排序就是将无序序列中的第一个记录，即待插入记录，插入到有序序列中的合适位置，使得有序序列的长度增加一个，只包含一个记录的序列是有序的，因此第一趟插入排序是将存储在2号单元的记录插入到前面有序序列中去。</p></li><li><p>首先需要查找插入位置，查找插入位置，可以在有序序列中从前到后进行查找，也可以从后向前进行查找，查找结束，发现待插入记录38应插入到记录25和45之间，若要实现插入操作，还需要将记录45到90向后移动一个位置, 以空出插入位置，将记录38插入。</p></li><li><p>在移动记录时，若选择从前到后的顺序移动记录，后面的记录会被覆盖，因此<strong>必须从后向前移动记录</strong>，记录90向后移动时，会覆盖掉待插入记录38，因此，移动前还需要将记录38暂存他处。</p></li><li><p>那么对应第i趟插入排序，就是将存储在i+1号单元的待插入记录插入到有序区[1..i]号单元的合适位置中，很显然要实现该算法，插入前需要找到插入位置，移动记录空出插入位置。</p></li></ol><h3 id="核心程序实现"><a href="#核心程序实现" class="headerlink" title="核心程序实现"></a>核心程序实现</h3><ul><li><p>c</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InsertSort</span><span class="params">(RcdSqList &amp;L)</span> </span>{</span><br><span class="line">    <span class="comment">// 对顺序表L作直接插入排序。</span></span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i&lt;L.length; ++i) {</span><br><span class="line">        <span class="keyword">if</span>(L.rcd[i+<span class="number">1</span>].key&lt;L.rcd[i].key) {</span><br><span class="line">            <span class="comment">// 需将L.rcd[i+1]插入有序序列</span></span><br><span class="line">            L.rcd[<span class="number">0</span>] = L.rcd[i+<span class="number">1</span>]; <span class="comment">// 先将记录L.rcd[i+1]保存在空闲的0号单元</span></span><br><span class="line">            j = i+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">do</span> {</span><br><span class="line">                j--;</span><br><span class="line">                L.rcd[j+<span class="number">1</span>] = L.rcd[j]; <span class="comment">// 记录后移</span></span><br><span class="line">            } <span class="keyword">while</span>(L.rcd[<span class="number">0</span>].key&lt;L.rcd[j<span class="number">-1</span>].key); <span class="comment">// 判断是否需要继续移动</span></span><br><span class="line">            L.rcd[j] = L.rcd[<span class="number">0</span>]; <span class="comment">// 插入</span></span><br><span class="line">    }</span><br><span class="line">    }            </span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;基本知识&quot;&gt;&lt;a href=&quot;#基本知识&quot; class=&quot;headerlink&quot; title=&quot;基本知识&quot;&gt;&lt;/a&gt;基本知识&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;直接插入排序的最好情况下时间复杂度为O(n)，最坏情况下时间复杂度为O(n^2)。&lt;/li&gt;
&lt;li&gt;直接插入排序只需要一个记录的辅助空间，其空间复杂度为O(1)&lt;/li&gt;
&lt;li&gt;直接插入排序是&lt;strong&gt;稳定的&lt;/strong&gt;排序算法，适用于待排序记录数较少且基本有效的情况。&lt;strong&gt;当待排序的记录数目过多时，插入排序的性能直线下降&lt;/strong&gt;。&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
      <category term="算法" scheme="https://niithub.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://niithub.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="插入排序" scheme="https://niithub.cn/tags/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>排序算法</title>
    <link href="https://niithub.cn//posts/735e5788/"/>
    <id>https://niithub.cn//posts/735e5788/</id>
    <published>2019-08-05T08:14:00.000Z</published>
    <updated>2021-10-13T16:21:04.011Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://oscimg.oschina.net/oscnet/f4c0edd65cce40701a0bc69d44a6198fcc9.jpg" alt=""></p><ol><li>排序是将一组“无序”的记录序列调整为“有序”的记录序列</li><li>含有多个域的数据元素称为<strong>记录</strong>，用于对记录进行唯一标识的域称为<strong>关键字</strong><a id="more"></a></li><li><p>根据在排序过程中涉及的存储器不同，可将排序方法分为两大类：<strong>内部排序</strong>和<strong>外部排序</strong></p><p> a. <strong>内部排序</strong>是指待排序列完全存放在内存中所进行的排序过程，适合不太大的元素序列</p><p> b. <strong>外部排序</strong>指的是大文件的排序，待排序的文件无法一次装入内存，将待排序的记录存储在外存储器上，需要在内存和外部存储器之间进行多次数据交换，以达到排序整个文件的目的</p></li><li><p>排序算法的复杂度</p><p> a. 简单的排序方法，时间复杂度为O(n^{2})</p><p> b. 先进的排序方法，时间复杂度为O(nlogn)</p><p> c. 基数排序，时间复杂度为O(n)</p><p> d. 希尔排序的算法时间复杂度与增量序列有关，还涉及到一些数学上尚未解决的难题，其算法时间复杂度不属于以上类别</p></li><li><p>排序算法的稳定性</p><p> a. 假设ki = kj (1≤i≤n,1≤j≤n,i≠j)，且在排序前的序列中ki领先于kj (即i &lt; j)。若在排序后的序列中ki仍领先于kj，则称所用的排序方法是稳定的；否则，排序方法是不稳定的。</p><p> b. 从排序的稳定性上来看，基数排序是稳定的，除了简单选择排序，其他各种简单排序法是稳定的。然而，快速排序、堆排序、希尔排序等时间性能较好的排序方法，以及简单选择排序都是不稳定的。多数情况下，排序是按照记录的主关键字进行的，此时不用考虑排序方法的稳定性。如果排序是按记录的次关键字进行的，则应充分考虑排序方法的稳定性。</p></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/f4c0edd65cce40701a0bc69d44a6198fcc9.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;排序是将一组“无序”的记录序列调整为“有序”的记录序列&lt;/li&gt;
&lt;li&gt;含有多个域的数据元素称为&lt;strong&gt;记录&lt;/strong&gt;，用于对记录进行唯一标识的域称为&lt;strong&gt;关键字&lt;/strong&gt;&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
      <category term="算法" scheme="https://niithub.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://niithub.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="排序" scheme="https://niithub.cn/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>简单选择排序</title>
    <link href="https://niithub.cn//posts/7c936fca/"/>
    <id>https://niithub.cn//posts/7c936fca/</id>
    <published>2019-06-12T13:48:00.000Z</published>
    <updated>2021-10-13T16:21:04.011Z</updated>
    
    <content type="html"><![CDATA[<h3 id="程序实现"><a href="#程序实现" class="headerlink" title="程序实现"></a>程序实现</h3><ul><li>C<a id="more"></a><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span>  <span class="keyword">int</span>  KeyType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">RcdType</span>{</span></span><br><span class="line">    KeyType  key;        </span><br><span class="line">}RecordType, RcdType;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">selectSort</span><span class="params">(RcdType rcd[], <span class="keyword">int</span> length)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>{</span><br><span class="line">    RecordType record[<span class="number">9</span>];</span><br><span class="line">    <span class="keyword">int</span> i =<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (i; i &lt;= <span class="number">8</span>; i++) {</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;record[i]);</span><br><span class="line">    }</span><br><span class="line">    selectSort(record, <span class="number">8</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">8</span>; i++) {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, record[i]);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">selectSort</span><span class="params">(RcdType rcd[], <span class="keyword">int</span> length)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> n = length, k, j;</span><br><span class="line">    RcdType x;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n - <span class="number">1</span>; ++i) {</span><br><span class="line">        k = i;</span><br><span class="line">        <span class="keyword">for</span>(j = i + <span class="number">1</span>; j &lt;= n; ++j) {</span><br><span class="line">            <span class="keyword">if</span> (rcd[j].key &lt; rcd[k].key) {</span><br><span class="line">                k = j;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (k != i) {</span><br><span class="line">            x = rcd[i];</span><br><span class="line">            rcd[i] = rcd[k];</span><br><span class="line">            rcd[k] = x;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;程序实现&quot;&gt;&lt;a href=&quot;#程序实现&quot; class=&quot;headerlink&quot; title=&quot;程序实现&quot;&gt;&lt;/a&gt;程序实现&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;C&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
      <category term="算法" scheme="https://niithub.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://niithub.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="排序" scheme="https://niithub.cn/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>分治法应用：快速排序算法</title>
    <link href="https://niithub.cn//posts/792d772/"/>
    <id>https://niithub.cn//posts/792d772/</id>
    <published>2019-06-12T13:07:00.000Z</published>
    <updated>2021-10-13T16:21:04.011Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h3><ul><li>首先从待排序列中选定一个关键字，称之为枢轴</li><li><p>将待排序序列划分成位于枢轴前后的两个子序列</p><ul><li>枢轴之前的子序列的所有关键字都不大于枢轴</li><li>枢轴之后的子序列的所有关键字都不小于枢轴</li></ul></li><li><p>此时枢轴已到位，再按同样方法对这两个子序列分别递归进行快速排序，最终使得整个序列有序</p><a id="more"></a></li></ul><h3 id="程序实现"><a href="#程序实现" class="headerlink" title="程序实现"></a>程序实现</h3><ul><li><p>C</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span>  <span class="keyword">int</span>  KeyType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">RcdType</span>{</span></span><br><span class="line">    KeyType  key;        </span><br><span class="line">}RecordType, RcdType;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Partition</span><span class="params">(RcdType rcd[ ], <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QSort</span><span class="params">(RcdType rcd[], <span class="keyword">int</span> s, <span class="keyword">int</span> t)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QuickSort</span><span class="params">(RecordType l[])</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>{</span><br><span class="line">    RecordType record[<span class="number">9</span>];</span><br><span class="line">    <span class="keyword">int</span> i =<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (i; i &lt;= <span class="number">8</span>; i++) {</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;record[i]);</span><br><span class="line">    }</span><br><span class="line">    QuickSort(record);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">8</span>; i++) {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, record[i]);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Partition</span><span class="params">(RcdType rcd[ ], <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>{</span><br><span class="line">    <span class="comment">// 对rcd[low..high] 作一次划分，并返回枢轴记录应该所处的位置</span></span><br><span class="line">    rcd[<span class="number">0</span>] = rcd[low];</span><br><span class="line">    <span class="comment">// 将枢轴移至数组的闲置分量</span></span><br><span class="line">    <span class="keyword">while</span>(low&lt;high) {</span><br><span class="line">        <span class="comment">// low和high从两端交替地向中间移动</span></span><br><span class="line">        <span class="keyword">while</span> (low&lt;high &amp;&amp; rcd[high].key &gt;= rcd[<span class="number">0</span>].key){</span><br><span class="line">            --high;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 将比枢轴小的记录移到前端</span></span><br><span class="line">        rcd[low] = rcd[high];</span><br><span class="line">        <span class="keyword">while</span>(low&lt;high &amp;&amp; rcd[low].key &lt;= rcd[<span class="number">0</span>].key) {</span><br><span class="line">            ++low;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 将比枢轴大的记录移到后端</span></span><br><span class="line">        rcd[high] = rcd[low];</span><br><span class="line">    }</span><br><span class="line">    rcd[low] = rcd[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">return</span> low;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QSort</span><span class="params">(RcdType rcd[], <span class="keyword">int</span> s, <span class="keyword">int</span> t)</span> </span>{</span><br><span class="line">    <span class="comment">// 对记录序列 rcd[s..t] 进行快速排序</span></span><br><span class="line">    <span class="keyword">if</span>(s &lt; t) {</span><br><span class="line">        <span class="comment">// 长度大于1</span></span><br><span class="line">        <span class="comment">// 对rcd[s..t]一趟划分，并返回枢轴位置</span></span><br><span class="line">        <span class="keyword">int</span> pivotloc = Partition(rcd, s, t);</span><br><span class="line">        <span class="comment">// 对前子序列递归进行排序</span></span><br><span class="line">        QSort(rcd, s, pivotloc<span class="number">-1</span>);</span><br><span class="line">        <span class="comment">// 对后子序列递归进行排序</span></span><br><span class="line">        QSort(rcd, pivotloc+<span class="number">1</span>, t);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QuickSort</span><span class="params">(RcdType l[])</span> </span>{</span><br><span class="line">    <span class="comment">// 对记录的顺序表 L 进行快速排序</span></span><br><span class="line">    QSort(l, <span class="number">1</span>, <span class="number">8</span>);</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li></ul><h3 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h3><ul><li><p>对rcd[low..high] 进行一次划分，并返回枢轴记录应该所处的位置，将位标low指向待排序列的第一个记录，位标high指向最后一个记录，指定low所指的记录为枢轴，将枢轴记录复制至数组的闲置分量，即rcd序列的0号单元rcd[0]</p></li><li><p>在low &lt; high的前提下，位标low和high从两端交替地向中间移动，并适时将小于枢轴的记录向前移动，将大于枢轴的记录向后移动。由于实际上low所指的单元已经闲置，所以应当从high开始向前搜索比枢轴小的记录，找到后就将其移动至low所指的闲置单元</p></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;基本思想&quot;&gt;&lt;a href=&quot;#基本思想&quot; class=&quot;headerlink&quot; title=&quot;基本思想&quot;&gt;&lt;/a&gt;基本思想&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;首先从待排序列中选定一个关键字，称之为枢轴&lt;/li&gt;
&lt;li&gt;&lt;p&gt;将待排序序列划分成位于枢轴前后的两个子序列&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;枢轴之前的子序列的所有关键字都不大于枢轴&lt;/li&gt;
&lt;li&gt;枢轴之后的子序列的所有关键字都不小于枢轴&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;此时枢轴已到位，再按同样方法对这两个子序列分别递归进行快速排序，最终使得整个序列有序&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
      <category term="算法" scheme="https://niithub.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://niithub.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="排序" scheme="https://niithub.cn/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>算法训练-按位打印数据</title>
    <link href="https://niithub.cn//posts/cd24fead/"/>
    <id>https://niithub.cn//posts/cd24fead/</id>
    <published>2019-05-30T13:47:00.000Z</published>
    <updated>2021-10-13T16:21:04.011Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>编写程序，实现从键盘输入一个正整数，输出该正整数的位数及每位数</p><h2 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h2><p>1234</p><h2 id="输出样例-1"><a href="#输出样例-1" class="headerlink" title="输出样例"></a>输出样例</h2><pre><code>第1位是1第2位是2第3位是3第4位是4共有4位</code></pre><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>使用队列接收所有的字符，并记录队列的入队数，而后字符出队，打印字符<a id="more"></a></p><h2 id="程序实现"><a href="#程序实现" class="headerlink" title="程序实现"></a>程序实现</h2><ul><li>C<figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Queue</span> {</span></span><br><span class="line"><span class="keyword">int</span> data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Queue</span> *<span class="title">next</span>;</span></span><br><span class="line">} Queue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LinkQueue</span> {</span></span><br><span class="line">Queue *front;</span><br><span class="line">Queue *rear;</span><br><span class="line">} LinkQueue;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">initQueue</span><span class="params">(LinkQueue *linkQueue)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">enterQueue</span><span class="params">(LinkQueue *linkQueue, <span class="keyword">char</span> number)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">outQueue</span><span class="params">(LinkQueue *linkQueue)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用队列存储得到的每一位字符</span></span><br><span class="line"><span class="comment"> * 记录输入的字符数 </span></span><br><span class="line"><span class="comment"> * 出队打印队列中的数据 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>{</span><br><span class="line">LinkQueue link;</span><br><span class="line">initQueue(&amp;link);</span><br><span class="line"><span class="keyword">char</span> number;</span><br><span class="line">number = getchar();</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (number != <span class="string">'\n'</span>) {</span><br><span class="line">enterQueue(&amp;link, number);</span><br><span class="line">i++;</span><br><span class="line">number = getchar();</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; j++) {</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"第%d位是:%c\n"</span>, j, outQueue(&amp;link));</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"共有%d位"</span>, i); </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 初始化队列 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">initQueue</span><span class="params">(LinkQueue *linkQueue)</span> </span>{</span><br><span class="line">linkQueue-&gt;front = (Queue*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Queue));</span><br><span class="line"><span class="keyword">if</span> (linkQueue-&gt;front != <span class="literal">NULL</span>) {</span><br><span class="line">linkQueue-&gt;rear = linkQueue-&gt;front;</span><br><span class="line">linkQueue-&gt;front-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 入队操作</span></span><br><span class="line"><span class="comment"> * linkQueue：队列</span></span><br><span class="line"><span class="comment"> * number：输入的字符 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">enterQueue</span><span class="params">(LinkQueue *linkQueue, <span class="keyword">char</span> number)</span> </span>{</span><br><span class="line">Queue *q = (Queue *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Queue));</span><br><span class="line"><span class="keyword">if</span> (q != <span class="literal">NULL</span>) {</span><br><span class="line">q-&gt;data = number;</span><br><span class="line">q-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">linkQueue-&gt;rear-&gt;next = q;</span><br><span class="line">linkQueue-&gt;rear = q;</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 出队操作 </span></span><br><span class="line"><span class="comment"> * linkQueue：队列</span></span><br><span class="line"><span class="comment"> * return：出队的字符 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">outQueue</span><span class="params">(LinkQueue *linkQueue)</span> </span>{</span><br><span class="line"><span class="keyword">char</span> number;</span><br><span class="line">Queue *q;</span><br><span class="line"><span class="keyword">if</span> (linkQueue-&gt;front == linkQueue-&gt;rear) {</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line">q = linkQueue-&gt;front-&gt;next;</span><br><span class="line">linkQueue-&gt;front-&gt;next = q-&gt;next;</span><br><span class="line"><span class="keyword">if</span> (linkQueue-&gt;rear == q) {</span><br><span class="line">linkQueue-&gt;rear = linkQueue-&gt;front;</span><br><span class="line">}</span><br><span class="line">number = q-&gt;data;</span><br><span class="line"><span class="built_in">free</span>(q);</span><br><span class="line"><span class="keyword">return</span> number; </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p><img src="https://oscimg.oschina.net/oscnet/3b10dd8176e754a07d22f9e9d9f6660c0e5.jpg" alt=""><br><img src="https://oscimg.oschina.net/oscnet/519358aacc0ffddd382cca1c876222126ac.jpg" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;p&gt;编写程序，实现从键盘输入一个正整数，输出该正整数的位数及每位数&lt;/p&gt;
&lt;h2 id=&quot;输出样例&quot;&gt;&lt;a href=&quot;#输出样例&quot; class=&quot;headerlink&quot; title=&quot;输出样例&quot;&gt;&lt;/a&gt;输出样例&lt;/h2&gt;&lt;p&gt;1234&lt;/p&gt;
&lt;h2 id=&quot;输出样例-1&quot;&gt;&lt;a href=&quot;#输出样例-1&quot; class=&quot;headerlink&quot; title=&quot;输出样例&quot;&gt;&lt;/a&gt;输出样例&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;第1位是1
第2位是2
第3位是3
第4位是4
共有4位
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;解题思路&quot;&gt;&lt;a href=&quot;#解题思路&quot; class=&quot;headerlink&quot; title=&quot;解题思路&quot;&gt;&lt;/a&gt;解题思路&lt;/h2&gt;&lt;p&gt;使用队列接收所有的字符，并记录队列的入队数，而后字符出队，打印字符&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="https://niithub.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://niithub.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="队列" scheme="https://niithub.cn/tags/%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>CentOS自建Anki服务器</title>
    <link href="https://niithub.cn//posts/d855f5cd/"/>
    <id>https://niithub.cn//posts/d855f5cd/</id>
    <published>2019-05-27T00:42:00.000Z</published>
    <updated>2021-10-13T16:21:04.011Z</updated>
    
    <content type="html"><![CDATA[<h1 id="服务器配置"><a href="#服务器配置" class="headerlink" title="服务器配置"></a>服务器配置</h1><p>CentOS 7.4 x64系统</p><h1 id="安装AnkiServer包"><a href="#安装AnkiServer包" class="headerlink" title="安装AnkiServer包"></a>安装AnkiServer包</h1><ul><li>安装pip<figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py</span><br><span class="line">python get-pip.py</span><br></pre></td></tr></tbody></table></figure></li><li>pip安装AnkiServer<figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install AnkiServer</span><br></pre></td></tr></tbody></table></figure><a id="more"></a><h1 id="设置AnkiServer"><a href="#设置AnkiServer" class="headerlink" title="设置AnkiServer"></a>设置AnkiServer</h1></li><li><p>创建anki文件夹</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir anki</span><br></pre></td></tr></tbody></table></figure></li><li><p>复制<code>example.ini</code>文件</p><p>  找到AnkiServer中示例配置的目录，我的在<code>/usr/lib/python2.7/site-packages/AnkiServer-2.0.6-py2.7.egg/examples</code></p>  <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /usr/lib/python2.7/site-packages/AnkiServer-2.0.6-py2.7.egg/examples/example.ini  ~/Anki/production.ini</span><br></pre></td></tr></tbody></table></figure></li><li>修改<code>production.ini</code>文件  <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi production.ini</span><br></pre></td></tr></tbody></table></figure><img src="https://oscimg.oschina.net/oscnet/8f4d7f877064b02969c4fbd1f3c4cf10875.jpg" alt="">  <blockquote><p>host位置填写服务器内网地址，port位置填写你要开放的端口号</p></blockquote></li></ul><h1 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h1><ul><li><p>新增用户</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ankiserverctl.py adduser &lt;username&gt;</span><br></pre></td></tr></tbody></table></figure><p>  之后会要求你输入新增用户的密码<br>  <img src="https://oscimg.oschina.net/oscnet/3ef495ad93cad7d14fffa325d5552e9f2c7.jpg" alt=""></p></li><li><p>查看新增用户</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ankiserverctl.py lsuser</span><br></pre></td></tr></tbody></table></figure></li><li><p>调试模式运行</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ankiserverctl.py debug</span><br></pre></td></tr></tbody></table></figure><p><img src="https://oscimg.oschina.net/oscnet/db57f80a8f7e4e0572f147873dc1821a083.jpg" alt=""><br>调试成功，关闭调试模式，后台运行ankiServer</p></li><li><p>后台运行ankiServer</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ankiserverctl.py start &amp;</span><br></pre></td></tr></tbody></table></figure></li></ul><h1 id="Windows客户端版Anki的设置"><a href="#Windows客户端版Anki的设置" class="headerlink" title="Windows客户端版Anki的设置"></a>Windows客户端版Anki的设置</h1><ul><li>打开插件文件夹<br><img src="https://oscimg.oschina.net/oscnet/ea9c8b39ed08aa95f09157ab292fd33b806.jpg" alt=""></li><li><p>新建配置文件</p><p>  新建<code>mysyncserver.py</code></p></li><li>配置服务器信息  <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">  import anki.sync</span><br><span class="line">anki.sync.SYNC_BASE = <span class="string">'http://ip:27701/'</span></span><br><span class="line">anki.sync.SYNC_MEDIA_BASE = <span class="string">'http://ip:27701/msync/'</span></span><br></pre></td></tr></tbody></table></figure></li><li>重启anki</li><li>点击同步按钮，输入自己在服务器里设置的用户名和密码，体验自有服务器上的anki同步服务</li></ul><h1 id="安卓端Anki设置"><a href="#安卓端Anki设置" class="headerlink" title="安卓端Anki设置"></a>安卓端Anki设置</h1><ul><li>打开设置</li><li><p>配置高级设置<br><img src="https://oscimg.oschina.net/oscnet/ee7b7c84f0b735f43ac676c57fae52ab4e7.jpg" alt=""></p></li><li><p>配置自有服务器地址<br><img src="https://oscimg.oschina.net/oscnet/f8b48a9dbc24a431aee28ed639e7d75bca0.jpg" alt=""><br><img src="https://oscimg.oschina.net/oscnet/b69706ae36f3cdc02c67fa3520a23860d60.jpg" alt=""></p></li></ul><blockquote><p>同步地址及媒体文件同步地址请参考上文windows客户端下的配置文件</p></blockquote><h1 id="完结撒花"><a href="#完结撒花" class="headerlink" title="完结撒花"></a>完结撒花</h1><p>成功搭建了自己的Anki同步服务器</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;服务器配置&quot;&gt;&lt;a href=&quot;#服务器配置&quot; class=&quot;headerlink&quot; title=&quot;服务器配置&quot;&gt;&lt;/a&gt;服务器配置&lt;/h1&gt;&lt;p&gt;CentOS 7.4 x64系统&lt;/p&gt;
&lt;h1 id=&quot;安装AnkiServer包&quot;&gt;&lt;a href=&quot;#安装AnkiServer包&quot; class=&quot;headerlink&quot; title=&quot;安装AnkiServer包&quot;&gt;&lt;/a&gt;安装AnkiServer包&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;安装pip&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;python get-pip.py&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;pip安装AnkiServer&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pip install AnkiServer&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>线性表顺序存储-练习题1</title>
    <link href="https://niithub.cn//posts/794029a6/"/>
    <id>https://niithub.cn//posts/794029a6/</id>
    <published>2019-05-20T05:53:00.000Z</published>
    <updated>2021-10-13T16:21:04.013Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h1><p>已知顺序表L递增有序，试写一算法，将X插入到线性表的适当位置，以保持线性表的有序性。</p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h1><p>从右往左遍历顺序表，如果i不大于X，则右移一位，直到结束。<br><a id="more"></a></p><h1 id="程序实现"><a href="#程序实现" class="headerlink" title="程序实现"></a><strong>程序实现</strong></h1><ul><li>C<figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 101</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> {</span></span><br><span class="line">    <span class="keyword">int</span> r[MAXSIZE];</span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line">} SqList;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>{</span><br><span class="line">    SqList <span class="built_in">list</span>;</span><br><span class="line">    <span class="keyword">int</span> i, x = <span class="number">1</span>;;</span><br><span class="line">    <span class="built_in">list</span>.length = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="built_in">list</span>.length; i++) {</span><br><span class="line">        <span class="built_in">list</span>.r[i] = i * <span class="number">3</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"初始顺序表：\n"</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="built_in">list</span>.length; i++) {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\t"</span>, <span class="built_in">list</span>.r[i]);</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">list</span>.length + <span class="number">1</span> &gt; MAXSIZE) {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"数组溢出!"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="built_in">list</span>.length; <span class="built_in">list</span>.r[i] &gt; x &amp;&amp; i &gt; <span class="number">-1</span>; i--) {</span><br><span class="line">        <span class="built_in">list</span>.r[i + <span class="number">1</span>] = <span class="built_in">list</span>.r[i];</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">list</span>.r[++i] = x;</span><br><span class="line">    <span class="built_in">list</span>.length++;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"插入X后的顺序表：\n"</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="built_in">list</span>.length; i++) {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\t"</span>, <span class="built_in">list</span>.r[i]);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;&lt;strong&gt;问题描述&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;已知顺序表L递增有序，试写一算法，将X插入到线性表的适当位置，以保持线性表的有序性。&lt;/p&gt;
&lt;h1 id=&quot;解题思路&quot;&gt;&lt;a href=&quot;#解题思路&quot; class=&quot;headerlink&quot; title=&quot;解题思路&quot;&gt;&lt;/a&gt;&lt;strong&gt;解题思路&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;从右往左遍历顺序表，如果i不大于X，则右移一位，直到结束。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构" scheme="https://niithub.cn/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="算法" scheme="https://niithub.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="线性表" scheme="https://niithub.cn/tags/%E7%BA%BF%E6%80%A7%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>线性表顺序存储-练习题2</title>
    <link href="https://niithub.cn//posts/e049781c/"/>
    <id>https://niithub.cn//posts/e049781c/</id>
    <published>2019-05-20T05:51:00.000Z</published>
    <updated>2021-10-13T16:21:04.013Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h1><p>写一算法，从顺序表中删除自第i个元素开始的K个元素。</p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h1><p>需要注意起始位置i与K的关系，如果之和大于等于顺序表的长度，则直接修改顺序表的长度即可，否则需以K为步伐间距移动顺序表中元素的位置。<br><a id="more"></a></p><h1 id="程序实现"><a href="#程序实现" class="headerlink" title="程序实现"></a><strong>程序实现</strong></h1><ul><li>C<figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 101</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TRUE 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FALSE 0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> {</span></span><br><span class="line">    <span class="keyword">int</span> r[MAXSIZE];</span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line">} SqList;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">deleteElement</span><span class="params">(SqList *L, <span class="keyword">int</span> start, <span class="keyword">int</span> number)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(SqList L)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>{</span><br><span class="line">    SqList <span class="built_in">list</span>;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="built_in">list</span>.length = <span class="number">9</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="built_in">list</span>.length; i++) {</span><br><span class="line">        <span class="built_in">list</span>.r[i] = i * <span class="number">3</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"初始顺序表：\n"</span>);</span><br><span class="line">    print(<span class="built_in">list</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">if</span> (!deleteElement(&amp;<span class="built_in">list</span>, <span class="number">3</span>, <span class="number">6</span>)) {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"删除失败"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"删除成功"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n删除后的顺序表：\n"</span>);</span><br><span class="line">    print(<span class="built_in">list</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除自第i个元素开始的k个元素</span></span><br><span class="line"><span class="comment"> * start: 开始的第i个元素位置</span></span><br><span class="line"><span class="comment"> * number: 要删除的元素个数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">deleteElement</span><span class="params">(SqList *L, <span class="keyword">int</span> start, <span class="keyword">int</span> number)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">if</span> (start &lt; <span class="number">1</span> || number &lt; <span class="number">0</span>) {</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (start + number &gt; L-&gt;length) {</span><br><span class="line">        L-&gt;length = start;</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="keyword">for</span> (i = start; i &lt; L-&gt;length; i++) {</span><br><span class="line">            L-&gt;r[i] = L-&gt;r[i + number];</span><br><span class="line">        }</span><br><span class="line">        L-&gt;length -= number;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(SqList L)</span> </span>{</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= L.length; i++) {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\t"</span>, L.r[i]);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;&lt;strong&gt;问题描述&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;写一算法，从顺序表中删除自第i个元素开始的K个元素。&lt;/p&gt;
&lt;h1 id=&quot;解题思路&quot;&gt;&lt;a href=&quot;#解题思路&quot; class=&quot;headerlink&quot; title=&quot;解题思路&quot;&gt;&lt;/a&gt;&lt;strong&gt;解题思路&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;需要注意起始位置i与K的关系，如果之和大于等于顺序表的长度，则直接修改顺序表的长度即可，否则需以K为步伐间距移动顺序表中元素的位置。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构" scheme="https://niithub.cn/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="算法" scheme="https://niithub.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="线性表" scheme="https://niithub.cn/tags/%E7%BA%BF%E6%80%A7%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>线性表的顺序存储实现</title>
    <link href="https://niithub.cn//posts/55ddc25b/"/>
    <id>https://niithub.cn//posts/55ddc25b/</id>
    <published>2019-05-20T05:49:00.000Z</published>
    <updated>2021-10-13T16:21:04.013Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a><strong>基础操作</strong></h1><ul><li>C<a id="more"></a><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 初始化顺序表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initList</span><span class="params">(SqList *L)</span> </span>{</span><br><span class="line">    L-&gt;length=<span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 销毁顺序表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">destroyList</span><span class="params">(SqList *L)</span> </span>{</span><br><span class="line">    L-&gt;length = <span class="number">-1</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 置空顺序表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clearList</span><span class="params">(SqList *L)</span> </span>{</span><br><span class="line">    L-&gt;length = <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 如果顺序表为空表，则返回真，否则返回假</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">emptyList</span><span class="params">(SqList *L)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span> == L-&gt;length) {</span><br><span class="line">        <span class="keyword">return</span> OK;</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * L存在，且i值合法，即1 &lt;= i &lt;= length, 则返回第i个元素的值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getList</span><span class="params">(SqList *L, <span class="keyword">int</span> i)</span>  </span>{</span><br><span class="line">    <span class="keyword">if</span> (L-&gt;length &lt;= <span class="number">0</span> || i &gt; L-&gt;length) {</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> L-&gt;r[i];</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><!--more--><h1 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作"></a><strong>插入操作</strong></h1></li></ul><p>线性表的插入运算是指在表的第i个位置，插入一个新元素e，使长度为n的线性表变成长度为n + 1的线性表。</p><ul><li>C<figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 表L存在，e为合法元素值，且1 &lt;= i &lt;= length + 1</span></span><br><span class="line"><span class="comment"> * 在表L中第i个位置插入新的元素e，L的长度加1</span></span><br><span class="line"><span class="comment"> * 注意：本例子中，默认从下标1开始，如顺序表[0,1]的长度为1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insList</span><span class="params">(SqList *L, <span class="keyword">int</span> i, <span class="keyword">int</span> e)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> j;</span><br><span class="line">    <span class="keyword">if</span> (L-&gt;length == MAXSIZE) {</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (i &lt;= <span class="number">0</span> || i &gt; L-&gt;length + <span class="number">1</span>) {</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (i &lt;= L-&gt;length) {</span><br><span class="line">        <span class="keyword">for</span> (j = L-&gt;length + <span class="number">1</span>; j &gt;= i ; j--) {</span><br><span class="line">            L-&gt;r[j + <span class="number">1</span>] = L-&gt;r[j];</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    L-&gt;r[i] = e;</span><br><span class="line">    L-&gt;length++;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><h1 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a><strong>删除操作</strong></h1><p>线性表的删除操作时指将表的第i个元素删去，使长度为n的线性表变成长度为n-1的线性表。</p><ul><li>C<figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 表L存在且非空，1 &lt;= i &lt;= length</span></span><br><span class="line"><span class="comment"> * 删除L的第i个数据元素，并用e返回其值，L的长度减1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delList</span><span class="params">(SqList *L, <span class="keyword">int</span> i, <span class="keyword">int</span> *e)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> j;</span><br><span class="line">    *e = L-&gt;r[i];</span><br><span class="line">    <span class="keyword">if</span> (i &lt; L-&gt;length) {</span><br><span class="line">        <span class="keyword">for</span> (j = i; j &lt;= L-&gt;length; j++) {</span><br><span class="line">            L-&gt;r[j] = L-&gt;r[j + <span class="number">1</span>];</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    L-&gt;length--;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li></ul><h1 id="合并操作"><a href="#合并操作" class="headerlink" title="合并操作"></a><strong>合并操作</strong></h1><p>  两个有序线性表，使新线性表也有序</p><pre><code>方法一：从线性表尾开始比较，指到其中一个线性表的表长为0，然后将另一线性表的剩余元素移动到新线性表上</code></pre><ul><li>C<figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 合并LA、LB两个顺序表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">unionList</span><span class="params">(SqList *L, SqList *LA, SqList *LB)</span> </span>{</span><br><span class="line"><span class="keyword">if</span> (LA-&gt;length + LB-&gt;length &gt; MAXSIZE) {</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">}</span><br><span class="line">L-&gt;length =  LA-&gt;length + LB-&gt;length;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = LA-&gt;length + LB-&gt;length; LA-&gt;length &gt; <span class="number">0</span> &amp;&amp; LB-&gt;length &gt; <span class="number">0</span>; i--) {</span><br><span class="line"><span class="keyword">if</span> (LA-&gt;r[LA-&gt;length] &gt;= LB-&gt;r[LB-&gt;length]) {</span><br><span class="line">L-&gt;r[i] = LA-&gt;r[LA-&gt;length];</span><br><span class="line">LA-&gt;length--;</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">L-&gt;r[i] = LB-&gt;r[LB-&gt;length];</span><br><span class="line">LB-&gt;length--;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (LA-&gt;length &gt; <span class="number">0</span>) {</span><br><span class="line"><span class="keyword">for</span> (i; i &gt; <span class="number">0</span>; i--) {</span><br><span class="line">L-&gt;r[i] = LA-&gt;r[LA-&gt;length];</span><br><span class="line">LA-&gt;length--;</span><br><span class="line">}</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line"><span class="keyword">for</span> (i; i &gt; <span class="number">0</span>; i--) {</span><br><span class="line">L-&gt;r[i] = LB-&gt;r[LB-&gt;length];</span><br><span class="line">LB-&gt;length--;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><p>方法二：设两个指针i,j,k分别指向待合并的线性表LA、LB、新线性表，如果LA-&gt;r[i] &gt;= LB-&gt;r[j]，则将LA-&gt;r[i]插入到新线性表中，i++,k++；否则反之,j++,k++。</p><ul><li>C<figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 合并LA、LB两个顺序表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">unionList2</span><span class="params">(SqList *L, SqList *LA, SqList *LB)</span> </span>{</span><br><span class="line"><span class="keyword">if</span> (LA-&gt;length + LB-&gt;length &gt; MAXSIZE) {</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>, j = <span class="number">1</span>, k = <span class="number">1</span>, n;</span><br><span class="line">L-&gt;length =  LA-&gt;length + LB-&gt;length;</span><br><span class="line"><span class="keyword">while</span> (i &lt;= LA-&gt;length &amp;&amp; j &lt;= LB-&gt;length) {</span><br><span class="line"><span class="keyword">if</span> (LA-&gt;r[i] &gt;= LB-&gt;r[j]) {</span><br><span class="line">L-&gt;r[k] = LA-&gt;r[i];</span><br><span class="line">i++;</span><br><span class="line">k++;</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">L-&gt;r[k] = LB-&gt;r[j];</span><br><span class="line">j++;</span><br><span class="line">k++;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">while</span> (i &lt;= LA-&gt;length) {</span><br><span class="line">L-&gt;r[k] = LA-&gt;r[i];</span><br><span class="line">i++;</span><br><span class="line">k++;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">while</span> (i &lt;= LB-&gt;length) {</span><br><span class="line">L-&gt;r[k] = LB-&gt;r[j];</span><br><span class="line">j++;</span><br><span class="line">k++;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><h1 id="完整实例："><a href="#完整实例：" class="headerlink" title="完整实例："></a><strong>完整实例：</strong></h1><ul><li><p>C</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 101</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FALSE 0</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> {</span></span><br><span class="line">    <span class="keyword">int</span> r[MAXSIZE];</span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line">} SqList;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(SqList L)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initList</span><span class="params">(SqList *L)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">destroyList</span><span class="params">(SqList *L)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clearList</span><span class="params">(SqList *L)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">emptyList</span><span class="params">(SqList *L)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">locateList</span><span class="params">(SqList *L, <span class="keyword">int</span> e)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getList</span><span class="params">(SqList *L, <span class="keyword">int</span> e)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insList</span><span class="params">(SqList *L, <span class="keyword">int</span> i, <span class="keyword">int</span> e)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delList</span><span class="params">(SqList *L, <span class="keyword">int</span> i, <span class="keyword">int</span> *e)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">unionList</span><span class="params">(SqList *L, SqList *LA, SqList *LB)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">unionList2</span><span class="params">(SqList *L, SqList *LA, SqList *LB)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>{</span><br><span class="line">    SqList <span class="built_in">list</span>, list1, list2;</span><br><span class="line">    <span class="keyword">int</span> result, deleteNum;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"初始化顺序表:\n"</span>);</span><br><span class="line">    initList(&amp;<span class="built_in">list</span>);</span><br><span class="line">    initList(&amp;list1);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"长度为：%d\n"</span>, <span class="built_in">list</span>.length);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">6</span>; i++) {</span><br><span class="line">        <span class="built_in">list</span>.r[i] = i * <span class="number">3</span>;</span><br><span class="line">        <span class="built_in">list</span>.length++;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">4</span>; i++) {</span><br><span class="line">        list1.r[i] = i * <span class="number">2</span>;</span><br><span class="line">        list1.length++;</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"顺序表的内容:\n"</span>);</span><br><span class="line">    print(<span class="built_in">list</span>);</span><br><span class="line">    <span class="keyword">if</span> (insList(&amp;<span class="built_in">list</span>, <span class="number">6</span>, <span class="number">2</span>)) {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"插入成功\n"</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"插入元素后的顺序表的内容:\n"</span>);</span><br><span class="line">        print(<span class="built_in">list</span>);</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"插入失败\n"</span>);</span><br><span class="line">    }</span><br><span class="line">    delList(&amp;<span class="built_in">list</span>, <span class="number">6</span>, &amp;deleteNum);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"删除的数字是:%d\n"</span>, deleteNum);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"删除后的顺序表的内容:\n"</span>);</span><br><span class="line">    print(<span class="built_in">list</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"顺序表LB的内容:\n"</span>);</span><br><span class="line">    print(list1);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"顺序表合并后的内容:\n"</span>);</span><br><span class="line">    unionList(&amp;list2, &amp;<span class="built_in">list</span>, &amp;list1);</span><br><span class="line">    print(list2);</span><br><span class="line">    destroyList(&amp;<span class="built_in">list</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 打印函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(SqList L)</span> </span>{</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= L.length; i++) {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\t"</span>, L.r[i]);</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 初始化顺序表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initList</span><span class="params">(SqList *L)</span> </span>{</span><br><span class="line">    L-&gt;length=<span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 销毁顺序表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">destroyList</span><span class="params">(SqList *L)</span> </span>{</span><br><span class="line">    L-&gt;length = <span class="number">-1</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 置空顺序表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clearList</span><span class="params">(SqList *L)</span> </span>{</span><br><span class="line">    L-&gt;length = <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 如果顺序表为空表，则返回真，否则返回假</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">emptyList</span><span class="params">(SqList *L)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span> == L-&gt;length) {</span><br><span class="line">        <span class="keyword">return</span> OK;</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * L存在，且i值合法，即1 &lt;= i &lt;= length, 则返回第i个元素的值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getList</span><span class="params">(SqList *L, <span class="keyword">int</span> i)</span>  </span>{</span><br><span class="line">    <span class="keyword">if</span> (L-&gt;length &lt;= <span class="number">0</span> || i &gt; L-&gt;length) {</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> L-&gt;r[i];</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 表L存在，e为合法元素值，且1 &lt;= i &lt;= length + 1</span></span><br><span class="line"><span class="comment"> * 在表L中第i个位置插入新的元素e，L的长度加1</span></span><br><span class="line"><span class="comment"> * 注意：本例子中，默认从下标1开始，如顺序表[0,1]的长度为1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insList</span><span class="params">(SqList *L, <span class="keyword">int</span> i, <span class="keyword">int</span> e)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> j;</span><br><span class="line">    <span class="keyword">if</span> (L-&gt;length == MAXSIZE) {</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (i &lt;= <span class="number">0</span> || i &gt; L-&gt;length + <span class="number">1</span>) {</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (i &lt;= L-&gt;length) {</span><br><span class="line">        <span class="keyword">for</span> (j = L-&gt;length + <span class="number">1</span>; j &gt;= i ; j--) {</span><br><span class="line">            L-&gt;r[j + <span class="number">1</span>] = L-&gt;r[j];</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    L-&gt;r[i] = e;</span><br><span class="line">    L-&gt;length++;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 表L存在且非空，1 &lt;= i &lt;= length</span></span><br><span class="line"><span class="comment"> * 删除L的第i个数据元素，并用e返回其值，L的长度减1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delList</span><span class="params">(SqList *L, <span class="keyword">int</span> i, <span class="keyword">int</span> *e)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> j;</span><br><span class="line">    *e = L-&gt;r[i];</span><br><span class="line">    <span class="keyword">if</span> (i &lt; L-&gt;length) {</span><br><span class="line">        <span class="keyword">for</span> (j = i; j &lt;= L-&gt;length; j++) {</span><br><span class="line">            L-&gt;r[j] = L-&gt;r[j + <span class="number">1</span>];</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    L-&gt;length--;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 合并LA、LB两个顺序表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">unionList</span><span class="params">(SqList *L, SqList *LA, SqList *LB)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (LA-&gt;length + LB-&gt;length &gt; MAXSIZE) {</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    }</span><br><span class="line">    L-&gt;length =  LA-&gt;length + LB-&gt;length;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = LA-&gt;length + LB-&gt;length; LA-&gt;length &gt; <span class="number">0</span> &amp;&amp; LB-&gt;length &gt; <span class="number">0</span>; i--) {</span><br><span class="line">        <span class="keyword">if</span> (LA-&gt;r[LA-&gt;length] &gt;= LB-&gt;r[LB-&gt;length]) {</span><br><span class="line">            L-&gt;r[i] = LA-&gt;r[LA-&gt;length];</span><br><span class="line">            LA-&gt;length--;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            L-&gt;r[i] = LB-&gt;r[LB-&gt;length];</span><br><span class="line">            LB-&gt;length--;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (LA-&gt;length &gt; <span class="number">0</span>) {</span><br><span class="line">        <span class="keyword">for</span> (i; i &gt; <span class="number">0</span>; i--) {</span><br><span class="line">            L-&gt;r[i] = LA-&gt;r[LA-&gt;length];</span><br><span class="line">            LA-&gt;length--;</span><br><span class="line">        }</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="keyword">for</span> (i; i &gt; <span class="number">0</span>; i--) {</span><br><span class="line">            L-&gt;r[i] = LB-&gt;r[LB-&gt;length];</span><br><span class="line">            LB-&gt;length--;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 合并LA、LB两个顺序表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">unionList2</span><span class="params">(SqList *L, SqList *LA, SqList *LB)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (LA-&gt;length + LB-&gt;length &gt; MAXSIZE) {</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>, j = <span class="number">1</span>, k = <span class="number">1</span>, n;</span><br><span class="line">    L-&gt;length =  LA-&gt;length + LB-&gt;length;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= LA-&gt;length &amp;&amp; j &lt;= LB-&gt;length) {</span><br><span class="line">        <span class="keyword">if</span> (LA-&gt;r[i] &gt;= LB-&gt;r[j]) {</span><br><span class="line">            L-&gt;r[k] = LA-&gt;r[i];</span><br><span class="line">            i++;</span><br><span class="line">            k++;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            L-&gt;r[k] = LB-&gt;r[j];</span><br><span class="line">            j++;</span><br><span class="line">            k++;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= LA-&gt;length) {</span><br><span class="line">        L-&gt;r[k] = LA-&gt;r[i];</span><br><span class="line">        i++;</span><br><span class="line">        k++;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= LB-&gt;length) {</span><br><span class="line">        L-&gt;r[k] = LB-&gt;r[j];</span><br><span class="line">        j++;</span><br><span class="line">        k++;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;基础操作&quot;&gt;&lt;a href=&quot;#基础操作&quot; class=&quot;headerlink&quot; title=&quot;基础操作&quot;&gt;&lt;/a&gt;&lt;strong&gt;基础操作&lt;/strong&gt;&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;C&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
      <category term="数据结构" scheme="https://niithub.cn/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="线性表" scheme="https://niithub.cn/tags/%E7%BA%BF%E6%80%A7%E8%A1%A8/"/>
    
      <category term="顺序" scheme="https://niithub.cn/tags/%E9%A1%BA%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>线性表的链式存储实现</title>
    <link href="https://niithub.cn//posts/94e0fe2a/"/>
    <id>https://niithub.cn//posts/94e0fe2a/</id>
    <published>2019-05-20T05:46:00.000Z</published>
    <updated>2021-10-13T16:21:04.011Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a><strong>基础操作</strong></h1><ul><li><p>C</p><a id="more"></a><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  遍历输出单链表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(LinkList H)</span> </span>{</span><br><span class="line">    LinkList p = H-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (p) {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%c"</span>, p-&gt;data);</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 初始化链表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initList</span><span class="params">(LinkList *H)</span> </span>{</span><br><span class="line">    <span class="comment">/* 产生头结点,并使L指向此头结点 */</span></span><br><span class="line">    *H = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span> (List));</span><br><span class="line">    (* H)-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 初始条件：顺序线性表L已存在。</span></span><br><span class="line"><span class="comment"> * 操作结果：若L为空表，则返回TRUE，否则返回FALSE</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">listEmpty</span><span class="params">(LinkList L)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(L-&gt;next) {</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="keyword">return</span> OK;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 初始条件：顺序线性表L已存在。</span></span><br><span class="line"><span class="comment"> * 操作结果：将L重置为空表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">clearList</span><span class="params">(LinkList *L)</span> </span>{</span><br><span class="line">    LinkList p,q;</span><br><span class="line">    p = (*L)-&gt;next;           <span class="comment">/*  p指向第一个结点 */</span></span><br><span class="line">    <span class="keyword">while</span>(p) {              <span class="comment">/*  没到表尾 */</span></span><br><span class="line">        q = p-&gt;next;</span><br><span class="line">        <span class="built_in">free</span>(p);</span><br><span class="line">        p = q;</span><br><span class="line">    }</span><br><span class="line">    (*L)-&gt;next = <span class="literal">NULL</span>;        <span class="comment">/* 头结点指针域为空 */</span></span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 初始条件：顺序线性表L已存在。</span></span><br><span class="line"><span class="comment"> * 操作结果：返回L中数据元素个数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">listLength</span><span class="params">(LinkList L)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    LinkList p = L-&gt;next; <span class="comment">/* p指向第一个结点 */</span></span><br><span class="line">    <span class="keyword">while</span>(p) {</span><br><span class="line">        i++;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><!--more--><h1 id="以头插法建立单链表"><a href="#以头插法建立单链表" class="headerlink" title="以头插法建立单链表"></a><strong>以头插法建立单链表</strong></h1></li><li><p>C</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 以头插法建立单链表</span></span><br><span class="line"><span class="comment"> * 以"#"符为结束符</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createFromHead</span><span class="params">(LinkList H)</span> </span>{</span><br><span class="line">    List *node;</span><br><span class="line">    ElementType type;</span><br><span class="line">    <span class="keyword">int</span> flag = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (flag) {</span><br><span class="line">        type = getchar();</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">'#'</span> != type) {</span><br><span class="line">            node = (List *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(List));</span><br><span class="line">            node-&gt;data = type;</span><br><span class="line">            node-&gt;next = H-&gt;next;</span><br><span class="line">            H-&gt;next = node;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            flag = <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><h1 id="以尾插法建立单链表"><a href="#以尾插法建立单链表" class="headerlink" title="以尾插法建立单链表"></a><strong>以尾插法建立单链表</strong></h1><ul><li>C</li></ul>  <figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 以尾插法建立单链表</span></span><br><span class="line"><span class="comment"> * 以"#"符为结束符</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createFromEnd</span><span class="params">(LinkList H)</span> </span>{</span><br><span class="line">    List *node;</span><br><span class="line">    ElementType type;</span><br><span class="line">    <span class="keyword">int</span> flag = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(flag) {</span><br><span class="line">        type = getchar();</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">'#'</span> != type ) {</span><br><span class="line">            node = (List *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(List));</span><br><span class="line">            node-&gt;data = type;</span><br><span class="line">            H-&gt;next = node;</span><br><span class="line">            H = node;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            flag = <span class="number">0</span>;</span><br><span class="line">            H-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="在单链表L中查找第i个结点"><a href="#在单链表L中查找第i个结点" class="headerlink" title="在单链表L中查找第i个结点"></a><strong>在单链表L中查找第i个结点</strong></h1><ul><li>C<figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在单链表L中查找第i个结点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">List *<span class="title">get</span><span class="params">(LinkList L, <span class="keyword">int</span> i)</span> </span>{</span><br><span class="line">    List *<span class="built_in">list</span>  = L-&gt;next;</span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (index != i &amp;&amp; <span class="built_in">list</span>-&gt;next != <span class="literal">NULL</span>) {</span><br><span class="line">        index++;</span><br><span class="line">        <span class="built_in">list</span> = <span class="built_in">list</span>-&gt;next;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><h1 id="在单链表L中查找值等于key的个结点"><a href="#在单链表L中查找值等于key的个结点" class="headerlink" title="在单链表L中查找值等于key的个结点"></a><strong>在单链表L中查找值等于key的个结点</strong></h1><ul><li>C<figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在单链表L中查找值等于key的个结点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">List *<span class="title">locate</span><span class="params">(LinkList L, ElementType key)</span> </span>{</span><br><span class="line">    List *<span class="built_in">list</span>  = L-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">list</span>-&gt;data != key &amp;&amp; <span class="built_in">list</span>-&gt;next != <span class="literal">NULL</span>) {</span><br><span class="line">        <span class="built_in">list</span> = <span class="built_in">list</span>-&gt;next;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><h1 id="在单链表的第i位插入元素e"><a href="#在单链表的第i位插入元素e" class="headerlink" title="在单链表的第i位插入元素e"></a><strong>在单链表的第i位插入元素e</strong></h1><ul><li>C<figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在单链表的第i位插入元素e</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insertList</span><span class="params">(LinkList L, <span class="keyword">int</span> i, ElementType e)</span> </span>{</span><br><span class="line">    List *<span class="built_in">list</span> = L, *p;</span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (index &lt; i - <span class="number">1</span> &amp;&amp; <span class="built_in">list</span>-&gt;next != <span class="literal">NULL</span>)  {</span><br><span class="line">        index++;</span><br><span class="line">        <span class="built_in">list</span> = <span class="built_in">list</span>-&gt;next;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 跳出循环是因为list在链表最后或i&lt;1，所以一定是插入位置不合法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (index != i <span class="number">-1</span>) {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"插入位置不合法！"</span>);</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    }</span><br><span class="line">    p = (List *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(List));</span><br><span class="line">    p-&gt;data = e;</span><br><span class="line">    p-&gt;next = <span class="built_in">list</span>-&gt;next;</span><br><span class="line">    <span class="built_in">list</span>-&gt;next = p;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><h1 id="删除单链表的第i位元素"><a href="#删除单链表的第i位元素" class="headerlink" title="删除单链表的第i位元素"></a><strong>删除单链表的第i位元素</strong></h1><ul><li>C<figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除单链表的第i位元素,并将删除的元素保存至元素e中</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">deleteList</span><span class="params">(LinkList L, <span class="keyword">int</span> i, ElementType *e)</span> </span>{</span><br><span class="line">    List *<span class="built_in">list</span> = L, *p;</span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (index &lt; i - <span class="number">1</span> &amp;&amp; <span class="built_in">list</span>-&gt;next != <span class="literal">NULL</span>)  {</span><br><span class="line">        index++;</span><br><span class="line">        <span class="built_in">list</span> = <span class="built_in">list</span>-&gt;next;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 跳出循环是因为list在链表最后或i&lt;1，所以一定是位置不合法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (index != i <span class="number">-1</span>) {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"位置不合法！"</span>);</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    }</span><br><span class="line">    p = <span class="built_in">list</span>-&gt;next;</span><br><span class="line">    *e = p-&gt;data;</span><br><span class="line">    <span class="built_in">list</span>-&gt;next = p-&gt;next;</span><br><span class="line">    <span class="comment">/*一定要记得释放删除的结点所占内存空间*/</span></span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><h1 id="完整实例"><a href="#完整实例" class="headerlink" title="完整实例"></a><strong>完整实例</strong></h1><ul><li>C<figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> ElementType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> {</span></span><br><span class="line">    ElementType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> * <span class="title">next</span>;</span></span><br><span class="line">} List, *LinkList;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(LinkList H)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initList</span><span class="params">(LinkList *H)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">listEmpty</span><span class="params">(LinkList L)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">clearList</span><span class="params">(LinkList *L)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">listLength</span><span class="params">(LinkList L)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createFromHead</span><span class="params">(LinkList H)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createFromEnd</span><span class="params">(LinkList H)</span></span>;</span><br><span class="line"><span class="function">List *<span class="title">get</span><span class="params">(LinkList L, <span class="keyword">int</span> i)</span></span>;</span><br><span class="line"><span class="function">List *<span class="title">locate</span><span class="params">(LinkList L, ElementType key)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insertList</span><span class="params">(LinkList L, <span class="keyword">int</span> i, ElementType e)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">deleteList</span><span class="params">(LinkList L, <span class="keyword">int</span> i, ElementType *e)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>{</span><br><span class="line">    LinkList H;</span><br><span class="line">    initList(&amp;H);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"头插法实现链表：\n"</span>);</span><br><span class="line">    createFromHead(H);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"头插法结果：\n"</span>);</span><br><span class="line">    print(H);</span><br><span class="line">    List *result = get(H, <span class="number">3</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n查找第3位元素，结果：%c\n"</span>, result-&gt;data);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n尾插法实现链表：\n"</span>);</span><br><span class="line">    createFromEnd(H);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"尾插法结果：\n"</span>);</span><br><span class="line">    print(H);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n往链表的第3位插入元素F：\n"</span>);</span><br><span class="line">    <span class="keyword">char</span> element = <span class="string">'F'</span>;</span><br><span class="line">    insertList(H, <span class="number">3</span>, element);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"插入结果：\n"</span>);</span><br><span class="line">    print(H);</span><br><span class="line">    <span class="keyword">char</span> e;</span><br><span class="line">    deleteList(H, <span class="number">4</span>, &amp;e);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n删除链表的第4位元素：%c\n"</span>, e);</span><br><span class="line">    print(H);</span><br><span class="line">    <span class="keyword">int</span> i = clearList(&amp;H);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n遍历清空后的链表：\n"</span>);</span><br><span class="line">    print(H);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"链表的长度length(H) = %d\n"</span>, listLength(H));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  遍历输出单链表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(LinkList H)</span> </span>{</span><br><span class="line">    LinkList p = H-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (p) {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%c"</span>, p-&gt;data);</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 初始化链表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initList</span><span class="params">(LinkList *H)</span> </span>{</span><br><span class="line">    <span class="comment">/* 产生头结点,并使L指向此头结点 */</span></span><br><span class="line">    *H = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span> (List));</span><br><span class="line">    (* H)-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 初始条件：顺序线性表L已存在。</span></span><br><span class="line"><span class="comment"> * 操作结果：若L为空表，则返回TRUE，否则返回FALSE</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">listEmpty</span><span class="params">(LinkList L)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(L-&gt;next) {</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="keyword">return</span> OK;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 初始条件：顺序线性表L已存在。</span></span><br><span class="line"><span class="comment"> * 操作结果：将L重置为空表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">clearList</span><span class="params">(LinkList *L)</span> </span>{</span><br><span class="line">    LinkList p,q;</span><br><span class="line">    p = (*L)-&gt;next;           <span class="comment">/*  p指向第一个结点 */</span></span><br><span class="line">    <span class="keyword">while</span>(p) {              <span class="comment">/*  没到表尾 */</span></span><br><span class="line">        q = p-&gt;next;</span><br><span class="line">        <span class="built_in">free</span>(p);</span><br><span class="line">        p = q;</span><br><span class="line">    }</span><br><span class="line">    (*L)-&gt;next = <span class="literal">NULL</span>;        <span class="comment">/* 头结点指针域为空 */</span></span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 初始条件：顺序线性表L已存在。</span></span><br><span class="line"><span class="comment"> * 操作结果：返回L中数据元素个数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">listLength</span><span class="params">(LinkList L)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    LinkList p = L-&gt;next; <span class="comment">/* p指向第一个结点 */</span></span><br><span class="line">    <span class="keyword">while</span>(p) {</span><br><span class="line">        i++;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 以头插法建立单链表</span></span><br><span class="line"><span class="comment"> * 以"#"符为结束符</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createFromHead</span><span class="params">(LinkList H)</span> </span>{</span><br><span class="line">    List *node;</span><br><span class="line">    ElementType type;</span><br><span class="line">    <span class="keyword">int</span> flag = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (flag) {</span><br><span class="line">        type = getchar();</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">'#'</span> != type) {</span><br><span class="line">            node = (List *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(List));</span><br><span class="line">            node-&gt;data = type;</span><br><span class="line">            node-&gt;next = H-&gt;next;</span><br><span class="line">            H-&gt;next = node;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            flag = <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 以尾插法建立单链表</span></span><br><span class="line"><span class="comment"> * 以"#"符为结束符</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createFromEnd</span><span class="params">(LinkList H)</span> </span>{</span><br><span class="line">    List *node;</span><br><span class="line">    ElementType type;</span><br><span class="line">    <span class="keyword">int</span> flag = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(flag) {</span><br><span class="line">        type = getchar();</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">'#'</span> != type ) {</span><br><span class="line">            node = (List *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(List));</span><br><span class="line">            node-&gt;data = type;</span><br><span class="line">            H-&gt;next = node;</span><br><span class="line">            H = node;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            flag = <span class="number">0</span>;</span><br><span class="line">            H-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在单链表L中查找第i个结点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">List *<span class="title">get</span><span class="params">(LinkList L, <span class="keyword">int</span> i)</span> </span>{</span><br><span class="line">    List *<span class="built_in">list</span>  = L-&gt;next;</span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (index != i &amp;&amp; <span class="built_in">list</span>-&gt;next != <span class="literal">NULL</span>) {</span><br><span class="line">        index++;</span><br><span class="line">        <span class="built_in">list</span> = <span class="built_in">list</span>-&gt;next;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在单链表L中查找值等于key的个结点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">List *<span class="title">locate</span><span class="params">(LinkList L, ElementType key)</span> </span>{</span><br><span class="line">    List *<span class="built_in">list</span>  = L-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">list</span>-&gt;data != key &amp;&amp; <span class="built_in">list</span>-&gt;next != <span class="literal">NULL</span>) {</span><br><span class="line">        <span class="built_in">list</span> = <span class="built_in">list</span>-&gt;next;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在单链表的第i位插入元素e</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insertList</span><span class="params">(LinkList L, <span class="keyword">int</span> i, ElementType e)</span> </span>{</span><br><span class="line">    List *<span class="built_in">list</span> = L, *p;</span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (index &lt; i - <span class="number">1</span> &amp;&amp; <span class="built_in">list</span>-&gt;next != <span class="literal">NULL</span>)  {</span><br><span class="line">        index++;</span><br><span class="line">        <span class="built_in">list</span> = <span class="built_in">list</span>-&gt;next;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 跳出循环是因为list在链表最后或i&lt;1，所以一定是插入位置不合法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (index != i <span class="number">-1</span>) {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"插入位置不合法！"</span>);</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    }</span><br><span class="line">    p = (List *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(List));</span><br><span class="line">    p-&gt;data = e;</span><br><span class="line">    p-&gt;next = <span class="built_in">list</span>-&gt;next;</span><br><span class="line">    <span class="built_in">list</span>-&gt;next = p;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除单链表的第i位元素,并将删除的元素保存至元素e中</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">deleteList</span><span class="params">(LinkList L, <span class="keyword">int</span> i, ElementType *e)</span> </span>{</span><br><span class="line">    List *<span class="built_in">list</span> = L, *p;</span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (index &lt; i - <span class="number">1</span> &amp;&amp; <span class="built_in">list</span>-&gt;next != <span class="literal">NULL</span>)  {</span><br><span class="line">        index++;</span><br><span class="line">        <span class="built_in">list</span> = <span class="built_in">list</span>-&gt;next;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 跳出循环是因为list在链表最后或i&lt;1，所以一定是位置不合法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (index != i <span class="number">-1</span>) {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"位置不合法！"</span>);</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    }</span><br><span class="line">    p = <span class="built_in">list</span>-&gt;next;</span><br><span class="line">    *e = p-&gt;data;</span><br><span class="line">    <span class="built_in">list</span>-&gt;next = p-&gt;next;</span><br><span class="line">    <span class="comment">/*一定要记得释放删除的结点所占内存空间*/</span></span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h1><ol><li>一定要理清结点之间的关系</li><li>删除结点后要注意释放内存空间</li><li>插入结点或new 结点后，需要申请内存空间</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;基础操作&quot;&gt;&lt;a href=&quot;#基础操作&quot; class=&quot;headerlink&quot; title=&quot;基础操作&quot;&gt;&lt;/a&gt;&lt;strong&gt;基础操作&lt;/strong&gt;&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;C&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
      <category term="数据结构" scheme="https://niithub.cn/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="线性表" scheme="https://niithub.cn/tags/%E7%BA%BF%E6%80%A7%E8%A1%A8/"/>
    
      <category term="链式" scheme="https://niithub.cn/tags/%E9%93%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>线性表链式存储-练习题1</title>
    <link href="https://niithub.cn//posts/f95d370c/"/>
    <id>https://niithub.cn//posts/f95d370c/</id>
    <published>2019-05-20T05:45:00.000Z</published>
    <updated>2021-10-13T16:21:04.013Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h1><p>写一算法，从链式表中删除自第i个元素开始的K个元素。</p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h1><p>需要注意删除结点后，一定要释放内存空间。<br><a id="more"></a></p><h1 id="程序实现"><a href="#程序实现" class="headerlink" title="程序实现"></a><strong>程序实现</strong></h1><ul><li><p>C</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElementType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> {</span></span><br><span class="line">    ElementType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> * <span class="title">next</span>;</span></span><br><span class="line">} List, *LinkList;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(LinkList H)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initList</span><span class="params">(LinkList *H)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createFromEnd</span><span class="params">(LinkList H)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">deleteList</span><span class="params">(LinkList L, <span class="keyword">int</span> i, <span class="keyword">int</span> k)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>{</span><br><span class="line">    LinkList H;</span><br><span class="line">    initList(&amp;H);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"尾插法实现链表：\n"</span>);</span><br><span class="line">    createFromEnd(H);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"尾插法结果：\n"</span>);</span><br><span class="line">    print(H);</span><br><span class="line">    deleteList(H, <span class="number">1</span>, <span class="number">9</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n删除链表部分元素后：\n"</span>);</span><br><span class="line">    print(H);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  遍历输出单链表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(LinkList H)</span> </span>{</span><br><span class="line">    LinkList p = H-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (p) {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\t"</span>, p-&gt;data);</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 初始化链表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initList</span><span class="params">(LinkList *H)</span> </span>{</span><br><span class="line">    <span class="comment">/* 产生头结点,并使L指向此头结点 */</span></span><br><span class="line">    *H = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span> (List));</span><br><span class="line">    (* H)-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 以尾插法建立单链表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createFromEnd</span><span class="params">(LinkList H)</span> </span>{</span><br><span class="line">    List *node;</span><br><span class="line">    ElementType type;</span><br><span class="line">    srand(time(<span class="number">0</span>));</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i; i &lt; <span class="number">10</span>; i++) {</span><br><span class="line">        node = (List *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(List));</span><br><span class="line">        node-&gt;data =  rand() % <span class="number">100</span> + <span class="number">1</span>;</span><br><span class="line">        H-&gt;next = node;</span><br><span class="line">        H = node;</span><br><span class="line">    }</span><br><span class="line">    H-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除单链表中自第i位元素开始的k个元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">deleteList</span><span class="params">(LinkList L, <span class="keyword">int</span> i, <span class="keyword">int</span> k)</span> </span>{</span><br><span class="line">    List *<span class="built_in">list</span> = L, *p;</span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (index &lt; i - <span class="number">1</span> &amp;&amp; <span class="built_in">list</span>-&gt;next != <span class="literal">NULL</span>)  {</span><br><span class="line">        index++;</span><br><span class="line">        <span class="built_in">list</span> = <span class="built_in">list</span>-&gt;next;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (index != i <span class="number">-1</span>) {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n插入位置不合法！\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (index = <span class="number">0</span>; index &lt; k &amp;&amp; <span class="built_in">list</span>-&gt;next != <span class="literal">NULL</span>; index++) {</span><br><span class="line">        p = <span class="built_in">list</span>-&gt;next;</span><br><span class="line">        <span class="built_in">list</span>-&gt;next = p-&gt;next;</span><br><span class="line">        <span class="comment">/*一定要记得释放删除的结点所占内存空间*/</span></span><br><span class="line">        <span class="built_in">free</span>(p);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;&lt;strong&gt;问题描述&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;写一算法，从链式表中删除自第i个元素开始的K个元素。&lt;/p&gt;
&lt;h1 id=&quot;解题思路&quot;&gt;&lt;a href=&quot;#解题思路&quot; class=&quot;headerlink&quot; title=&quot;解题思路&quot;&gt;&lt;/a&gt;&lt;strong&gt;解题思路&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;需要注意删除结点后，一定要释放内存空间。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构" scheme="https://niithub.cn/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="算法" scheme="https://niithub.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="线性表" scheme="https://niithub.cn/tags/%E7%BA%BF%E6%80%A7%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>线性表顺序存储-练习题3-逆置顺序表</title>
    <link href="https://niithub.cn//posts/4f293ae6/"/>
    <id>https://niithub.cn//posts/4f293ae6/</id>
    <published>2019-05-20T05:41:00.000Z</published>
    <updated>2021-10-13T16:21:04.013Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h1><p>以顺序表作存储结构实现线性表，实现就地逆置算法，即在原表的存储空间将线性表(a1, a2, …, an)逆置为(an, … , a2, a1).</p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h1><ol><li>需要考虑的线性表个数的奇/偶数情况，奇/偶数情况不同，置换的步伐长度不同</li><li>设置一个中转数，当做数置换时做中转存储<a id="more"></a></li></ol><h1 id="程序实现"><a href="#程序实现" class="headerlink" title="程序实现"></a><strong>程序实现</strong></h1><ul><li><p>C</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 101</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> {</span></span><br><span class="line">    <span class="keyword">int</span> r[MAXSIZE];</span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line">} SqList;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inverseElement</span><span class="params">(SqList *L)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(SqList L)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>{</span><br><span class="line">    SqList <span class="built_in">list</span>;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="built_in">list</span>.length = <span class="number">9</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="built_in">list</span>.length; i++) {</span><br><span class="line">        <span class="built_in">list</span>.r[i] = i * <span class="number">3</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"初始顺序表：\n"</span>);</span><br><span class="line">    print(<span class="built_in">list</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    inverseElement(&amp;<span class="built_in">list</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"置换后的顺序表：\n"</span>);</span><br><span class="line">    print(<span class="built_in">list</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  逆置顺序表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inverseElement</span><span class="params">(SqList *L)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> middle = <span class="number">0</span>, k = <span class="number">-1</span>, i;</span><br><span class="line">    <span class="keyword">if</span> (L-&gt;length % <span class="number">2</span> == <span class="number">0</span>) {</span><br><span class="line">        <span class="keyword">for</span> (i = L-&gt;length / <span class="number">2</span>; i &gt; <span class="number">0</span>; i--) {</span><br><span class="line">            k += <span class="number">2</span>;</span><br><span class="line">            middle = L-&gt;r[i];</span><br><span class="line">            L-&gt;r[i] = L-&gt;r[i + k];</span><br><span class="line">            L-&gt;r[i + k] = middle;</span><br><span class="line">        }</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        k = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = L-&gt;length / <span class="number">2</span>; i &gt; <span class="number">0</span>; i--) {</span><br><span class="line">            k += <span class="number">2</span>;</span><br><span class="line">            middle = L-&gt;r[i];</span><br><span class="line">            L-&gt;r[i] = L-&gt;r[i + k];</span><br><span class="line">            L-&gt;r[i + k] = middle;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(SqList L)</span> </span>{</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= L.length; i++) {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\t"</span>, L.r[i]);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;&lt;strong&gt;问题描述&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;以顺序表作存储结构实现线性表，实现就地逆置算法，即在原表的存储空间将线性表(a1, a2, …, an)逆置为(an, … , a2, a1).&lt;/p&gt;
&lt;h1 id=&quot;解题思路&quot;&gt;&lt;a href=&quot;#解题思路&quot; class=&quot;headerlink&quot; title=&quot;解题思路&quot;&gt;&lt;/a&gt;&lt;strong&gt;解题思路&lt;/strong&gt;&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;需要考虑的线性表个数的奇/偶数情况，奇/偶数情况不同，置换的步伐长度不同&lt;/li&gt;
&lt;li&gt;设置一个中转数，当做数置换时做中转存储&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
      <category term="数据结构" scheme="https://niithub.cn/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="算法" scheme="https://niithub.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="线性表" scheme="https://niithub.cn/tags/%E7%BA%BF%E6%80%A7%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>队列的简单实现</title>
    <link href="https://niithub.cn//posts/6a4f6c6e/"/>
    <id>https://niithub.cn//posts/6a4f6c6e/</id>
    <published>2019-05-20T05:40:00.000Z</published>
    <updated>2021-10-13T16:21:04.013Z</updated>
    
    <content type="html"><![CDATA[<h1 id="队列特点："><a href="#队列特点：" class="headerlink" title="队列特点："></a><strong>队列特点：</strong></h1><ol><li>先进先出<a id="more"></a></li></ol><h1 id="程序实现："><a href="#程序实现：" class="headerlink" title="程序实现："></a><strong>程序实现：</strong></h1><ul><li><p>C</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 101</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> {</span></span><br><span class="line">    <span class="comment">/*队列的主体内容，用来存储内容*/</span></span><br><span class="line">    <span class="keyword">int</span> data[MAXSIZE];</span><br><span class="line">    <span class="comment">/*队首*/</span></span><br><span class="line">    <span class="keyword">int</span> head;</span><br><span class="line">    <span class="comment">/*队尾*/</span></span><br><span class="line">    <span class="keyword">int</span> tail; </span><br><span class="line">}Queue;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>{</span><br><span class="line">    Queue q;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    q.head = <span class="number">1</span>;</span><br><span class="line">    q.tail = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++) {</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;q.data[q.tail]);</span><br><span class="line">        q.tail++;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">while</span> (q.head &lt; q.tail) {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\t"</span>, q.data[q.head]);</span><br><span class="line">        q.head++;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;队列特点：&quot;&gt;&lt;a href=&quot;#队列特点：&quot; class=&quot;headerlink&quot; title=&quot;队列特点：&quot;&gt;&lt;/a&gt;&lt;strong&gt;队列特点：&lt;/strong&gt;&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;先进先出&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
      <category term="数据结构" scheme="https://niithub.cn/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="队列" scheme="https://niithub.cn/tags/%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>循环单向链表-合并算法</title>
    <link href="https://niithub.cn//posts/9579ad62/"/>
    <id>https://niithub.cn//posts/9579ad62/</id>
    <published>2019-05-20T05:38:00.000Z</published>
    <updated>2021-10-13T16:21:04.011Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a><strong>基础知识</strong></h1><p>循环链表是单链表的另一种形式，它是一个首尾相接的链表，其特点是将单链表最后一个结点的指针域由NULL改为指向头结点或线性表中的第一个结点，就得到了单链形式的循环链表，并称为循环单链表。</p><h1 id="循环链表的图解"><a href="#循环链表的图解" class="headerlink" title="循环链表的图解"></a><strong>循环链表的图解</strong></h1><p><img src="https://oscimg.oschina.net/oscnet/f853bab5c095840f544ad729bd30a79e5c3.jpg" alt=""><br><a id="more"></a></p><h1 id="合并思路"><a href="#合并思路" class="headerlink" title="合并思路"></a><strong>合并思路</strong></h1><p>先找到两个链表的尾，并分别由指针p、q指向他们，然后将第一个链表的尾与第二个链表的第一个结点链接起来，并修改第二个表的尾Q，使它的链域指向第一个表的头结点。</p><p><strong>注意：链表合并后，需记得释放被合并链表的头结点。</strong>      </p><h1 id="程序实现"><a href="#程序实现" class="headerlink" title="程序实现"></a><strong>程序实现</strong></h1><ul><li><p>C</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> {</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> * <span class="title">next</span>;</span></span><br><span class="line">} Node, *LinkList;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initLink</span><span class="params">(LinkList *link)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">create</span><span class="params">(LinkList link, <span class="keyword">int</span> start)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fusion</span><span class="params">(LinkList linkA, LinkList linkB)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>{</span><br><span class="line">    LinkList LinkA, LinkB;</span><br><span class="line">    initLink(&amp;LinkA);</span><br><span class="line">    initLink(&amp;LinkB);</span><br><span class="line">    create(LinkA, <span class="number">1</span>);</span><br><span class="line">    create(LinkB, <span class="number">10</span>);</span><br><span class="line">    fusion(LinkA, LinkB);</span><br><span class="line">    Node *p;</span><br><span class="line">    p = LinkA-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (p != LinkA) {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, p-&gt;data);</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 初始化链表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initLink</span><span class="params">(LinkList *link)</span> </span>{</span><br><span class="line">    *link = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    (*link)-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建循环链表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">create</span><span class="params">(LinkList link, <span class="keyword">int</span> start)</span> </span>{</span><br><span class="line">    Node *node, *q;</span><br><span class="line">    q = link;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = start; i &lt; start + <span class="number">5</span>; i++) {</span><br><span class="line">        node = (Node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">        node-&gt;data = i;</span><br><span class="line">        link-&gt;next = node;</span><br><span class="line">        link = node;</span><br><span class="line">    }</span><br><span class="line">    link-&gt;next = q;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 合并循环链表 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fusion</span><span class="params">(LinkList linkA, LinkList linkB)</span> </span>{</span><br><span class="line">    Node *p, *q;</span><br><span class="line">    p = linkA-&gt;next;</span><br><span class="line">    q = linkB-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (p-&gt;next != linkA) {</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">while</span> (q-&gt;next != linkB) {</span><br><span class="line">        q = q-&gt;next;</span><br><span class="line">    }</span><br><span class="line">    p-&gt;next  = linkB-&gt;next;</span><br><span class="line">    q-&gt;next = linkA;</span><br><span class="line">    <span class="comment">/*释放LinkB的头结点*/</span> </span><br><span class="line">    <span class="built_in">free</span>(linkB);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;基础知识&quot;&gt;&lt;a href=&quot;#基础知识&quot; class=&quot;headerlink&quot; title=&quot;基础知识&quot;&gt;&lt;/a&gt;&lt;strong&gt;基础知识&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;循环链表是单链表的另一种形式，它是一个首尾相接的链表，其特点是将单链表最后一个结点的指针域由NULL改为指向头结点或线性表中的第一个结点，就得到了单链形式的循环链表，并称为循环单链表。&lt;/p&gt;
&lt;h1 id=&quot;循环链表的图解&quot;&gt;&lt;a href=&quot;#循环链表的图解&quot; class=&quot;headerlink&quot; title=&quot;循环链表的图解&quot;&gt;&lt;/a&gt;&lt;strong&gt;循环链表的图解&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/f853bab5c095840f544ad729bd30a79e5c3.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构" scheme="https://niithub.cn/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="链表" scheme="https://niithub.cn/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>双向链表</title>
    <link href="https://niithub.cn//posts/37fd9ed5/"/>
    <id>https://niithub.cn//posts/37fd9ed5/</id>
    <published>2019-05-20T05:36:00.000Z</published>
    <updated>2021-10-13T16:21:04.011Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a><strong>基础知识</strong></h1><p>双向链表也叫双链表（Double Linked List），是链表的一种，它的每个数据结点中都有两个指针，分别指向直接后继和直接前驱。所以，从双向链表中的任意一个结点开始，都可以很方便地访问它的前驱结点和后继结点。一般我们都构造双向循环链表。</p><p><img src="https://cdn.jsdelivr.net/gh/niithub/pic/blog/20201026201859.jpg" alt=""></p><h1 id="双向循环链表的图解"><a href="#双向循环链表的图解" class="headerlink" title="双向循环链表的图解"></a><strong>双向循环链表的图解</strong></h1><p><img src="https://cdn.jsdelivr.net/gh/niithub/pic/blog/20201026201827.jpg" alt=""></p><a id="more"></a><h1 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a><strong>注意点</strong></h1><p> 在双向链表中，那些只涉及后继指针的算法，如求表长度、取元素、元素定位等，与单链表中相应的算法相同，但对于<strong>前插</strong>和<strong>删除</strong>操作则涉及到前驱和后继两个方向的指针变化，因此与单链表中的算法不同。</p><p><strong>在插入和删除时，应注意头、尾指针指向的顺序，以免造成迷失要操作的结点地址</strong>。</p><h1 id="程序实现"><a href="#程序实现" class="headerlink" title="程序实现"></a><strong>程序实现</strong></h1><ul><li><p>C</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> {</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">prior</span>, *<span class="title">next</span>;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">} Node, *LinkList;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initLink</span><span class="params">(LinkList *link)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">normalInsert</span><span class="params">(LinkList link, <span class="keyword">int</span> size)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(LinkList link)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">positionInsertFromBefore</span><span class="params">(LinkList link, Node *node, <span class="keyword">int</span> location)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">positionInsertFromEnd</span><span class="params">(LinkList link, Node *p, <span class="keyword">int</span> location)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">deleteNode</span><span class="params">(LinkList link, <span class="keyword">int</span> location)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>{</span><br><span class="line">    LinkList link;</span><br><span class="line">    initLink(&amp;link);</span><br><span class="line">    normalInsert(link, <span class="number">5</span>);</span><br><span class="line">    print(link);</span><br><span class="line">    Node *p;</span><br><span class="line">    p = (Node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    p-&gt;data = <span class="number">9</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n使用前插法往原双向链表插入一个新结点：\n"</span>);</span><br><span class="line">    positionInsertFromBefore(link, p, <span class="number">3</span>);</span><br><span class="line">    print(link);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n使用尾插法往原双向链表插入一个新结点：\n"</span>);</span><br><span class="line">    p = (Node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    p-&gt;data = <span class="number">8</span>;</span><br><span class="line">    positionInsertFromEnd(link, p, <span class="number">3</span>);</span><br><span class="line">    print(link);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n删除一个结点，结点值为%d：\n"</span>, deleteNode(link, <span class="number">3</span>));</span><br><span class="line">    print(link);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initLink</span><span class="params">(LinkList *link)</span> </span>{</span><br><span class="line">    *link = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    (*link)-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    (*link)-&gt;prior = <span class="literal">NULL</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 普通插入，以尾插法插入</span></span><br><span class="line"><span class="comment"> * link: 双向链表</span></span><br><span class="line"><span class="comment"> * size: 欲插入的结点个数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">normalInsert</span><span class="params">(LinkList link, <span class="keyword">int</span> size)</span> </span>{</span><br><span class="line">    Node *node;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= size; i++) {</span><br><span class="line">        node = (Node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">        node-&gt;data = i;</span><br><span class="line">        link-&gt;next = node;</span><br><span class="line">        node-&gt;prior = link;</span><br><span class="line">        link = node;</span><br><span class="line">    }</span><br><span class="line">    link-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 打印双向链表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(LinkList link)</span> </span>{</span><br><span class="line">    Node *node = link-&gt;next, *p;</span><br><span class="line">    p = (Node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"从前往后打印：\n"</span>);</span><br><span class="line">    <span class="keyword">while</span> (node) {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\t"</span>, node-&gt;data);</span><br><span class="line">        <span class="keyword">if</span> (node-&gt;next == <span class="literal">NULL</span>) {</span><br><span class="line">            p = node;</span><br><span class="line">        }</span><br><span class="line">        node = node-&gt;next;</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n从后往前打印：\n"</span>);</span><br><span class="line">    <span class="keyword">while</span> (p-&gt;prior) {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\t"</span>, p-&gt;data);</span><br><span class="line">        p = p-&gt;prior;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 双向链表的前插操作，即在双向链表的第i个结点之前插入一个新的结点</span></span><br><span class="line"><span class="comment"> * link: 双向链表</span></span><br><span class="line"><span class="comment"> * node: 新结点</span></span><br><span class="line"><span class="comment"> * location: 欲执行插入操作的位置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">positionInsertFromBefore</span><span class="params">(LinkList link, Node *p, <span class="keyword">int</span> location)</span> </span>{</span><br><span class="line">    Node *node = link-&gt;next;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (node) {</span><br><span class="line">        i++;</span><br><span class="line">        <span class="keyword">if</span> (location == i) {</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">        node = node-&gt;next;</span><br><span class="line">    }</span><br><span class="line">    p-&gt;next = node-&gt;next;</span><br><span class="line">    node-&gt;next-&gt;prior = p;</span><br><span class="line">    p-&gt;prior = node;</span><br><span class="line">    node-&gt;next = p;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 双向链表的尾插操作，即在双向链表的第i个结点之后插入一个新的结点</span></span><br><span class="line"><span class="comment"> * link: 双向链表</span></span><br><span class="line"><span class="comment"> * node: 新结点</span></span><br><span class="line"><span class="comment"> * location: 欲执行插入操作的位置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">positionInsertFromEnd</span><span class="params">(LinkList link, Node *p, <span class="keyword">int</span> location)</span> </span>{</span><br><span class="line">    Node *node = link-&gt;next;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (node) {</span><br><span class="line">        i++;</span><br><span class="line">        node = node-&gt;next;</span><br><span class="line">        <span class="keyword">if</span> (location == i) {</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    p-&gt;next = node-&gt;next;</span><br><span class="line">    node-&gt;next-&gt;prior = p;</span><br><span class="line">    p-&gt;prior = node;</span><br><span class="line">    node-&gt;next = p;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 双向链表的删除操作，即删除指定位置的第i个结点</span></span><br><span class="line"><span class="comment"> * link: 双向链表</span></span><br><span class="line"><span class="comment"> * location: 欲执行删除操作的位置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">deleteNode</span><span class="params">(LinkList link, <span class="keyword">int</span> location)</span> </span>{</span><br><span class="line">    Node *node = link-&gt;next, *p;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>, result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (node) {</span><br><span class="line">        i++;</span><br><span class="line">        node = node-&gt;next;</span><br><span class="line">        <span class="keyword">if</span> (location == i) {</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    result = node-&gt;data;</span><br><span class="line">    node-&gt;prior-&gt;next = node-&gt;next;</span><br><span class="line">    node-&gt;next-&gt;prior = node-&gt;prior;</span><br><span class="line">    <span class="built_in">free</span>(node);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;基础知识&quot;&gt;&lt;a href=&quot;#基础知识&quot; class=&quot;headerlink&quot; title=&quot;基础知识&quot;&gt;&lt;/a&gt;&lt;strong&gt;基础知识&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;双向链表也叫双链表（Double Linked List），是链表的一种，它的每个数据结点中都有两个指针，分别指向直接后继和直接前驱。所以，从双向链表中的任意一个结点开始，都可以很方便地访问它的前驱结点和后继结点。一般我们都构造双向循环链表。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/niithub/pic/blog/20201026201859.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;双向循环链表的图解&quot;&gt;&lt;a href=&quot;#双向循环链表的图解&quot; class=&quot;headerlink&quot; title=&quot;双向循环链表的图解&quot;&gt;&lt;/a&gt;&lt;strong&gt;双向循环链表的图解&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/niithub/pic/blog/20201026201827.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构" scheme="https://niithub.cn/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="双向链表" scheme="https://niithub.cn/tags/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>链表练习题3-城市查找问题</title>
    <link href="https://niithub.cn//posts/83dfc713/"/>
    <id>https://niithub.cn//posts/83dfc713/</id>
    <published>2019-05-20T05:34:00.000Z</published>
    <updated>2021-10-13T16:21:04.013Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h1><p>将若干城市的信息存入一个带头结点的单链表，结点中的城市信息包括城市名、城市的位置坐标。<br>要求：</p><ol><li>给定一个城市名，返回其位置坐标；</li><li>给定一个位置坐标P和一个距离D，返回所有与P的距离小于等于D的城市。本题只考察链表信息，城市名可使用单字符。<a id="more"></a></li></ol><h1 id="程序实现"><a href="#程序实现" class="headerlink" title="程序实现"></a><strong>程序实现</strong></h1><ul><li>C</li></ul><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> {</span></span><br><span class="line"><span class="keyword">char</span> name;</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="keyword">int</span> y;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">next</span>;</span></span><br><span class="line">} Node, *LinkList;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initLink</span><span class="params">(LinkList *link)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">(LinkList link)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(LinkList link)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">searchByName</span><span class="params">(LinkList link, <span class="keyword">char</span> name)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">findAllCity</span><span class="params">(LinkList link, <span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> distance)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>{</span><br><span class="line">      LinkList link;</span><br><span class="line">      <span class="keyword">char</span> name;</span><br><span class="line">      <span class="keyword">int</span> x, y, distance;</span><br><span class="line">      initLink(&amp;link);</span><br><span class="line">      input(link);</span><br><span class="line">      print(link);</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"请输入您要查询的城市名:\n"</span>);</span><br><span class="line">      getchar();</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">"%c"</span>, &amp;name);</span><br><span class="line">      searchByName(link, name);</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"请输入您要查询的城市坐标及限定距离,格式为[X坐标 Y坐标 限定距离]:\n"</span>);</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;x, &amp;y, &amp;distance);</span><br><span class="line">      findAllCity(link, x, y, distance);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 初始化链表 </span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">initLink</span><span class="params">(LinkList *link)</span> </span>{</span><br><span class="line">      *link = (Node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">      (*link)-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 打印输出链表 </span></span><br><span class="line"><span class="comment">   */</span> </span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(LinkList link)</span> </span>{</span><br><span class="line">      Node *p = link-&gt;next;</span><br><span class="line">      <span class="keyword">while</span> (p) {</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">"城市名：%c\tX坐标：%d\tY坐标：%d\n"</span>, p-&gt;name, p-&gt;x, p-&gt;y);</span><br><span class="line">          p = p-&gt;next;</span><br><span class="line">      }</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 首次输入链表内数据 </span></span><br><span class="line"><span class="comment">   */</span> </span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">(LinkList link)</span> </span>{</span><br><span class="line">      Node *node;</span><br><span class="line">      <span class="keyword">int</span> time = <span class="number">0</span>;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"请输入要输入的数据个数:\n"</span>);</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;time);</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"请以[城市名 X坐标 Y坐标]的格式输入数据:\n"</span>);</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; time; i++) {</span><br><span class="line">          getchar();</span><br><span class="line">          node = (Node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">          <span class="built_in">scanf</span>(<span class="string">"%c %d %d"</span>, &amp;node-&gt;name, &amp;node-&gt;x, &amp;node-&gt;y);</span><br><span class="line">          link-&gt;next = node;</span><br><span class="line">          link = node;</span><br><span class="line">      }</span><br><span class="line">      link-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 给定一个城市名，返回其位置坐标 </span></span><br><span class="line"><span class="comment">   * link： 链表</span></span><br><span class="line"><span class="comment">   * name：城市名 </span></span><br><span class="line"><span class="comment">   */</span> </span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">searchByName</span><span class="params">(LinkList link, <span class="keyword">char</span> name)</span> </span>{</span><br><span class="line">      Node *node = link-&gt;next;</span><br><span class="line">      <span class="keyword">while</span> (node) {</span><br><span class="line">          <span class="keyword">if</span> (name == node-&gt;name) {</span><br><span class="line">              <span class="built_in">printf</span>(<span class="string">"X坐标：%d\tY坐标：%d\n"</span>, node-&gt;x, node-&gt;y);</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">          }</span><br><span class="line">          node = node-&gt;next;</span><br><span class="line">      }</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 给定一个位置A坐标，距离D，返回所有与A的距离小于distance的城市名</span></span><br><span class="line"><span class="comment">   * link： 链表</span></span><br><span class="line"><span class="comment">   * x：x坐标</span></span><br><span class="line"><span class="comment">   * y：y坐标</span></span><br><span class="line"><span class="comment">   * distance：距离 </span></span><br><span class="line"><span class="comment">   */</span> </span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">findAllCity</span><span class="params">(LinkList link, <span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> distance)</span> </span>{</span><br><span class="line">      Node *node = link-&gt;next;</span><br><span class="line">      <span class="keyword">while</span> (node) {</span><br><span class="line">          <span class="keyword">if</span> (<span class="built_in">sqrt</span>(<span class="built_in">pow</span>(x - node-&gt;x, <span class="number">2</span>) + <span class="built_in">pow</span>(y - node-&gt;y, <span class="number">2</span>)) &lt;= distance ) {</span><br><span class="line">              <span class="built_in">printf</span>(<span class="string">"城市：%c\n"</span>, node-&gt;name);</span><br><span class="line">          }</span><br><span class="line">          node = node-&gt;next;</span><br><span class="line">      }</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;&lt;strong&gt;问题描述&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;将若干城市的信息存入一个带头结点的单链表，结点中的城市信息包括城市名、城市的位置坐标。&lt;br&gt;要求：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;给定一个城市名，返回其位置坐标；&lt;/li&gt;
&lt;li&gt;给定一个位置坐标P和一个距离D，返回所有与P的距离小于等于D的城市。本题只考察链表信息，城市名可使用单字符。&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
      <category term="数据结构" scheme="https://niithub.cn/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="算法" scheme="https://niithub.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="链表" scheme="https://niithub.cn/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>单向循环链表练习-约瑟夫环问题</title>
    <link href="https://niithub.cn//posts/b9ea5f73/"/>
    <id>https://niithub.cn//posts/b9ea5f73/</id>
    <published>2019-05-20T05:28:00.000Z</published>
    <updated>2021-10-13T16:21:04.011Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h1><p>约瑟夫环（约瑟夫问题）是一个数学的应用问题：已知n个人（以编号1，2，3…n分别表示）按顺时针方向围坐在一张圆桌周围，每个人持有一个密码（正整数）。一开始任选一个整数作为报数上限值m，从第一个人开始顺时针自1报数，报到m时停止报数，报m的那个人出列，他的密码作为新的m值，从他在顺时针方向上的下一个人又开始重新从1报数，报到m的那个人出列又出列；依此规律重复下去，直到圆桌周围的人全部出列。</p><h1 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a><strong>输入格式</strong></h1><ul><li>第一行一个数n，表示圆桌上做的人数；   </li><li>第二行是n个整数，表示圆桌上座客持有的密码；</li><li>第三行是一个整数，表示初始m值；<a id="more"></a></li></ul><h1 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a><strong>输出格式</strong></h1><p> 桌上座客的出队顺序</p><h1 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a><strong>样例输入</strong></h1><blockquote><p>7<br>3 1 7 2 4 8 4<br>20  </p></blockquote><h1 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a><strong>样例输出</strong></h1><blockquote><p>6       1       4       7       2       3       5 </p></blockquote><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h1><p> 本题只需要注意链表循环时，要跳过链表的头结点。</p><h1 id="程序实现"><a href="#程序实现" class="headerlink" title="程序实现"></a><strong>程序实现</strong></h1><ul><li><p>C</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> {</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="keyword">int</span> index;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">next</span>;</span></span><br><span class="line">} Node, *LinkList;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initLink</span><span class="params">(LinkList *link)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">create</span><span class="params">(LinkList link, <span class="keyword">int</span> size)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> m = <span class="number">0</span>, n = <span class="number">0</span>, count = <span class="number">1</span>, sum = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 指针p指向报数时的位置，指针q指向报数时的上一位</span></span><br><span class="line">    Node *p, *q;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    LinkList link;</span><br><span class="line">    initLink(&amp;link);</span><br><span class="line">    create(link, n);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</span><br><span class="line">    p = link-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (sum != n) {</span><br><span class="line">        <span class="keyword">if</span> (count == m) {</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\t"</span>, p-&gt;index);</span><br><span class="line">            m = p-&gt;data;</span><br><span class="line">            q-&gt;next = p-&gt;next;</span><br><span class="line">            <span class="built_in">free</span>(p);</span><br><span class="line">            p = q-&gt;next;</span><br><span class="line">            count = <span class="number">0</span>;</span><br><span class="line">            sum++;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            q = p;</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 当指针p指向链表的头指针时，指针向后移动一位</span></span><br><span class="line">        <span class="keyword">if</span> (p-&gt;index == <span class="number">-1</span>) {</span><br><span class="line">            q = p;</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        }</span><br><span class="line">        count++;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initLink</span><span class="params">(LinkList *link)</span> </span>{</span><br><span class="line">    *link = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    (*link)-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    (*link)-&gt;index = <span class="number">-1</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">create</span><span class="params">(LinkList link, <span class="keyword">int</span> size)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    Node *node, *q;</span><br><span class="line">    q = link;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; size; i++) {</span><br><span class="line">        node = (Node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;node-&gt;data);</span><br><span class="line">        node-&gt;index = i + <span class="number">1</span>;</span><br><span class="line">        link-&gt;next = node;</span><br><span class="line">        link = node;</span><br><span class="line">    }</span><br><span class="line">    link-&gt;next = q;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;&lt;strong&gt;问题描述&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;约瑟夫环（约瑟夫问题）是一个数学的应用问题：已知n个人（以编号1，2，3…n分别表示）按顺时针方向围坐在一张圆桌周围，每个人持有一个密码（正整数）。一开始任选一个整数作为报数上限值m，从第一个人开始顺时针自1报数，报到m时停止报数，报m的那个人出列，他的密码作为新的m值，从他在顺时针方向上的下一个人又开始重新从1报数，报到m的那个人出列又出列；依此规律重复下去，直到圆桌周围的人全部出列。&lt;/p&gt;
&lt;h1 id=&quot;输入格式&quot;&gt;&lt;a href=&quot;#输入格式&quot; class=&quot;headerlink&quot; title=&quot;输入格式&quot;&gt;&lt;/a&gt;&lt;strong&gt;输入格式&lt;/strong&gt;&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;第一行一个数n，表示圆桌上做的人数；   &lt;/li&gt;
&lt;li&gt;第二行是n个整数，表示圆桌上座客持有的密码；&lt;/li&gt;
&lt;li&gt;第三行是一个整数，表示初始m值；&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
      <category term="数据结构" scheme="https://niithub.cn/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="算法" scheme="https://niithub.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="链表" scheme="https://niithub.cn/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>栈-队列练习题-回文判断</title>
    <link href="https://niithub.cn//posts/366dd198/"/>
    <id>https://niithub.cn//posts/366dd198/</id>
    <published>2019-05-20T05:27:00.000Z</published>
    <updated>2021-10-13T16:21:04.011Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h1><p>试写一个算法，判断依次读入的一个以@为结束符的字母序列，是否为形如<code>序列1&amp;序列2</code>模式的字符序列。其中序列1和序列2中都不含字符<code>&amp;</code>，且序列2是序列1的逆序列。例如，<code>a+b&amp;b+a</code>是属于该模式的字符序列，而<code>1+3&amp;3-1</code>则不是。</p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h1><p>首先将字符串以&amp;为分割点，分割成两部分，前一部分存入栈中，后一部分存入队列，而后分别出栈、出队，判断出栈、出队的元素是否一致，如果一致，则是回文数，否则不是回文数。<br><a id="more"></a></p><h1 id="程序实现"><a href="#程序实现" class="headerlink" title="程序实现"></a><strong>程序实现</strong></h1><ul><li>C<figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 51</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FALSE 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TRUE 1</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Stack</span> {</span></span><br><span class="line">    <span class="keyword">char</span> elem[MAXSIZE];</span><br><span class="line">    <span class="keyword">int</span> top;</span><br><span class="line">} Stack, *SeqStack;</span><br><span class="line"><span class="comment">/*队列的数据结构*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Queue</span> {</span></span><br><span class="line">    <span class="keyword">char</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Queue</span> *<span class="title">next</span>;</span></span><br><span class="line">} Queue;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LinkQueue</span> {</span></span><br><span class="line">    Queue *front;</span><br><span class="line">    Queue *rear;</span><br><span class="line">} LinkQueue;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*栈操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initStack</span><span class="params">(SeqStack <span class="built_in">stack</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">emptyStack</span><span class="params">(SeqStack <span class="built_in">stack</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fullStack</span><span class="params">(SeqStack <span class="built_in">stack</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">push</span><span class="params">(SeqStack <span class="built_in">stack</span>, <span class="keyword">char</span> element)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pop</span><span class="params">(SeqStack <span class="built_in">stack</span>, <span class="keyword">char</span> *element)</span></span>;</span><br><span class="line"><span class="comment">/*队列操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">initQueue</span><span class="params">(LinkQueue *<span class="built_in">queue</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">enterQueue</span><span class="params">(LinkQueue *<span class="built_in">queue</span>, <span class="keyword">char</span> x)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">deleteQueue</span><span class="params">(LinkQueue *<span class="built_in">queue</span>, <span class="keyword">char</span> *x)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>{</span><br><span class="line">    SeqStack <span class="built_in">stack</span>;</span><br><span class="line">    <span class="built_in">stack</span> = (SeqStack)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Stack));</span><br><span class="line">    initStack(<span class="built_in">stack</span>);</span><br><span class="line">    LinkQueue <span class="built_in">queue</span>;</span><br><span class="line">    initQueue(&amp;<span class="built_in">queue</span>);</span><br><span class="line">    <span class="keyword">char</span> datas[MAXSIZE];</span><br><span class="line">    gets(datas);</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> flag = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(datas[i] != <span class="string">'@'</span>) {</span><br><span class="line">        <span class="keyword">if</span> (datas[i] == <span class="string">'&amp;'</span>) {</span><br><span class="line">            flag = <span class="number">0</span>;</span><br><span class="line">            i++;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (flag) {</span><br><span class="line">            push(<span class="built_in">stack</span>, datas[i++]);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            enterQueue(&amp;<span class="built_in">queue</span>, datas[i++]);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">char</span> stack1, queue1;</span><br><span class="line">    <span class="keyword">while</span> (pop(<span class="built_in">stack</span>, &amp;stack1) &amp;&amp; deleteQueue(&amp;<span class="built_in">queue</span>, &amp;queue1)) {</span><br><span class="line">        <span class="keyword">if</span> (stack1 != queue1) {</span><br><span class="line">            flag = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (flag) {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"不是回文数!\n"</span>);</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"是回文数!\n"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  初始化一个空栈</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initStack</span><span class="params">(SeqStack <span class="built_in">stack</span>)</span> </span>{</span><br><span class="line">    <span class="built_in">stack</span>-&gt;top = <span class="number">-1</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断栈是否为空</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">emptyStack</span><span class="params">(SeqStack <span class="built_in">stack</span>)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">stack</span>-&gt;top == <span class="number">-1</span>) {</span><br><span class="line">        result = <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断栈是否已满</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fullStack</span><span class="params">(SeqStack <span class="built_in">stack</span>)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">stack</span>-&gt;top == MAXSIZE - <span class="number">1</span>) {</span><br><span class="line">        result = <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 入栈操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">push</span><span class="params">(SeqStack <span class="built_in">stack</span>, <span class="keyword">char</span> element)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (fullStack(<span class="built_in">stack</span>)) {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"栈已满!\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">stack</span>-&gt;top++;</span><br><span class="line">    <span class="built_in">stack</span>-&gt;elem[<span class="built_in">stack</span>-&gt;top] = element;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 出栈操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pop</span><span class="params">(SeqStack <span class="built_in">stack</span>, <span class="keyword">char</span> *element)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (emptyStack(<span class="built_in">stack</span>)) {</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    }</span><br><span class="line">    *element = <span class="built_in">stack</span>-&gt;elem[<span class="built_in">stack</span>-&gt;top];</span><br><span class="line">    <span class="built_in">stack</span>-&gt;top--;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 初始化队列</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">initQueue</span><span class="params">(LinkQueue *<span class="built_in">queue</span>)</span> </span>{</span><br><span class="line">    <span class="built_in">queue</span>-&gt;front = (Queue*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Queue));</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">queue</span>-&gt;front != <span class="literal">NULL</span>) {</span><br><span class="line">        <span class="built_in">queue</span>-&gt;rear = <span class="built_in">queue</span>-&gt;front;</span><br><span class="line">        <span class="built_in">queue</span>-&gt;front-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">return</span> TRUE;</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 入队操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">enterQueue</span><span class="params">(LinkQueue *<span class="built_in">queue</span>, <span class="keyword">char</span> x)</span> </span>{</span><br><span class="line">    Queue *newQueue;</span><br><span class="line">    newQueue = (Queue*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Queue));</span><br><span class="line">    <span class="keyword">if</span> (newQueue != <span class="literal">NULL</span>) {</span><br><span class="line">        newQueue-&gt;data = x;</span><br><span class="line">        newQueue-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="built_in">queue</span>-&gt;rear-&gt;next = newQueue;</span><br><span class="line">        <span class="built_in">queue</span>-&gt;rear = newQueue;</span><br><span class="line">        <span class="keyword">return</span> TRUE;</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 出队操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">deleteQueue</span><span class="params">(LinkQueue *<span class="built_in">queue</span>, <span class="keyword">char</span> *x)</span> </span>{</span><br><span class="line">    Queue *p;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">queue</span>-&gt;front == <span class="built_in">queue</span>-&gt;rear) {</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    }</span><br><span class="line">    p = <span class="built_in">queue</span>-&gt;front-&gt;next;</span><br><span class="line">    <span class="built_in">queue</span>-&gt;front-&gt;next = p-&gt;next;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">queue</span>-&gt;rear == p) {</span><br><span class="line">        <span class="built_in">queue</span>-&gt;rear = <span class="built_in">queue</span>-&gt;front;</span><br><span class="line">    }</span><br><span class="line">    *x = p-&gt;data;</span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><h1 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a><strong>运行结果</strong></h1><p><img src="https://oscimg.oschina.net/oscnet/0a845112cc37bbb3f6376aefe3f80d91a0a.jpg" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;&lt;strong&gt;问题描述&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;试写一个算法，判断依次读入的一个以@为结束符的字母序列，是否为形如&lt;code&gt;序列1&amp;amp;序列2&lt;/code&gt;模式的字符序列。其中序列1和序列2中都不含字符&lt;code&gt;&amp;amp;&lt;/code&gt;，且序列2是序列1的逆序列。例如，&lt;code&gt;a+b&amp;amp;b+a&lt;/code&gt;是属于该模式的字符序列，而&lt;code&gt;1+3&amp;amp;3-1&lt;/code&gt;则不是。&lt;/p&gt;
&lt;h1 id=&quot;解题思路&quot;&gt;&lt;a href=&quot;#解题思路&quot; class=&quot;headerlink&quot; title=&quot;解题思路&quot;&gt;&lt;/a&gt;&lt;strong&gt;解题思路&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;首先将字符串以&amp;amp;为分割点，分割成两部分，前一部分存入栈中，后一部分存入队列，而后分别出栈、出队，判断出栈、出队的元素是否一致，如果一致，则是回文数，否则不是回文数。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构" scheme="https://niithub.cn/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="算法" scheme="https://niithub.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="栈" scheme="https://niithub.cn/tags/%E6%A0%88/"/>
    
      <category term="队列" scheme="https://niithub.cn/tags/%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>栈的应用-括号的匹配检验</title>
    <link href="https://niithub.cn//posts/e5f849e/"/>
    <id>https://niithub.cn//posts/e5f849e/</id>
    <published>2019-05-20T05:25:00.000Z</published>
    <updated>2021-10-13T16:21:04.011Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h1><p>假设表达式中允许包含两种括号：圆括号和方括号，其嵌套的顺序随意，即([]())或[([][])]等为正确的格式，[(]或[())]等为非法格式，试写一个算法检验括号的格式是否正确。</p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h1><p>使用栈这种数据结构，当遇到左半边的符号时，进栈，如遇到右半边的符号时，出栈操作，如果符号不是同一队符号，则重新入栈，程序结束后，根据栈是否为空栈判断括号的格式是否正确，如果是正确，则栈为空栈，否则相反。</p><p><strong>程序是根据严蔚敏老师的数据结构一书写就的，最后判断括号是否全匹配的操作我有点迷。</strong><br><a id="more"></a></p><h1 id="程序实现"><a href="#程序实现" class="headerlink" title="程序实现"></a><strong>程序实现</strong></h1><ul><li><p>C</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 栈的简单操作：判断括号是否成对</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STACK_INIT_SIZE 100</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Stack</span> {</span></span><br><span class="line">    <span class="keyword">char</span> *base;</span><br><span class="line">    <span class="keyword">char</span> *top;</span><br><span class="line">    <span class="keyword">int</span> stackSize;</span><br><span class="line">} SqStack;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initStack</span><span class="params">(SqStack *<span class="built_in">stack</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pushStack</span><span class="params">(SqStack *<span class="built_in">stack</span>, <span class="keyword">char</span> element)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">popStack</span><span class="params">(SqStack *<span class="built_in">stack</span>, <span class="keyword">char</span> *element)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>{</span><br><span class="line">    SqStack <span class="built_in">stack</span>;</span><br><span class="line">    initStack(&amp;<span class="built_in">stack</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入要匹配的括号:\n"</span>);</span><br><span class="line">    <span class="keyword">char</span> element, result;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%c"</span>, &amp;element);</span><br><span class="line">    <span class="keyword">while</span> (element != <span class="string">'#'</span>) {</span><br><span class="line">        <span class="keyword">if</span> ((<span class="keyword">int</span>)element == <span class="number">91</span> || (<span class="keyword">int</span>)element == <span class="number">40</span>) {</span><br><span class="line">            pushStack(&amp;<span class="built_in">stack</span>, element);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            popStack(&amp;<span class="built_in">stack</span>, &amp;result);</span><br><span class="line">            <span class="keyword">if</span> ((element == <span class="string">']'</span> &amp;&amp; result != <span class="string">'['</span>) || (element == <span class="string">')'</span> &amp;&amp; result != <span class="string">'('</span>)) {</span><br><span class="line">                pushStack(&amp;<span class="built_in">stack</span>, result);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        getchar();</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%c"</span>, &amp;element);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (*<span class="built_in">stack</span>.top == *<span class="built_in">stack</span>.base) {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"括号全匹配!"</span>);</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"括号匹配失败!"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 初始化栈</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initStack</span><span class="params">(SqStack *<span class="built_in">stack</span>)</span> </span>{</span><br><span class="line">    <span class="built_in">stack</span>-&gt;base = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(STACK_INIT_SIZE * <span class="keyword">sizeof</span>(<span class="keyword">char</span>));</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">stack</span>-&gt;base) {</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">stack</span>-&gt;stackSize = <span class="number">100</span>;</span><br><span class="line">    <span class="built_in">stack</span>-&gt;top = <span class="built_in">stack</span>-&gt;base;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 入栈操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pushStack</span><span class="params">(SqStack *<span class="built_in">stack</span>, <span class="keyword">char</span> element)</span> </span>{</span><br><span class="line">    <span class="comment">// 栈已满</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">stack</span>-&gt;top - <span class="built_in">stack</span>-&gt;base &gt;= <span class="built_in">stack</span>-&gt;stackSize) {</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    }</span><br><span class="line">    *<span class="built_in">stack</span>-&gt;top++ = element;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 出栈操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">popStack</span><span class="params">(SqStack *<span class="built_in">stack</span>, <span class="keyword">char</span> *element)</span> </span>{</span><br><span class="line">    <span class="comment">// 栈已空</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">stack</span>-&gt;top == <span class="built_in">stack</span>-&gt;base) {</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    }</span><br><span class="line">    *element = *--<span class="built_in">stack</span>-&gt;top;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;&lt;strong&gt;问题描述&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;假设表达式中允许包含两种括号：圆括号和方括号，其嵌套的顺序随意，即([]())或[([][])]等为正确的格式，[(]或[())]等为非法格式，试写一个算法检验括号的格式是否正确。&lt;/p&gt;
&lt;h1 id=&quot;解题思路&quot;&gt;&lt;a href=&quot;#解题思路&quot; class=&quot;headerlink&quot; title=&quot;解题思路&quot;&gt;&lt;/a&gt;&lt;strong&gt;解题思路&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;使用栈这种数据结构，当遇到左半边的符号时，进栈，如遇到右半边的符号时，出栈操作，如果符号不是同一队符号，则重新入栈，程序结束后，根据栈是否为空栈判断括号的格式是否正确，如果是正确，则栈为空栈，否则相反。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;程序是根据严蔚敏老师的数据结构一书写就的，最后判断括号是否全匹配的操作我有点迷。&lt;/strong&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构" scheme="https://niithub.cn/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="算法" scheme="https://niithub.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="栈" scheme="https://niithub.cn/tags/%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>非递归实现后序遍历二叉树</title>
    <link href="https://niithub.cn//posts/3b1b93e6/"/>
    <id>https://niithub.cn//posts/3b1b93e6/</id>
    <published>2019-05-20T05:24:00.000Z</published>
    <updated>2021-10-13T16:21:04.013Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h1><p>从键盘接受输入先序序列，以二叉链表作为存储结构，建立二叉树（以先序来建立）并对其进行后序遍历，然后将遍历结果打印输出。要求采用非递归方法实现。</p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h1><ol><li>Push根结点到第一个栈stack1中</li><li>从第一个栈stack1中Pop出一个结点，并将其Push到第二个栈stack2中</li><li>然后Push结点的左孩子和右孩子到第一个栈stack1中</li><li>重复过程2和3直到栈stack1为空</li><li>完成后，所有结点已经Push到栈stack2中，且按照后序遍历的顺序存放，直接全部Pop出来即是二叉树后序遍历结果<a id="more"></a></li></ol><h1 id="程序实现"><a href="#程序实现" class="headerlink" title="程序实现"></a><strong>程序实现</strong></h1><ul><li>C<figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FALSE 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TRUE 1</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> Datatype;</span><br><span class="line"><span class="comment">/*二叉树*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> {</span></span><br><span class="line">    Datatype data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">LChild</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">RChild</span>;</span></span><br><span class="line">} BiTNode, *BiTree;</span><br><span class="line"><span class="comment">/*链栈*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Stack</span> {</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">node</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Stack</span> *<span class="title">next</span>;</span></span><br><span class="line">} Stack, *SeqStack;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> {</span></span><br><span class="line">    SeqStack top;</span><br><span class="line">    <span class="keyword">int</span> count;</span><br><span class="line">} LinkStack;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*栈操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">initStack</span><span class="params">(LinkStack *<span class="built_in">stack</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">emptyStack</span><span class="params">(LinkStack *<span class="built_in">stack</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">push</span><span class="params">(LinkStack *<span class="built_in">stack</span>, BiTree tree)</span></span>;</span><br><span class="line"><span class="function">BiTree <span class="title">pop</span><span class="params">(LinkStack *<span class="built_in">stack</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createBiTree</span><span class="params">(BiTree *tree)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">traverseTree</span><span class="params">(BiTree tree, LinkStack *stack1, LinkStack *stack2)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>{</span><br><span class="line">    BiTree tree;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"按先序遍历序列建立二叉树:\n"</span>);</span><br><span class="line">    createBiTree(&amp;tree);</span><br><span class="line">    LinkStack stack1, stack2;</span><br><span class="line">    initStack(&amp;stack1);</span><br><span class="line">    initStack(&amp;stack2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"使用栈后序输出二叉树:\n"</span>);</span><br><span class="line">    traverseTree(tree, &amp;stack1, &amp;stack2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  初始化一个空栈</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">initStack</span><span class="params">(LinkStack *<span class="built_in">stack</span>)</span> </span>{</span><br><span class="line">    <span class="built_in">stack</span>-&gt;top = (SeqStack)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Stack));</span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">stack</span>-&gt;top) {</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">stack</span>-&gt;top = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="built_in">stack</span>-&gt;count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断栈是否为空</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">emptyStack</span><span class="params">(LinkStack *<span class="built_in">stack</span>)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">stack</span>-&gt;count == <span class="number">0</span>) {</span><br><span class="line">        result = <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 入栈操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">push</span><span class="params">(LinkStack *<span class="built_in">stack</span>, BiTree tree)</span> </span>{</span><br><span class="line">    SeqStack s = (SeqStack)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Stack));</span><br><span class="line">    s-&gt;node = tree;</span><br><span class="line">    s-&gt;next = <span class="built_in">stack</span>-&gt;top;<span class="comment">/* 把当前的栈顶元素赋值给新结点的直接后继，见图中① */</span></span><br><span class="line">    <span class="built_in">stack</span>-&gt;top = s;         <span class="comment">/* 将新的结点s赋值给栈顶指针，见图中② */</span></span><br><span class="line">    <span class="built_in">stack</span>-&gt;count++;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 出栈操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">BiTree <span class="title">pop</span><span class="params">(LinkStack *<span class="built_in">stack</span>)</span> </span>{</span><br><span class="line">    BiTree tree;</span><br><span class="line">    SeqStack p;</span><br><span class="line">    <span class="keyword">if</span> (emptyStack(<span class="built_in">stack</span>)) {</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    }</span><br><span class="line">    tree = <span class="built_in">stack</span>-&gt;top-&gt;node;</span><br><span class="line">    <span class="comment">/*将栈顶结点赋值给p*/</span></span><br><span class="line">    p = <span class="built_in">stack</span>-&gt;top;</span><br><span class="line">    <span class="comment">/*使得栈顶指针下移一位，指向后一结点*/</span></span><br><span class="line">    <span class="built_in">stack</span>-&gt;top = <span class="built_in">stack</span>-&gt;top-&gt;next;</span><br><span class="line">    <span class="comment">/* 释放结点p */</span></span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    <span class="built_in">stack</span>-&gt;count--;</span><br><span class="line">    <span class="keyword">return</span> tree;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createBiTree</span><span class="params">(BiTree *tree)</span> </span>{</span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    ch = getchar();</span><br><span class="line">    <span class="keyword">if</span>(ch == <span class="string">' '</span>) {</span><br><span class="line">        *tree = <span class="literal">NULL</span>;</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="comment">//生成一个新结点</span></span><br><span class="line">        *tree = (BiTree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));</span><br><span class="line">        (*tree)-&gt;data = ch;</span><br><span class="line">        <span class="comment">//生成左子树</span></span><br><span class="line">        createBiTree(&amp;((*tree)-&gt;LChild));</span><br><span class="line">        <span class="comment">//生成右子树</span></span><br><span class="line">        createBiTree(&amp;((*tree)-&gt;RChild));</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**遍历树的结点*/</span></span><br><span class="line"><span class="comment">/*定义了两个栈接受后序遍历的结果*/</span> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">traverseTree</span><span class="params">(BiTree tree, LinkStack *stack1, LinkStack *stack2)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(tree == <span class="literal">NULL</span>) {</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    BiTree root = tree;</span><br><span class="line">    push(stack1, root);</span><br><span class="line">    <span class="keyword">while</span> (!emptyStack(stack1)) {</span><br><span class="line">        BiTree t = stack1-&gt;top-&gt;node;</span><br><span class="line">        push(stack2, t);</span><br><span class="line">        pop(stack1);</span><br><span class="line">        <span class="keyword">if</span> (t-&gt;LChild != <span class="literal">NULL</span>) {</span><br><span class="line">            push(stack1, t-&gt;LChild);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (t-&gt;RChild != <span class="literal">NULL</span>) {</span><br><span class="line">            push(stack1, t-&gt;RChild);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    root = pop(stack2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%c "</span>, root-&gt;data);</span><br><span class="line">    <span class="keyword">while</span> (!emptyStack(stack2)) {</span><br><span class="line">        root = pop(stack2);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%c "</span>, root-&gt;data);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><h1 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a><strong>运行结果</strong></h1><p><img src="https://oscimg.oschina.net/oscnet/c670896e0646936bc560331891313ac6619.jpg" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;&lt;strong&gt;问题描述&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;从键盘接受输入先序序列，以二叉链表作为存储结构，建立二叉树（以先序来建立）并对其进行后序遍历，然后将遍历结果打印输出。要求采用非递归方法实现。&lt;/p&gt;
&lt;h1 id=&quot;解题思路&quot;&gt;&lt;a href=&quot;#解题思路&quot; class=&quot;headerlink&quot; title=&quot;解题思路&quot;&gt;&lt;/a&gt;&lt;strong&gt;解题思路&lt;/strong&gt;&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;Push根结点到第一个栈stack1中&lt;/li&gt;
&lt;li&gt;从第一个栈stack1中Pop出一个结点，并将其Push到第二个栈stack2中&lt;/li&gt;
&lt;li&gt;然后Push结点的左孩子和右孩子到第一个栈stack1中&lt;/li&gt;
&lt;li&gt;重复过程2和3直到栈stack1为空&lt;/li&gt;
&lt;li&gt;完成后，所有结点已经Push到栈stack2中，且按照后序遍历的顺序存放，直接全部Pop出来即是二叉树后序遍历结果&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
      <category term="数据结构" scheme="https://niithub.cn/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="算法" scheme="https://niithub.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="二叉树" scheme="https://niithub.cn/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>非递归实现中序遍历二叉树</title>
    <link href="https://niithub.cn//posts/a634667c/"/>
    <id>https://niithub.cn//posts/a634667c/</id>
    <published>2019-05-20T05:23:00.000Z</published>
    <updated>2021-10-13T16:21:04.013Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h1><p>从键盘接受输入先序序列，以二叉链表作为存储结构，建立二叉树（以先序来建立）并对其进行中序遍历，然后将遍历结果打印输出。要求采用非递归方法实现。</p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h1><p> 使用栈中间存储树的结点<br><a id="more"></a></p><h1 id="程序实现"><a href="#程序实现" class="headerlink" title="程序实现"></a><strong>程序实现</strong></h1><ul><li><p>C</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FALSE 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TRUE 1</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> Datatype;</span><br><span class="line"><span class="comment">/*二叉树*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> {</span></span><br><span class="line">    Datatype data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">LChild</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">RChild</span>;</span></span><br><span class="line">} BiTNode, *BiTree;</span><br><span class="line"><span class="comment">/*链栈*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Stack</span> {</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">node</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Stack</span> *<span class="title">next</span>;</span></span><br><span class="line">} Stack, *SeqStack;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> {</span></span><br><span class="line">    SeqStack top;</span><br><span class="line">    <span class="keyword">int</span> count;</span><br><span class="line">} LinkStack;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*栈操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">initStack</span><span class="params">(LinkStack *<span class="built_in">stack</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">emptyStack</span><span class="params">(LinkStack *<span class="built_in">stack</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">push</span><span class="params">(LinkStack *<span class="built_in">stack</span>, BiTree tree)</span></span>;</span><br><span class="line"><span class="function">BiTree <span class="title">pop</span><span class="params">(LinkStack *<span class="built_in">stack</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createBiTree</span><span class="params">(BiTree *tree)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">traverseTree</span><span class="params">(BiTree tree, LinkStack *<span class="built_in">stack</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>{</span><br><span class="line">    BiTree tree;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"按先序遍历序列建立二叉树:\n"</span>);</span><br><span class="line">    createBiTree(&amp;tree);</span><br><span class="line">    LinkStack <span class="built_in">stack</span>;</span><br><span class="line">    initStack(&amp;<span class="built_in">stack</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"使用栈后序输出二叉树:\n"</span>);</span><br><span class="line">    traverseTree(tree, &amp;<span class="built_in">stack</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  初始化一个空栈</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">initStack</span><span class="params">(LinkStack *<span class="built_in">stack</span>)</span> </span>{</span><br><span class="line">    <span class="built_in">stack</span>-&gt;top = (SeqStack)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Stack));</span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">stack</span>-&gt;top) {</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">stack</span>-&gt;top = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="built_in">stack</span>-&gt;count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断栈是否为空</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">emptyStack</span><span class="params">(LinkStack *<span class="built_in">stack</span>)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">stack</span>-&gt;count == <span class="number">0</span>) {</span><br><span class="line">        result = <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 入栈操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">push</span><span class="params">(LinkStack *<span class="built_in">stack</span>, BiTree tree)</span> </span>{</span><br><span class="line">    SeqStack s = (SeqStack)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Stack));</span><br><span class="line">    s-&gt;node = tree;</span><br><span class="line">    s-&gt;next = <span class="built_in">stack</span>-&gt;top;<span class="comment">/* 把当前的栈顶元素赋值给新结点的直接后继，见图中① */</span></span><br><span class="line">    <span class="built_in">stack</span>-&gt;top = s;         <span class="comment">/* 将新的结点s赋值给栈顶指针，见图中② */</span></span><br><span class="line">    <span class="built_in">stack</span>-&gt;count++;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 出栈操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">BiTree <span class="title">pop</span><span class="params">(LinkStack *<span class="built_in">stack</span>)</span> </span>{</span><br><span class="line">    BiTree tree;</span><br><span class="line">    SeqStack p;</span><br><span class="line">    <span class="keyword">if</span> (emptyStack(<span class="built_in">stack</span>)) {</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    }</span><br><span class="line">    tree = <span class="built_in">stack</span>-&gt;top-&gt;node;</span><br><span class="line">    <span class="comment">/*将栈顶结点赋值给p*/</span></span><br><span class="line">    p = <span class="built_in">stack</span>-&gt;top;</span><br><span class="line">    <span class="comment">/*使得栈顶指针下移一位，指向后一结点*/</span></span><br><span class="line">    <span class="built_in">stack</span>-&gt;top = <span class="built_in">stack</span>-&gt;top-&gt;next;</span><br><span class="line">    <span class="comment">/* 释放结点p */</span></span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    <span class="built_in">stack</span>-&gt;count--;</span><br><span class="line">    <span class="keyword">return</span> tree;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createBiTree</span><span class="params">(BiTree *tree)</span> </span>{</span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    ch = getchar();</span><br><span class="line">    <span class="keyword">if</span>(ch == <span class="string">' '</span>) {</span><br><span class="line">        *tree = <span class="literal">NULL</span>;</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="comment">//生成一个新结点</span></span><br><span class="line">        *tree = (BiTree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));</span><br><span class="line">        (*tree)-&gt;data = ch;</span><br><span class="line">        <span class="comment">//生成左子树</span></span><br><span class="line">        createBiTree(&amp;((*tree)-&gt;LChild));</span><br><span class="line">        <span class="comment">//生成右子树</span></span><br><span class="line">        createBiTree(&amp;((*tree)-&gt;RChild));</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**遍历树的结点*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">traverseTree</span><span class="params">(BiTree tree, LinkStack *<span class="built_in">stack</span>)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(tree == <span class="literal">NULL</span>) {</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    BiTree root = tree;</span><br><span class="line">    <span class="keyword">while</span> (root != <span class="literal">NULL</span> || !emptyStack(<span class="built_in">stack</span>)) {</span><br><span class="line">        <span class="keyword">if</span> (root != <span class="literal">NULL</span>) {</span><br><span class="line">            push(<span class="built_in">stack</span>, root);</span><br><span class="line">            root = root-&gt;LChild;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            root = pop(<span class="built_in">stack</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%c "</span>, root-&gt;data);</span><br><span class="line">            root = root-&gt;RChild;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li></ul><h1 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a><strong>运行结果</strong></h1><p><img src="https://oscimg.oschina.net/oscnet/02a0ddfb383c19f9013d8761df103301f6f.jpg" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;&lt;strong&gt;问题描述&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;从键盘接受输入先序序列，以二叉链表作为存储结构，建立二叉树（以先序来建立）并对其进行中序遍历，然后将遍历结果打印输出。要求采用非递归方法实现。&lt;/p&gt;
&lt;h1 id=&quot;解题思路&quot;&gt;&lt;a href=&quot;#解题思路&quot; class=&quot;headerlink&quot; title=&quot;解题思路&quot;&gt;&lt;/a&gt;&lt;strong&gt;解题思路&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt; 使用栈中间存储树的结点&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构" scheme="https://niithub.cn/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="算法" scheme="https://niithub.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="二叉树" scheme="https://niithub.cn/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>非递归实现先序遍历二叉树</title>
    <link href="https://niithub.cn//posts/6d8be3cf/"/>
    <id>https://niithub.cn//posts/6d8be3cf/</id>
    <published>2019-05-20T05:20:00.000Z</published>
    <updated>2021-10-13T16:21:04.013Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h1><p>从键盘接受输入先序序列，以二叉链表作为存储结构，建立二叉树（以先序来建立）并对其进行先序遍历，然后将遍历结果打印输出。要求采用非递归方法实现。</p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h1><p> 使用栈中间存储树的结点<br><a id="more"></a></p><h1 id="程序实现"><a href="#程序实现" class="headerlink" title="程序实现"></a><strong>程序实现</strong></h1><ul><li><p>C</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FALSE 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TRUE 1</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> Datatype;</span><br><span class="line"><span class="comment">/*二叉树*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> {</span></span><br><span class="line">    Datatype data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">LChild</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">RChild</span>;</span></span><br><span class="line">} BiTNode, *BiTree;</span><br><span class="line"><span class="comment">/*链栈*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Stack</span> {</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">node</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Stack</span> *<span class="title">next</span>;</span></span><br><span class="line">} Stack, *SeqStack;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> {</span></span><br><span class="line">    SeqStack top;</span><br><span class="line">    <span class="keyword">int</span> count;</span><br><span class="line">} LinkStack;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*栈操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">initStack</span><span class="params">(LinkStack *<span class="built_in">stack</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">emptyStack</span><span class="params">(LinkStack *<span class="built_in">stack</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">push</span><span class="params">(LinkStack *<span class="built_in">stack</span>, BiTree tree)</span></span>;</span><br><span class="line"><span class="function">BiTree <span class="title">pop</span><span class="params">(LinkStack *<span class="built_in">stack</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createBiTree</span><span class="params">(BiTree *tree)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">traverseTree</span><span class="params">(BiTree tree, LinkStack *<span class="built_in">stack</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>{</span><br><span class="line">    BiTree tree;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"按先序遍历序列建立二叉树:\n"</span>);</span><br><span class="line">    createBiTree(&amp;tree);</span><br><span class="line">    LinkStack <span class="built_in">stack</span>;</span><br><span class="line">    initStack(&amp;<span class="built_in">stack</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"使用栈先序输出二叉树:\n"</span>);</span><br><span class="line">    traverseTree(tree, &amp;<span class="built_in">stack</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  初始化一个空栈</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">initStack</span><span class="params">(LinkStack *<span class="built_in">stack</span>)</span> </span>{</span><br><span class="line">    <span class="built_in">stack</span>-&gt;top = (SeqStack)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Stack));</span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">stack</span>-&gt;top) {</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">stack</span>-&gt;top = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="built_in">stack</span>-&gt;count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断栈是否为空</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">emptyStack</span><span class="params">(LinkStack *<span class="built_in">stack</span>)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">stack</span>-&gt;count == <span class="number">0</span>) {</span><br><span class="line">        result = <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 入栈操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">push</span><span class="params">(LinkStack *<span class="built_in">stack</span>, BiTree tree)</span> </span>{</span><br><span class="line">    SeqStack s = (SeqStack)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Stack));</span><br><span class="line">    s-&gt;node = tree;</span><br><span class="line">    s-&gt;next = <span class="built_in">stack</span>-&gt;top;<span class="comment">/* 把当前的栈顶元素赋值给新结点的直接后继，见图中① */</span></span><br><span class="line">    <span class="built_in">stack</span>-&gt;top = s;         <span class="comment">/* 将新的结点s赋值给栈顶指针，见图中② */</span></span><br><span class="line">    <span class="built_in">stack</span>-&gt;count++;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 出栈操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">BiTree <span class="title">pop</span><span class="params">(LinkStack *<span class="built_in">stack</span>)</span> </span>{</span><br><span class="line">    BiTree tree;</span><br><span class="line">    SeqStack p;</span><br><span class="line">    <span class="keyword">if</span> (emptyStack(<span class="built_in">stack</span>)) {</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    }</span><br><span class="line">    tree = <span class="built_in">stack</span>-&gt;top-&gt;node;</span><br><span class="line">    <span class="comment">/*将栈顶结点赋值给p*/</span></span><br><span class="line">    p = <span class="built_in">stack</span>-&gt;top;</span><br><span class="line">    <span class="comment">/*使得栈顶指针下移一位，指向后一结点*/</span></span><br><span class="line">    <span class="built_in">stack</span>-&gt;top = <span class="built_in">stack</span>-&gt;top-&gt;next;</span><br><span class="line">    <span class="comment">/* 释放结点p */</span></span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    <span class="built_in">stack</span>-&gt;count--;</span><br><span class="line">    <span class="keyword">return</span> tree;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createBiTree</span><span class="params">(BiTree *tree)</span> </span>{</span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    ch = getchar();</span><br><span class="line">    <span class="keyword">if</span>(ch == <span class="string">' '</span>) {</span><br><span class="line">        *tree = <span class="literal">NULL</span>;</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="comment">//生成一个新结点</span></span><br><span class="line">        *tree = (BiTree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));</span><br><span class="line">        (*tree)-&gt;data = ch;</span><br><span class="line">        <span class="comment">//生成左子树</span></span><br><span class="line">        createBiTree(&amp;((*tree)-&gt;LChild));</span><br><span class="line">        <span class="comment">//生成右子树</span></span><br><span class="line">        createBiTree(&amp;((*tree)-&gt;RChild));</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**遍历树的结点*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">traverseTree</span><span class="params">(BiTree tree, LinkStack *<span class="built_in">stack</span>)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(tree == <span class="literal">NULL</span>) {</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    BiTree root = tree;</span><br><span class="line">    push(<span class="built_in">stack</span>, root);</span><br><span class="line">    <span class="keyword">while</span> (!emptyStack(<span class="built_in">stack</span>)) {</span><br><span class="line">        root = pop(<span class="built_in">stack</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%c "</span>, root-&gt;data);</span><br><span class="line">        <span class="keyword">if</span> (root-&gt;RChild != <span class="literal">NULL</span>) {</span><br><span class="line">            push(<span class="built_in">stack</span>, root-&gt;RChild);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (root-&gt;LChild != <span class="literal">NULL</span>) {</span><br><span class="line">            push(<span class="built_in">stack</span>, root-&gt;LChild);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li></ul><h1 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a><strong>运行结果</strong></h1><p><img src="https://oscimg.oschina.net/oscnet/d243b5fc9314ff6c522c9a8a3f28ecbe1d2.jpg" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;&lt;strong&gt;问题描述&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;从键盘接受输入先序序列，以二叉链表作为存储结构，建立二叉树（以先序来建立）并对其进行先序遍历，然后将遍历结果打印输出。要求采用非递归方法实现。&lt;/p&gt;
&lt;h1 id=&quot;解题思路&quot;&gt;&lt;a href=&quot;#解题思路&quot; class=&quot;headerlink&quot; title=&quot;解题思路&quot;&gt;&lt;/a&gt;&lt;strong&gt;解题思路&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt; 使用栈中间存储树的结点&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构" scheme="https://niithub.cn/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="算法" scheme="https://niithub.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="二叉树" scheme="https://niithub.cn/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7虚拟机环境下配置无线上网</title>
    <link href="https://niithub.cn//posts/6bbe03e9/"/>
    <id>https://niithub.cn//posts/6bbe03e9/</id>
    <published>2019-05-17T08:17:00.000Z</published>
    <updated>2021-10-13T16:21:04.011Z</updated>
    
    <content type="html"><![CDATA[<h2 id="设备条件"><a href="#设备条件" class="headerlink" title="设备条件"></a>设备条件</h2><p>VMware 版本：VMware® Workstation 12 Pro</p><p>Linux 版本：CentOS-7-x86_64-DVD-1810</p><p>宿主机：Window10 Education版，无线网连接正常</p><h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><h3 id="打开虚拟网络编辑器"><a href="#打开虚拟网络编辑器" class="headerlink" title="打开虚拟网络编辑器"></a>打开虚拟网络编辑器</h3><p><img src="https://oscimg.oschina.net/oscnet/4cc22a537fca372f902aa00600cdaeeea74.jpg" alt=""><br><a id="more"></a></p><h3 id="点击-更改设置"><a href="#点击-更改设置" class="headerlink" title="点击  更改设置"></a>点击  更改设置</h3><p><img src="https://oscimg.oschina.net/oscnet/d128506a323c1cf7ef0fc4d804cdaabdad7.jpg" alt=""></p><h3 id="将VMnet0的类型设置为桥接模式，桥接到-自动"><a href="#将VMnet0的类型设置为桥接模式，桥接到-自动" class="headerlink" title="将VMnet0的类型设置为桥接模式，桥接到  自动"></a>将VMnet0的类型设置为桥接模式，桥接到  自动</h3><p><img src="https://oscimg.oschina.net/oscnet/727447dbe61f116b0f40af59bf7ecca6021.jpg" alt=""></p><h3 id="点选要设置网络连接的操作系统，更改网络适配器选项，改为桥接模式"><a href="#点选要设置网络连接的操作系统，更改网络适配器选项，改为桥接模式" class="headerlink" title="点选要设置网络连接的操作系统，更改网络适配器选项，改为桥接模式"></a>点选要设置网络连接的操作系统，更改网络适配器选项，改为桥接模式</h3><p><img src="https://oscimg.oschina.net/oscnet/d7462d9aff6bee382af41849e4aa0ff5ce0.jpg" alt=""></p><h3 id="启动虚拟机内的操作系统，连接到网络"><a href="#启动虚拟机内的操作系统，连接到网络" class="headerlink" title="启动虚拟机内的操作系统，连接到网络"></a>启动虚拟机内的操作系统，连接到网络</h3><p><img src="https://oscimg.oschina.net/oscnet/ee550c146c7092734dd55ac95546eaf6226.jpg" alt=""></p><h3 id="验证网络是否正常"><a href="#验证网络是否正常" class="headerlink" title="验证网络是否正常"></a>验证网络是否正常</h3><p><img src="https://oscimg.oschina.net/oscnet/0632cc0e978235ce3b48d25d89c11794c41.jpg" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;设备条件&quot;&gt;&lt;a href=&quot;#设备条件&quot; class=&quot;headerlink&quot; title=&quot;设备条件&quot;&gt;&lt;/a&gt;设备条件&lt;/h2&gt;&lt;p&gt;VMware 版本：VMware® Workstation 12 Pro&lt;/p&gt;
&lt;p&gt;Linux 版本：CentOS-7-x86_64-DVD-1810&lt;/p&gt;
&lt;p&gt;宿主机：Window10 Education版，无线网连接正常&lt;/p&gt;
&lt;h2 id=&quot;操作步骤&quot;&gt;&lt;a href=&quot;#操作步骤&quot; class=&quot;headerlink&quot; title=&quot;操作步骤&quot;&gt;&lt;/a&gt;操作步骤&lt;/h2&gt;&lt;h3 id=&quot;打开虚拟网络编辑器&quot;&gt;&lt;a href=&quot;#打开虚拟网络编辑器&quot; class=&quot;headerlink&quot; title=&quot;打开虚拟网络编辑器&quot;&gt;&lt;/a&gt;打开虚拟网络编辑器&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/4cc22a537fca372f902aa00600cdaeeea74.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="CentOS" scheme="https://niithub.cn/categories/CentOS/"/>
    
    
      <category term="CentOS" scheme="https://niithub.cn/tags/CentOS/"/>
    
      <category term="安装记录" scheme="https://niithub.cn/tags/%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>起步能力自测题-3 数组元素循环右移问题</title>
    <link href="https://niithub.cn//posts/45cb7ec1/"/>
    <id>https://niithub.cn//posts/45cb7ec1/</id>
    <published>2019-05-17T05:28:00.000Z</published>
    <updated>2021-10-13T16:21:04.011Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><strong>题目描述</strong></h3><p><img src="https://oscimg.oschina.net/oscnet/d3116c7eac4010bb1e83510f4cf67a269b2.jpg" alt=""></p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a><strong>输入格式</strong></h3><p>每个输入包含一个测试用例，第1行输入N（1≤N≤100）和M（≥0）；第2行输入N个整数，之间用空格分隔。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a><strong>输出格式</strong></h3><p>在一行中输出循环右移M位以后的整数序列，之间用空格分隔，序列结尾不能有多余空格。<br><a id="more"></a></p><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a><strong>输入样例</strong></h3><blockquote><p>6 2<br>1 2 3 4 5 6</p></blockquote><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a><strong>输出样例</strong></h3><blockquote><p>5 6 1 2 3 4</p></blockquote><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h3><ol><li>读入整数序列及偏移量</li><li>定义数组，填充整数序列</li><li>定义偏移函数，每次将数组向后移动一位，并将数组末位移动至数组头</li><li>根据偏移量，循环调用若干次偏移函数</li></ol><h3 id="程序实现"><a href="#程序实现" class="headerlink" title="程序实现"></a><strong>程序实现</strong></h3><ul><li><p>C</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">moveOneOffset</span><span class="params">(<span class="keyword">int</span> number, <span class="keyword">int</span> *zero)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,  <span class="keyword">char</span> *argv)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> number, offset;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;number, &amp;offset);</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">array</span>[<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">for</span>( i = <span class="number">0</span>; i &lt; number; i++) {</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;<span class="built_in">array</span>[i]);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span>( i = <span class="number">0</span>; i &lt; offset; i++) {</span><br><span class="line">        moveOneOffset(number, <span class="built_in">array</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span>( i = <span class="number">0</span>; i &lt; number; i++) {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>, <span class="built_in">array</span>[i]);</span><br><span class="line">        <span class="keyword">if</span> (i &lt; number - <span class="number">1</span>) {</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">moveOneOffset</span><span class="params">(<span class="keyword">int</span> number, <span class="keyword">int</span> *zero)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> temporary = <span class="number">0</span>;</span><br><span class="line">    temporary = *(zero + number - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> i = number - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &gt; <span class="number">0</span>) {</span><br><span class="line">        *(zero + i) = *(zero + i - <span class="number">1</span>);</span><br><span class="line">        i--;</span><br><span class="line">    }</span><br><span class="line">    *zero = temporary;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a><strong>运行结果</strong></h3><p><img src="https://oscimg.oschina.net/oscnet/9b1c34ea5b1d590a76832978d903b9b3457.jpg" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;&lt;strong&gt;题目描述&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/d3116c7eac4010bb1e83510f4cf67a269b2.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;输入格式&quot;&gt;&lt;a href=&quot;#输入格式&quot; class=&quot;headerlink&quot; title=&quot;输入格式&quot;&gt;&lt;/a&gt;&lt;strong&gt;输入格式&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;每个输入包含一个测试用例，第1行输入N（1≤N≤100）和M（≥0）；第2行输入N个整数，之间用空格分隔。&lt;/p&gt;
&lt;h3 id=&quot;输出格式&quot;&gt;&lt;a href=&quot;#输出格式&quot; class=&quot;headerlink&quot; title=&quot;输出格式&quot;&gt;&lt;/a&gt;&lt;strong&gt;输出格式&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;在一行中输出循环右移M位以后的整数序列，之间用空格分隔，序列结尾不能有多余空格。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="PAT" scheme="https://niithub.cn/categories/PAT/"/>
    
    
      <category term="PAT" scheme="https://niithub.cn/tags/PAT/"/>
    
      <category term="算法" scheme="https://niithub.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="基础题" scheme="https://niithub.cn/tags/%E5%9F%BA%E7%A1%80%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>起步能力自测题-2 素数对猜想</title>
    <link href="https://niithub.cn//posts/d490bba8/"/>
    <id>https://niithub.cn//posts/d490bba8/</id>
    <published>2019-05-17T05:22:00.000Z</published>
    <updated>2021-10-13T16:21:04.011Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h3><p><img src="https://oscimg.oschina.net/oscnet/f9d72583606c4456db6d09f2830a25c83a6.jpg" alt=""></p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a><strong>输入格式</strong></h3><p>输入在一行给出正整数<code>N</code>。<br><a id="more"></a></p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a><strong>输出格式</strong></h3><p>在一行中输出不超过<code>N</code>的满足猜想的素数对的个数。</p><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a><strong>输入样例:</strong></h3><pre><code>20</code></pre><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a><strong>输出样例:</strong></h3><pre><code>4</code></pre><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><ol><li>读入范围</li><li>循环遍历范围内的数，判断是否是素数，如果是素数，则存入数组</li><li>遍历素数数组，判断两素数之差是否为2，如果为2，计数加1</li><li>输出计数结果</li></ol><h3 id="程序实现"><a href="#程序实现" class="headerlink" title="程序实现"></a><strong>程序实现</strong></h3><ul><li><p>C</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">checkPrime</span><span class="params">(<span class="keyword">int</span> number)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,  <span class="keyword">char</span> *argv)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> number;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;number);</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">array</span>[<span class="number">10000</span>];</span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> *zero;</span><br><span class="line">    <span class="keyword">for</span>( i = <span class="number">2</span>; i &lt;= number; i++) {</span><br><span class="line">        <span class="keyword">if</span> (checkPrime(i)) {</span><br><span class="line">            <span class="built_in">array</span>[index] = i;</span><br><span class="line">            index++;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    zero = <span class="built_in">array</span>;</span><br><span class="line">    <span class="keyword">int</span> location = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (location = <span class="number">0</span>; location &lt; index+<span class="number">1</span>; location++) {</span><br><span class="line">        <span class="keyword">if</span>(*(zero + location + <span class="number">1</span>) - *(zero + location) == <span class="number">2</span>) {</span><br><span class="line">            sum++;</span><br><span class="line">        } </span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, sum);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">} </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">checkPrime</span><span class="params">(<span class="keyword">int</span> number)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">2</span>, result = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (i; i &lt;= <span class="built_in">sqrt</span>(number); i++) {</span><br><span class="line">        <span class="keyword">if</span> (number % i == <span class="number">0</span>) {</span><br><span class="line">            result = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">    } </span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a><strong>运行结果</strong></h3><p><img src="https://oscimg.oschina.net/oscnet/f764a346cfb345d2004a4b3915938086179.jpg" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;&lt;strong&gt;问题描述&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/f9d72583606c4456db6d09f2830a25c83a6.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;输入格式&quot;&gt;&lt;a href=&quot;#输入格式&quot; class=&quot;headerlink&quot; title=&quot;输入格式&quot;&gt;&lt;/a&gt;&lt;strong&gt;输入格式&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;输入在一行给出正整数&lt;code&gt;N&lt;/code&gt;。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="PAT" scheme="https://niithub.cn/categories/PAT/"/>
    
    
      <category term="PAT" scheme="https://niithub.cn/tags/PAT/"/>
    
      <category term="算法" scheme="https://niithub.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="基础题" scheme="https://niithub.cn/tags/%E5%9F%BA%E7%A1%80%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>起步能力自测题-1 打印沙漏</title>
    <link href="https://niithub.cn//posts/c54ee48/"/>
    <id>https://niithub.cn//posts/c54ee48/</id>
    <published>2019-05-17T05:09:00.000Z</published>
    <updated>2021-10-13T16:21:04.011Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>本题要求你写个程序把给定的符号打印成沙漏的形状。例如给定17个“*”，要求按下列格式打印</p><blockquote><p>*****<br> ***<br>  *<br> ***<br>*****</p></blockquote><p>所谓“沙漏形状”，是指每行输出奇数个符号；各行符号中心对齐；相邻两行符号数差2；符号数先从大到小顺序递减到1，再从小到大顺序递增；首尾符号数相等。</p><p>给定任意N个符号，不一定能正好组成一个沙漏。要求打印出的沙漏能用掉尽可能多的符号。<br><a id="more"></a></p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a><strong>输入格式</strong></h3><p>输入在一行给出1个正整数N（≤1000）和一个符号，中间以空格分隔。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a><strong>输出格式</strong></h3><p>首先打印出由给定符号组成的最大的沙漏形状，最后在一行中输出剩下没用掉的符号数。</p><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a><strong>输入样例</strong></h3><blockquote><p>19 *</p></blockquote><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a><strong>输出样例</strong></h3><blockquote><p>*****<br>  ***<br>  *<br>  ***<br>*****  </p></blockquote><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><ol><li>读入要打印的字符数，字符</li><li>计算出单向最大层数</li><li>定义宏函数，求解层数对应的字符数</li><li>遍历层数，并根据最大层数的字符数与当前层数的字符数之差，打印每层空格</li><li>打印根据层数计算出的对应字符次数</li><li>打印顺序为：<ol><li>最外层-&gt;1字符层-&gt;最外层</li></ol></li><li>打印剩余的字符数</li></ol><h3 id="程序实现"><a href="#程序实现" class="headerlink" title="程序实现"></a><strong>程序实现</strong></h3><ul><li><p>C</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SUM(number)  (3 + (number - 1) * 2)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printGraph</span><span class="params">(<span class="keyword">int</span> number, <span class="keyword">char</span> graph, <span class="keyword">int</span> count)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> number;</span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> div = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> graph;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %c"</span>, &amp;number, &amp;graph);</span><br><span class="line">    <span class="keyword">if</span>(number &lt; <span class="number">0</span> || number &gt; <span class="number">1000</span>) {</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">    div = (number<span class="number">-1</span>) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span>(sum &lt;= div) {</span><br><span class="line">        index++;</span><br><span class="line">        sum =  index * (index + <span class="number">2</span>);</span><br><span class="line">    }</span><br><span class="line">    index--;</span><br><span class="line">    sum = SUM(index);</span><br><span class="line">    <span class="keyword">for</span> (count = index; count &gt;= <span class="number">1</span>; count--) {</span><br><span class="line">        printGraph(count, graph, sum);</span><br><span class="line">    }</span><br><span class="line">    printGraph(<span class="number">0</span>, graph, sum);</span><br><span class="line">    <span class="keyword">for</span> (count = <span class="number">1</span>; count &lt;= index; count++) {</span><br><span class="line">        printGraph(count, graph, sum);</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, number - <span class="number">1</span> - index * (index +<span class="number">2</span> ) * <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printGraph</span><span class="params">(<span class="keyword">int</span> number, <span class="keyword">char</span> graph, <span class="keyword">int</span> sum)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> count = (sum - SUM(number)) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> kong = <span class="string">' '</span>;</span><br><span class="line">    <span class="keyword">for</span> (a = <span class="number">0</span>; a &lt; count; a++) {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%c"</span>, kong);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (index; index &lt; SUM(number); index++) {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%c"</span>, graph);</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a><strong>运行结果</strong></h3><p><img src="https://oscimg.oschina.net/oscnet/f08eee7f9c4e48c26c5a7bec024bd1644b5.jpg" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h3&gt;&lt;p&gt;本题要求你写个程序把给定的符号打印成沙漏的形状。例如给定17个“*”，要求按下列格式打印&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;*****&lt;br&gt; ***&lt;br&gt;  *&lt;br&gt; ***&lt;br&gt;*****&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所谓“沙漏形状”，是指每行输出奇数个符号；各行符号中心对齐；相邻两行符号数差2；符号数先从大到小顺序递减到1，再从小到大顺序递增；首尾符号数相等。&lt;/p&gt;
&lt;p&gt;给定任意N个符号，不一定能正好组成一个沙漏。要求打印出的沙漏能用掉尽可能多的符号。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="PAT" scheme="https://niithub.cn/categories/PAT/"/>
    
    
      <category term="PAT" scheme="https://niithub.cn/tags/PAT/"/>
    
      <category term="算法" scheme="https://niithub.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="基础题" scheme="https://niithub.cn/tags/%E5%9F%BA%E7%A1%80%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Git常用操作命令</title>
    <link href="https://niithub.cn//posts/656d75c5/"/>
    <id>https://niithub.cn//posts/656d75c5/</id>
    <published>2019-05-16T04:23:00.000Z</published>
    <updated>2021-10-13T16:21:04.011Z</updated>
    
    <content type="html"><![CDATA[<h1 id="打标签"><a href="#打标签" class="headerlink" title="打标签"></a>打标签</h1><ul><li><p>列显已有的标签</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git tag</span><br><span class="line">v0.1</span><br><span class="line">v1.3</span><br></pre></td></tr></tbody></table></figure></li><li><p>新建含附注的标签</p><p>  <code>-a （译注：取 annotated 的首字母）指定标签名字</code></p>  <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git tag -a v1.4 -m <span class="string">'my version 1.4'</span></span><br><span class="line">$ git tag</span><br><span class="line">v0.1</span><br><span class="line">v1.3</span><br><span class="line">v1.4</span><br></pre></td></tr></tbody></table></figure><a id="more"></a> </li><li><p>查看相应标签的版本信息</p>  <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ git show v1.4</span><br><span class="line">tag v1.4</span><br><span class="line">Tagger: Scott Chacon &lt;schacon@gee-mail.com&gt;</span><br><span class="line">Date:   Mon Feb 9 14:45:11 2009 -0800</span><br><span class="line"></span><br><span class="line">my version 1.4</span><br><span class="line"></span><br><span class="line">commit 15027957951b64cf874c3557a0f3547bd83b3ff6</span><br><span class="line">Merge: 4a447f7... a6b4c97...</span><br><span class="line">Author: Scott Chacon &lt;schacon@gee-mail.com&gt;</span><br><span class="line">Date:   Sun Feb 8 19:02:46 2009 -0800</span><br><span class="line"></span><br><span class="line">    Merge branch <span class="string">'experiment'</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>分享标签</p><p>  git push 并不会把标签传送到远端服务器上，只有通过显式命令才能分享标签到远端仓库。其命令格式如同推送分支，运行 git push origin [tagname] 即可</p>  <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> &nbsp;$ git push origin v1.5</span><br><span class="line">Counting objects: 50, <span class="keyword">done</span>.</span><br><span class="line">Compressing objects: 100% (38/38), <span class="keyword">done</span>.</span><br><span class="line">Writing objects: 100% (44/44), 4.56 KiB, <span class="keyword">done</span>.</span><br><span class="line">Total 44 (delta 18), reused 8 (delta 1)</span><br><span class="line">To git@github.com:schacon/simplegit.git</span><br><span class="line">* [new tag]         v1.5 -&gt; v1.5</span><br></pre></td></tr></tbody></table></figure></li></ul><h1 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h1><ul><li><p>查看本地所有分支</p>  <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></tbody></table></figure></li></ul><ul><li><p>切换分支</p>  <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br></pre></td></tr></tbody></table></figure></li><li><p>强制切换分支</p>  <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -f master</span><br></pre></td></tr></tbody></table></figure></li><li><p>拉取远程新分支</p>  <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch origin 远程分支名:本地分支名</span><br></pre></td></tr></tbody></table></figure></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;打标签&quot;&gt;&lt;a href=&quot;#打标签&quot; class=&quot;headerlink&quot; title=&quot;打标签&quot;&gt;&lt;/a&gt;打标签&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;列显已有的标签&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ git tag&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;v0.1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;v1.3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;新建含附注的标签&lt;/p&gt;
&lt;p&gt;  &lt;code&gt;-a （译注：取 annotated 的首字母）指定标签名字&lt;/code&gt;&lt;/p&gt;
  &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ git tag -a v1.4 -m &lt;span class=&quot;string&quot;&gt;&#39;my version 1.4&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ git tag&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;v0.1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;v1.3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;v1.4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
      <category term="命令记录" scheme="https://niithub.cn/categories/%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="git" scheme="https://niithub.cn/tags/git/"/>
    
      <category term="常用命令" scheme="https://niithub.cn/tags/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>递归实现先序遍历二叉树</title>
    <link href="https://niithub.cn//posts/f2a970c3/"/>
    <id>https://niithub.cn//posts/f2a970c3/</id>
    <published>2019-05-15T11:00:00.000Z</published>
    <updated>2021-10-13T16:21:04.013Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h1><p>从键盘接受输入先序序列，以二叉链表作为存储结构，建立二叉树（以先序来建立）并对其进行先序遍历，然后将遍历结果打印输出。要求采用递归方法实现。</p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路   "></a><strong>解题思路   </strong></h1><p> 递归实现<br> <a id="more"></a></p><h1 id="程序实现"><a href="#程序实现" class="headerlink" title="程序实现"></a><strong>程序实现</strong></h1><ul><li><p>CPP</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span>  <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>  <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> Datatype;</span><br><span class="line"><span class="comment">// 二叉树</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> {</span></span><br><span class="line">    Datatype data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">LChild</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">RChild</span>;</span></span><br><span class="line">} BiTNode, *BiTree;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createBiTree</span><span class="params">(BiTree *tree)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">traverseTree</span><span class="params">(BiTree tree)</span></span>; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>{</span><br><span class="line">    BiTree tree;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"按先序遍历序列建立二叉树:\n"</span>);</span><br><span class="line">    createBiTree(&amp;tree);</span><br><span class="line">    traverseTree(tree);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createBiTree</span><span class="params">(BiTree *tree)</span> </span>{</span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    ch = getchar();</span><br><span class="line">    <span class="keyword">if</span>(ch == <span class="string">' '</span>) {</span><br><span class="line">        *tree = <span class="literal">NULL</span>;</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="comment">//生成一个新结点</span></span><br><span class="line">        *tree = (BiTree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));</span><br><span class="line">        (*tree)-&gt;data = ch;</span><br><span class="line">        <span class="comment">//生成左子树</span></span><br><span class="line">        createBiTree(&amp;((*tree)-&gt;LChild));</span><br><span class="line">        <span class="comment">//生成右子树</span></span><br><span class="line">        createBiTree(&amp;((*tree)-&gt;RChild));</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 遍历树的结点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">traverseTree</span><span class="params">(BiTree tree)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">if</span>(tree == <span class="literal">NULL</span>) {</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%c"</span>, tree-&gt;data);</span><br><span class="line">    traverseTree(tree-&gt;LChild);</span><br><span class="line">    traverseTree(tree-&gt;RChild);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><h1 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a><strong>运行结果</strong></h1><p><img src="https://oscimg.oschina.net/oscnet/5a3a6e2b5aa82971f6e68a1c2366cbca427.jpg" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;&lt;strong&gt;问题描述&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;从键盘接受输入先序序列，以二叉链表作为存储结构，建立二叉树（以先序来建立）并对其进行先序遍历，然后将遍历结果打印输出。要求采用递归方法实现。&lt;/p&gt;
&lt;h1 id=&quot;解题思路&quot;&gt;&lt;a href=&quot;#解题思路&quot; class=&quot;headerlink&quot; title=&quot;解题思路   &quot;&gt;&lt;/a&gt;&lt;strong&gt;解题思路   &lt;/strong&gt;&lt;/h1&gt;&lt;p&gt; 递归实现&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构" scheme="https://niithub.cn/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="二叉树" scheme="https://niithub.cn/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
      <category term="递归" scheme="https://niithub.cn/tags/%E9%80%92%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>递归实现后序遍历二叉树</title>
    <link href="https://niithub.cn//posts/a43900ea/"/>
    <id>https://niithub.cn//posts/a43900ea/</id>
    <published>2019-05-15T10:58:00.000Z</published>
    <updated>2021-10-13T16:21:04.013Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h1><p>从键盘接受输入先序序列，以二叉链表作为存储结构，建立二叉树（以先序来建立）并对其进行中序遍历，然后将遍历结果打印输出。要求采用递归方法实现。</p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路   "></a><strong>解题思路   </strong></h1><p>递归实现<br><a id="more"></a></p><h1 id="程序实现"><a href="#程序实现" class="headerlink" title="程序实现"></a><strong>程序实现</strong></h1><ul><li>CPP<figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> Datatype;</span><br><span class="line"><span class="comment">/*二叉树*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> {</span></span><br><span class="line">    Datatype data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">LChild</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">RChild</span>;</span></span><br><span class="line">} BiTNode, *BiTree;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createBiTree</span><span class="params">(BiTree *tree)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">traverseTree</span><span class="params">(BiTree tree)</span></span>; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>{</span><br><span class="line">    BiTree tree;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"按先序遍历序列建立二叉树:\n"</span>);</span><br><span class="line">    createBiTree(&amp;tree);</span><br><span class="line">    traverseTree(tree);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createBiTree</span><span class="params">(BiTree *tree)</span> </span>{</span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    ch = getchar();</span><br><span class="line">    <span class="keyword">if</span>(ch == <span class="string">' '</span>) {</span><br><span class="line">        *tree = <span class="literal">NULL</span>;</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="comment">//生成一个新结点</span></span><br><span class="line">        *tree = (BiTree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));</span><br><span class="line">        (*tree)-&gt;data = ch;</span><br><span class="line">        <span class="comment">//生成左子树</span></span><br><span class="line">        createBiTree(&amp;((*tree)-&gt;LChild));</span><br><span class="line">        <span class="comment">//生成右子树</span></span><br><span class="line">        createBiTree(&amp;((*tree)-&gt;RChild));</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="comment">/**遍历树的结点*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">traverseTree</span><span class="params">(BiTree tree)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">if</span>(tree == <span class="literal">NULL</span>) {</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    traverseTree(tree-&gt;LChild);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%c"</span>, tree-&gt;data);</span><br><span class="line">    traverseTree(tree-&gt;RChild);</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li></ul><h1 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a><strong>运行结果</strong></h1><p><img src="https://oscimg.oschina.net/oscnet/47b1c52ca3bc8e1d02e0b5a12e29d4e3de6.jpg" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;&lt;strong&gt;问题描述&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;从键盘接受输入先序序列，以二叉链表作为存储结构，建立二叉树（以先序来建立）并对其进行中序遍历，然后将遍历结果打印输出。要求采用递归方法实现。&lt;/p&gt;
&lt;h1 id=&quot;解题思路&quot;&gt;&lt;a href=&quot;#解题思路&quot; class=&quot;headerlink&quot; title=&quot;解题思路   &quot;&gt;&lt;/a&gt;&lt;strong&gt;解题思路   &lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;递归实现&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构" scheme="https://niithub.cn/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="二叉树" scheme="https://niithub.cn/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
      <category term="递归" scheme="https://niithub.cn/tags/%E9%80%92%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>使用邻接矩阵存储无向图</title>
    <link href="https://niithub.cn//posts/5bf8c406/"/>
    <id>https://niithub.cn//posts/5bf8c406/</id>
    <published>2019-05-15T10:52:00.000Z</published>
    <updated>2021-10-13T16:21:04.011Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h1><p> 使用邻接矩阵存储下图所示无向图</p><p><strong>    <img src="https://oscimg.oschina.net/oscnet/d91273ff377e75ed1521303d0a8d51f46d8.jpg" alt=""></strong></p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h1><p>创建一个邻接矩阵</p><a id="more"></a><h1 id="程序实现"><a href="#程序实现" class="headerlink" title="程序实现"></a><strong>程序实现</strong></h1><ul><li><p>CPP</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXVEX 10</span></span><br><span class="line"><span class="comment">/* Status是函数的类型,其值是函数结果状态代码，如OK等 */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;</span><br><span class="line"><span class="comment">/* 顶点类型应由用户定义  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> VertexType;</span><br><span class="line"><span class="comment">/* 边上的权值类型应由用户定义 */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> EdgeType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> {</span></span><br><span class="line">    VertexType vex[MAXVEX];</span><br><span class="line">    EdgeType arc[MAXVEX][MAXVEX];</span><br><span class="line">    <span class="keyword">int</span> numNodes, numEdges;</span><br><span class="line">} MyGraph, *GraphPlus;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateMyGraph</span><span class="params">(GraphPlus *plus)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    GraphPlus plus;</span><br><span class="line">    CreateMyGraph(&amp;plus);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; plus-&gt;numNodes; i++) {</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; plus-&gt;numNodes; j++) {</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\t"</span>, plus-&gt;arc[i][j]);</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateMyGraph</span><span class="params">(GraphPlus *plus)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> i, j, k, w;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入顶点数和边数:\n"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d,%d"</span>, &amp;i, &amp;j);</span><br><span class="line">    *plus = (GraphPlus)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(MyGraph));</span><br><span class="line">    getchar();</span><br><span class="line">    (*plus)-&gt;numNodes = i;</span><br><span class="line">    (*plus)-&gt;numEdges = j;</span><br><span class="line">    <span class="comment">// 读入顶点数</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; (*plus)-&gt;numNodes; i++) {</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%c"</span>, &amp;(*plus)-&gt;vex[i]);</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 初始化边数组</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; (*plus)-&gt;numNodes; i++) {</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; (*plus)-&gt;numNodes; j++) {</span><br><span class="line">            (*plus)-&gt;arc[i][j]=<span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 读入numEdges条边，建立邻接矩阵</span></span><br><span class="line">    <span class="keyword">for</span>(k = <span class="number">0</span>; k &lt; (*plus)-&gt;numEdges; k++) {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"输入边(vi,vj)上的下标i，下标j:\n"</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d,%d"</span>, &amp;i, &amp;j);</span><br><span class="line">        (*plus)-&gt;arc[i][j] = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 因为是无向图，矩阵对称</span></span><br><span class="line">        (*plus)-&gt;arc[j][i] = (*plus)-&gt;arc[i][j];</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><h1 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a><strong>运行结果</strong></h1><p><img src="https://oscimg.oschina.net/oscnet/46c002372000e630ccee951b92dca43dae0.jpg" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;&lt;strong&gt;问题描述&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt; 使用邻接矩阵存储下图所示无向图&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;    &lt;img src=&quot;https://oscimg.oschina.net/oscnet/d91273ff377e75ed1521303d0a8d51f46d8.jpg&quot; alt=&quot;&quot;&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&quot;解题思路&quot;&gt;&lt;a href=&quot;#解题思路&quot; class=&quot;headerlink&quot; title=&quot;解题思路&quot;&gt;&lt;/a&gt;&lt;strong&gt;解题思路&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;创建一个邻接矩阵&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构" scheme="https://niithub.cn/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="https://niithub.cn/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="无向图" scheme="https://niithub.cn/tags/%E6%97%A0%E5%90%91%E5%9B%BE/"/>
    
      <category term="邻接矩阵" scheme="https://niithub.cn/tags/%E9%82%BB%E6%8E%A5%E7%9F%A9%E9%98%B5/"/>
    
  </entry>
  
  <entry>
    <title>使用邻接表存储无向图</title>
    <link href="https://niithub.cn//posts/d8bdf311/"/>
    <id>https://niithub.cn//posts/d8bdf311/</id>
    <published>2019-05-15T10:41:00.000Z</published>
    <updated>2021-10-13T16:21:04.011Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h1><p> 使用邻接表存储下图所示无向图</p><p><strong>    <img src="https://oscimg.oschina.net/oscnet/d91273ff377e75ed1521303d0a8d51f46d8.jpg" alt=""></strong></p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h1><p>创建一个邻接表接受无向图信息<br><a id="more"></a></p><h1 id="程序实现"><a href="#程序实现" class="headerlink" title="程序实现"></a><strong>程序实现</strong></h1><ul><li><p>CPP</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXVEX 10</span></span><br><span class="line"><span class="comment">/* Status是函数的类型,其值是函数结果状态代码，如OK等 */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;</span><br><span class="line"><span class="comment">/* 顶点类型应由用户定义  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> VertexType;</span><br><span class="line"><span class="comment">/* 边上的权值类型应由用户定义 */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> EdgeType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">EdgeNode</span> {</span></span><br><span class="line">    <span class="comment">// 邻接点域,存储该顶点对应的下标</span></span><br><span class="line">    <span class="keyword">int</span> adjvex;</span><br><span class="line">    <span class="comment">// 链域,指向下一个邻接点</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">EdgeNode</span> *<span class="title">next</span>;</span></span><br><span class="line">} EdgeNode;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 顶点表结点</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">VertexNode</span> {</span></span><br><span class="line">    <span class="comment">// 顶点域,存储顶点信息</span></span><br><span class="line">    VertexType data;</span><br><span class="line">    <span class="comment">// 边表头指针</span></span><br><span class="line">    EdgeNode *firstedge;</span><br><span class="line">} VertexNode, AdjList[MAXVEX];</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> {</span></span><br><span class="line">    AdjList adjList;</span><br><span class="line">    <span class="comment">// 图中当前顶点数和边数</span></span><br><span class="line">    <span class="keyword">int</span> numNodes;</span><br><span class="line">    <span class="keyword">int</span> numEdges;</span><br><span class="line">} GraphAdjList, *GraphList;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateMyGraph</span><span class="params">(GraphList *plus)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    GraphList plus;</span><br><span class="line">    CreateMyGraph(&amp;plus);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; plus-&gt;numNodes; i++) {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%c:\t"</span>, plus-&gt;adjList[i].data);</span><br><span class="line">        EdgeNode *e;</span><br><span class="line">        e = plus-&gt;adjList[i].firstedge;</span><br><span class="line">        <span class="keyword">while</span> (e != <span class="literal">NULL</span>) {</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%c\t"</span>, plus-&gt;adjList[e-&gt;adjvex].data);</span><br><span class="line">            e = e-&gt;next;</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">free</span>(e);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateMyGraph</span><span class="params">(GraphList *plus)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> i, j, k, w;</span><br><span class="line">    EdgeNode *e;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入顶点数和边数:\n"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d,%d"</span>, &amp;i, &amp;j);</span><br><span class="line">    *plus = (GraphList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(GraphAdjList));</span><br><span class="line">    getchar();</span><br><span class="line">    (*plus)-&gt;numNodes = i;</span><br><span class="line">    (*plus)-&gt;numEdges = j;</span><br><span class="line">    <span class="comment">// 读入顶点数</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; (*plus)-&gt;numNodes; i++) {</span><br><span class="line">        <span class="comment">// 输入顶点信息</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%c"</span>, &amp;(*plus)-&gt;adjList[i].data);</span><br><span class="line">        <span class="comment">// 将边表置为空表</span></span><br><span class="line">        (*plus)-&gt;adjList[i].firstedge=<span class="literal">NULL</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读入numEdges条边，建立邻接矩阵</span></span><br><span class="line">    <span class="keyword">for</span>(k = <span class="number">0</span>; k &lt; (*plus)-&gt;numEdges; k++) {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"输入边(vi,vj)上的下标i,下标j:\n"</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d,%d"</span>, &amp;i, &amp;j);</span><br><span class="line">        <span class="comment">// 向内存申请空间,生成边表结点</span></span><br><span class="line">        e = (EdgeNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(EdgeNode));</span><br><span class="line">        <span class="comment">// 邻接序号为j</span></span><br><span class="line">        e-&gt;adjvex = j;</span><br><span class="line">        <span class="comment">// 将e的指针指向当前顶点上指向的结点</span></span><br><span class="line">        e-&gt;next = (*plus)-&gt;adjList[i].firstedge;</span><br><span class="line">        <span class="comment">// 将当前顶点的指针指向e</span></span><br><span class="line">        (*plus)-&gt;adjList[i].firstedge = e;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 因为是无向图，所以需对称存储</span></span><br><span class="line">        <span class="comment">// 向内存申请空间,生成边表结点</span></span><br><span class="line">        e=(EdgeNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(EdgeNode));</span><br><span class="line">        <span class="comment">// 邻接序号为i</span></span><br><span class="line">        e-&gt;adjvex=i;</span><br><span class="line">        <span class="comment">// 将e的指针指向当前顶点上指向的结点</span></span><br><span class="line">        e-&gt;next= (*plus)-&gt;adjList[j].firstedge;</span><br><span class="line">        <span class="comment">// 将当前顶点的指针指向e</span></span><br><span class="line">        (*plus)-&gt;adjList[j].firstedge=e;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><h1 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a><strong>运行结果</strong></h1><p><strong><img src="https://oscimg.oschina.net/oscnet/050980bccc5c6f7b5fa3c9ea88a63d52a4d.jpg" alt=""></strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;&lt;strong&gt;问题描述&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt; 使用邻接表存储下图所示无向图&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;    &lt;img src=&quot;https://oscimg.oschina.net/oscnet/d91273ff377e75ed1521303d0a8d51f46d8.jpg&quot; alt=&quot;&quot;&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&quot;解题思路&quot;&gt;&lt;a href=&quot;#解题思路&quot; class=&quot;headerlink&quot; title=&quot;解题思路&quot;&gt;&lt;/a&gt;&lt;strong&gt;解题思路&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;创建一个邻接表接受无向图信息&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构" scheme="https://niithub.cn/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="https://niithub.cn/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="无向图" scheme="https://niithub.cn/tags/%E6%97%A0%E5%90%91%E5%9B%BE/"/>
    
      <category term="邻接表" scheme="https://niithub.cn/tags/%E9%82%BB%E6%8E%A5%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用命令</title>
    <link href="https://niithub.cn//posts/d0edc1ed/"/>
    <id>https://niithub.cn//posts/d0edc1ed/</id>
    <published>2019-05-15T10:29:00.000Z</published>
    <updated>2021-10-14T15:50:11.520Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h1><h2 id="查看IP"><a href="#查看IP" class="headerlink" title="查看IP"></a>查看IP</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip address show</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="登陆"><a href="#登陆" class="headerlink" title="登陆"></a>登陆</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh name@address</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="后台运行进程"><a href="#后台运行进程" class="headerlink" title="后台运行进程"></a>后台运行进程</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell &amp;</span><br></pre></td></tr></tbody></table></figure><a id="more"></a><hr><h2 id="修改文件夹的所有者"><a href="#修改文件夹的所有者" class="headerlink" title="修改文件夹的所有者"></a>修改文件夹的所有者</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chown [-cfhvR] [--<span class="built_in">help</span>] [--version] user[:group] file...</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><ul><li>user : 新的文件拥有者的使用者</li><li>group : 新的文件拥有者的使用者组(group)</li><li>c : 显示更改的部分的信息</li><li>f : 忽略错误信息</li><li>h :修复符号链接</li><li>v : 显示详细的处理信息</li><li>R : 处理指定目录以及其子目录下的所有文件</li><li>help : 显示辅助说明</li><li>version : 显示版本</li></ul><p>示例</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown -R user:userGroup *</span><br></pre></td></tr></tbody></table></figure><p>将目前目录下的所有文件与子目录的拥有者皆设为 user，所属群组是 userGroup</p><hr><h1 id="用户及用户组"><a href="#用户及用户组" class="headerlink" title="用户及用户组"></a>用户及用户组</h1><h2 id="基础操作-1"><a href="#基础操作-1" class="headerlink" title="基础操作"></a>基础操作</h2><ul><li><p>创建用户</p>  <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd username    </span><br></pre></td></tr></tbody></table></figure></li></ul><hr><ul><li><p>设置密码</p>  <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd username</span><br></pre></td></tr></tbody></table></figure></li></ul><hr><h1 id="FTP相关操作"><a href="#FTP相关操作" class="headerlink" title="FTP相关操作"></a>FTP相关操作</h1><h2 id="基础操作-2"><a href="#基础操作-2" class="headerlink" title="基础操作"></a>基础操作</h2><ul><li><p>启用FTP服务</p>  <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service vsftpd start</span><br></pre></td></tr></tbody></table></figure></li></ul><hr><ul><li><p>访问FTP命令</p>  <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ftp IP地址 username password</span><br></pre></td></tr></tbody></table></figure></li></ul><hr><ul><li><p>上传文件</p>  <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">put  文件名（带路径）</span><br></pre></td></tr></tbody></table></figure></li></ul><hr><ul><li><p>下载文件</p>  <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get 文件名 下载到本地路径\文件名</span><br></pre></td></tr></tbody></table></figure></li></ul><hr><h1 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h1><h2 id="定时器基本操作"><a href="#定时器基本操作" class="headerlink" title="定时器基本操作"></a>定时器基本操作</h2><ul><li>crontab时间表达式  <figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span>　　<span class="emphasis">*　　*</span>　　<span class="emphasis">*　　*</span>　　command</span><br><span class="line">分　时　日　月　周　命令</span><br></pre></td></tr></tbody></table></figure><img src="https://images2018.cnblogs.com/blog/733392/201805/733392-20180530112549735-793099971.png" alt=""></li><li><p>启动服务</p>  <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service crond start</span><br></pre></td></tr></tbody></table></figure></li><li><p>查看crontab服务状态</p>  <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service crond status</span><br></pre></td></tr></tbody></table></figure></li><li><p>关闭服务</p>  <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service crond stop</span><br></pre></td></tr></tbody></table></figure></li><li><p>重启服务</p>  <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service crond restart</span><br></pre></td></tr></tbody></table></figure></li><li><p>重新载入配置</p>  <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service crond reload</span><br></pre></td></tr></tbody></table></figure></li><li><p>查看crontab服务是否已设置为开机启动，执行命令</p>  <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ntsysv</span><br></pre></td></tr></tbody></table></figure></li><li><p>加入开机自动启动</p>  <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chkconfig –level 35 crond on</span><br></pre></td></tr></tbody></table></figure></li></ul><h2 id="设置定时任务"><a href="#设置定时任务" class="headerlink" title="设置定时任务"></a>设置定时任务</h2><ul><li><p>追加定时任务</p>  <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  [root@root <span class="built_in">test</span>]<span class="comment"># crontab -e</span></span><br><span class="line">00 02 * * * sh /home/admin/optbash/dailyBackup.sh</span><br><span class="line">00 02 * * * sh /home/admin/optbash/deleteDebugSql.sh</span><br><span class="line">\*  *  * * * sh /home/admin/<span class="built_in">test</span>/test.sh</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><ul><li>查看定时任务</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab -l</span><br></pre></td></tr></tbody></table></figure></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;基础操作&quot;&gt;&lt;a href=&quot;#基础操作&quot; class=&quot;headerlink&quot; title=&quot;基础操作&quot;&gt;&lt;/a&gt;基础操作&lt;/h1&gt;&lt;h2 id=&quot;查看IP&quot;&gt;&lt;a href=&quot;#查看IP&quot; class=&quot;headerlink&quot; title=&quot;查看IP&quot;&gt;&lt;/a&gt;查看IP&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ip address show&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;h2 id=&quot;登陆&quot;&gt;&lt;a href=&quot;#登陆&quot; class=&quot;headerlink&quot; title=&quot;登陆&quot;&gt;&lt;/a&gt;登陆&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ssh name@address&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;h2 id=&quot;后台运行进程&quot;&gt;&lt;a href=&quot;#后台运行进程&quot; class=&quot;headerlink&quot; title=&quot;后台运行进程&quot;&gt;&lt;/a&gt;后台运行进程&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;shell &amp;amp;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://niithub.cn/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://niithub.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>深度优先搜索邻接表存储结构下的无向图</title>
    <link href="https://niithub.cn//posts/84ed6062/"/>
    <id>https://niithub.cn//posts/84ed6062/</id>
    <published>2019-05-14T05:30:00.000Z</published>
    <updated>2021-10-13T16:21:04.011Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h1><p> 使用邻接表存储下图所示无向图，使用<strong>深度优先搜索</strong>遍历无向图上的各节点</p><p><strong>    <img src="https://oscimg.oschina.net/oscnet/d91273ff377e75ed1521303d0a8d51f46d8.jpg" alt=""></strong></p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h1><p>1、创建一个邻接表接受无向图信息<br><a id="more"></a></p><h1 id="程序实现"><a href="#程序实现" class="headerlink" title="程序实现"></a><strong>程序实现</strong></h1><ul><li>C</li></ul><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXVEX 10</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TRUE 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FALSE 0</span></span><br><span class="line"><span class="comment">/* Status是函数的类型,其值是函数结果状态代码，如OK等 */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;</span><br><span class="line"><span class="comment">/* 顶点类型应由用户定义  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> VertexType;</span><br><span class="line"><span class="comment">/* 边上的权值类型应由用户定义 */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> EdgeType;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 邻接表的数据结构 */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">EdgeNode</span> {</span></span><br><span class="line"><span class="comment">// 邻接点域,存储该顶点对应的下标</span></span><br><span class="line"><span class="keyword">int</span> adjvex;</span><br><span class="line"><span class="comment">// 链域,指向下一个邻接点</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">EdgeNode</span> *<span class="title">next</span>;</span></span><br><span class="line">} EdgeNode;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 顶点表结点</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">VertexNode</span> {</span></span><br><span class="line"><span class="comment">// 顶点域,存储顶点信息</span></span><br><span class="line">VertexType data;</span><br><span class="line"><span class="comment">// 边表头指针</span></span><br><span class="line">EdgeNode *firstedge;</span><br><span class="line">} VertexNode, AdjList[MAXVEX];</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> {</span></span><br><span class="line">AdjList adjList;</span><br><span class="line"><span class="comment">// 图中顶点数</span></span><br><span class="line"><span class="keyword">int</span> numNodes;</span><br><span class="line"><span class="comment">// 图中边数</span></span><br><span class="line"><span class="keyword">int</span> numEdges;</span><br><span class="line">} GraphAdjList, *GraphList;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createMyGraph</span><span class="params">(GraphList *plus)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(GraphList plus, <span class="keyword">int</span> i)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFSTraverse</span><span class="params">(GraphList plus)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>{</span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line">GraphList plus;</span><br><span class="line">createMyGraph(&amp;plus);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; plus-&gt;numNodes; i++) {</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c:\t"</span>, plus-&gt;adjList[i].data);</span><br><span class="line">EdgeNode *e;</span><br><span class="line">e = plus-&gt;adjList[i].firstedge;</span><br><span class="line"><span class="keyword">while</span> (e != <span class="literal">NULL</span>) {</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c\t"</span>, plus-&gt;adjList[e-&gt;adjvex].data);</span><br><span class="line">e = e-&gt;next;</span><br><span class="line">}</span><br><span class="line"><span class="built_in">free</span>(e); </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n深度优先搜素：\n"</span>);</span><br><span class="line">DFSTraverse(plus); </span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建无向图</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createMyGraph</span><span class="params">(GraphList *plus)</span> </span>{</span><br><span class="line"><span class="keyword">int</span> i, j, k, w;</span><br><span class="line">EdgeNode *e;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请输入顶点数和边数:\n"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d,%d"</span>, &amp;i, &amp;j);</span><br><span class="line">*plus = (GraphList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(GraphAdjList));</span><br><span class="line">getchar();</span><br><span class="line">(*plus)-&gt;numNodes = i;</span><br><span class="line">(*plus)-&gt;numEdges = j;</span><br><span class="line"><span class="comment">// 读入顶点数</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; (*plus)-&gt;numNodes; i++) {</span><br><span class="line"><span class="comment">// 输入顶点信息</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%c"</span>, &amp;(*plus)-&gt;adjList[i].data);</span><br><span class="line"><span class="comment">// 将边表置为空表</span></span><br><span class="line">(*plus)-&gt;adjList[i].firstedge=<span class="literal">NULL</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读入numEdges条边，建立邻接矩阵</span></span><br><span class="line"><span class="keyword">for</span>(k = <span class="number">0</span>; k &lt; (*plus)-&gt;numEdges; k++) {</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"输入边(vi,vj)上的下标i,下标j:\n"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d,%d"</span>, &amp;i, &amp;j);</span><br><span class="line"><span class="comment">// 向内存申请空间,生成边表结点</span></span><br><span class="line">e = (EdgeNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(EdgeNode));</span><br><span class="line"><span class="comment">// 邻接序号为j</span></span><br><span class="line">e-&gt;adjvex = j;</span><br><span class="line"><span class="comment">// 将e的指针指向当前顶点上指向的结点</span></span><br><span class="line">e-&gt;next = (*plus)-&gt;adjList[i].firstedge;</span><br><span class="line"><span class="comment">// 将当前顶点的指针指向e</span></span><br><span class="line">(*plus)-&gt;adjList[i].firstedge = e;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 因为是无向图，所以需对称存储</span></span><br><span class="line"><span class="comment">// 向内存申请空间,生成边表结点</span></span><br><span class="line">e=(EdgeNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(EdgeNode));</span><br><span class="line"><span class="comment">// 邻接序号为i</span></span><br><span class="line">e-&gt;adjvex=i;</span><br><span class="line"><span class="comment">// 将e的指针指向当前顶点上指向的结点</span></span><br><span class="line">e-&gt;next= (*plus)-&gt;adjList[j].firstedge;</span><br><span class="line"><span class="comment">// 将当前顶点的指针指向e</span></span><br><span class="line">(*plus)-&gt;adjList[j].firstedge=e;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问标志的数组</span></span><br><span class="line"><span class="keyword">int</span> visited[MAXVEX];</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 邻接表的深度优先搜索操作 </span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(GraphList plus, <span class="keyword">int</span> i)</span> </span>{</span><br><span class="line">EdgeNode *p;</span><br><span class="line">visited[i] = TRUE;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c "</span>,plus-&gt;adjList[i].data);</span><br><span class="line">p = plus-&gt;adjList[i].firstedge;</span><br><span class="line"><span class="keyword">while</span>(p) {</span><br><span class="line"><span class="keyword">if</span>(!visited[p-&gt;adjvex]) {</span><br><span class="line"><span class="comment">// 对为访问的邻接顶点递归调用 </span></span><br><span class="line">DFS(plus, p-&gt;adjvex);</span><br><span class="line">}</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFSTraverse</span><span class="params">(GraphList plus)</span> </span>{</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="comment">// 初始所有顶点状态都是未访问过状态</span></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; plus-&gt;numNodes; i++) {</span><br><span class="line">visited[i] = FALSE;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; plus-&gt;numNodes; i++) {</span><br><span class="line"><span class="comment">// 对未访问过的顶点调用DFS,若是连通图,只会执行一次</span></span><br><span class="line"><span class="keyword">if</span>(!visited[i])  {</span><br><span class="line">DFS(plus, i);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a><strong>运行结果</strong></h1><p><strong><img src="https://oscimg.oschina.net/oscnet/00f1a20419b353a199ef2b116cbb6f860ad.jpg" alt=""></strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;&lt;strong&gt;问题描述&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt; 使用邻接表存储下图所示无向图，使用&lt;strong&gt;深度优先搜索&lt;/strong&gt;遍历无向图上的各节点&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;    &lt;img src=&quot;https://oscimg.oschina.net/oscnet/d91273ff377e75ed1521303d0a8d51f46d8.jpg&quot; alt=&quot;&quot;&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&quot;解题思路&quot;&gt;&lt;a href=&quot;#解题思路&quot; class=&quot;headerlink&quot; title=&quot;解题思路&quot;&gt;&lt;/a&gt;&lt;strong&gt;解题思路&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;1、创建一个邻接表接受无向图信息&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构" scheme="https://niithub.cn/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="https://niithub.cn/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>广度优先搜索邻接表存储结构下的无向图</title>
    <link href="https://niithub.cn//posts/0/"/>
    <id>https://niithub.cn//posts/0/</id>
    <published>2019-05-14T05:17:00.000Z</published>
    <updated>2021-10-13T16:21:04.011Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h1><p>使用邻接表存储下图所示无向图，使用<strong>广度优先搜索</strong>遍历无向图上的各节点</p><p><strong>    <img src="https://oscimg.oschina.net/oscnet/d91273ff377e75ed1521303d0a8d51f46d8.jpg" alt=""></strong></p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h1><ol><li><p>创建一个邻接表接受无向图信息</p></li><li><p>创建队列接受已经访问过的节点</p></li><li><p>始自图中顶点开始搜索，将首先访问顶点；再依次访问顶点所有未访问到的邻居；再按后者被访问的先后次序，逐个访问它们的邻居；如此不断，直至所有的点均被访问过</p><a id="more"></a><h1 id="程序实现"><a href="#程序实现" class="headerlink" title="程序实现"></a><strong>程序实现</strong></h1></li></ol><ul><li><p>C</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXVEX 10</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TRUE 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FALSE 0</span></span><br><span class="line"><span class="comment">/* Status是函数的类型,其值是函数结果状态代码，如OK等 */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;</span><br><span class="line"><span class="comment">/* 顶点类型应由用户定义  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> VertexType;</span><br><span class="line"><span class="comment">/* 边上的权值类型应由用户定义 */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> EdgeType;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 邻接表的数据结构 */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">EdgeNode</span> {</span></span><br><span class="line">    <span class="comment">// 邻接点域,存储该顶点对应的下标</span></span><br><span class="line">    <span class="keyword">int</span> adjvex;</span><br><span class="line">    <span class="comment">// 链域,指向下一个邻接点</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">EdgeNode</span> *<span class="title">next</span>;</span></span><br><span class="line">} EdgeNode;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 顶点表结点</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">VertexNode</span> {</span></span><br><span class="line">    <span class="comment">// 顶点域,存储顶点信息</span></span><br><span class="line">    VertexType data;</span><br><span class="line">    <span class="comment">// 边表头指针</span></span><br><span class="line">    EdgeNode *firstedge;</span><br><span class="line">} VertexNode, AdjList[MAXVEX];</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> {</span></span><br><span class="line">    AdjList adjList;</span><br><span class="line">    <span class="comment">// 图中顶点数</span></span><br><span class="line">    <span class="keyword">int</span> numNodes;</span><br><span class="line">    <span class="comment">// 图中边数</span></span><br><span class="line">    <span class="keyword">int</span> numEdges;</span><br><span class="line">} GraphAdjList, *GraphList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 队列的数据结构 */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> {</span></span><br><span class="line">    <span class="keyword">int</span> data[MAXVEX];</span><br><span class="line">    <span class="keyword">int</span> front;</span><br><span class="line">    <span class="keyword">int</span> rear;</span><br><span class="line">} Queue;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">initQueue</span><span class="params">(Queue *q)</span></span>;</span><br><span class="line"><span class="function">Status <span class="title">emptyQueue</span><span class="params">(Queue *q)</span></span>;</span><br><span class="line"><span class="function">Status <span class="title">enterQueue</span><span class="params">(Queue *q, <span class="keyword">int</span> data)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createMyGraph</span><span class="params">(GraphList *plus)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">(GraphList plus)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    GraphList plus;</span><br><span class="line">    createMyGraph(&amp;plus);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; plus-&gt;numNodes; i++) {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%c:\t"</span>, plus-&gt;adjList[i].data);</span><br><span class="line">        EdgeNode *e;</span><br><span class="line">        e = plus-&gt;adjList[i].firstedge;</span><br><span class="line">        <span class="keyword">while</span> (e != <span class="literal">NULL</span>) {</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%c\t"</span>, plus-&gt;adjList[e-&gt;adjvex].data);</span><br><span class="line">            e = e-&gt;next;</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">free</span>(e);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    }</span><br><span class="line">    BFS(plus);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  初始化队列</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">Status <span class="title">initQueue</span><span class="params">(Queue *q)</span> </span>{</span><br><span class="line">    q-&gt;front = <span class="number">0</span>;</span><br><span class="line">    q-&gt;rear = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断队列是否为空</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">Status <span class="title">emptyQueue</span><span class="params">(Queue *q)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (q-&gt;front == q-&gt;rear) {</span><br><span class="line">        <span class="keyword">return</span> TRUE;</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 入队操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">Status <span class="title">enterQueue</span><span class="params">(Queue *q, <span class="keyword">int</span> data)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> ((q-&gt;rear + <span class="number">1</span>) % MAXVEX == q-&gt;front) {</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    }</span><br><span class="line">    q-&gt;data[q-&gt;rear] = data;</span><br><span class="line">    q-&gt;rear = (q-&gt;rear + <span class="number">1</span>) % MAXVEX;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 出队操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">Status <span class="title">deQueue</span><span class="params">(Queue *q, <span class="keyword">int</span> *e)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (emptyQueue(q)) {</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    }</span><br><span class="line">    *e = q-&gt;data[q-&gt;front];</span><br><span class="line">    q-&gt;front = (q-&gt;front + <span class="number">1</span>) % MAXVEX;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建无向图</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createMyGraph</span><span class="params">(GraphList *plus)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> i, j, k, w;</span><br><span class="line">    EdgeNode *e;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入顶点数和边数:\n"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d,%d"</span>, &amp;i, &amp;j);</span><br><span class="line">    *plus = (GraphList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(GraphAdjList));</span><br><span class="line">    getchar();</span><br><span class="line">    (*plus)-&gt;numNodes = i;</span><br><span class="line">    (*plus)-&gt;numEdges = j;</span><br><span class="line">    <span class="comment">// 读入顶点数</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; (*plus)-&gt;numNodes; i++) {</span><br><span class="line">        <span class="comment">// 输入顶点信息</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%c"</span>, &amp;(*plus)-&gt;adjList[i].data);</span><br><span class="line">        <span class="comment">// 将边表置为空表</span></span><br><span class="line">        (*plus)-&gt;adjList[i].firstedge=<span class="literal">NULL</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读入numEdges条边，建立邻接矩阵</span></span><br><span class="line">    <span class="keyword">for</span>(k = <span class="number">0</span>; k &lt; (*plus)-&gt;numEdges; k++) {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"输入边(vi,vj)上的下标i,下标j:\n"</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d,%d"</span>, &amp;i, &amp;j);</span><br><span class="line">        <span class="comment">// 向内存申请空间,生成边表结点</span></span><br><span class="line">        e = (EdgeNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(EdgeNode));</span><br><span class="line">        <span class="comment">// 邻接序号为j</span></span><br><span class="line">        e-&gt;adjvex = j;</span><br><span class="line">        <span class="comment">// 将e的指针指向当前顶点上指向的结点</span></span><br><span class="line">        e-&gt;next = (*plus)-&gt;adjList[i].firstedge;</span><br><span class="line">        <span class="comment">// 将当前顶点的指针指向e</span></span><br><span class="line">        (*plus)-&gt;adjList[i].firstedge = e;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 因为是无向图，所以需对称存储</span></span><br><span class="line">        <span class="comment">// 向内存申请空间,生成边表结点</span></span><br><span class="line">        e=(EdgeNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(EdgeNode));</span><br><span class="line">        <span class="comment">// 邻接序号为i</span></span><br><span class="line">        e-&gt;adjvex=i;</span><br><span class="line">        <span class="comment">// 将e的指针指向当前顶点上指向的结点</span></span><br><span class="line">        e-&gt;next= (*plus)-&gt;adjList[j].firstedge;</span><br><span class="line">        <span class="comment">// 将当前顶点的指针指向e</span></span><br><span class="line">        (*plus)-&gt;adjList[j].firstedge=e;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问标志的数组</span></span><br><span class="line"><span class="keyword">int</span> visited[MAXVEX];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">(GraphList plus)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    EdgeNode *p;</span><br><span class="line">    Queue q;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; plus-&gt;numNodes; i++) {</span><br><span class="line">        visited[i] = FALSE;</span><br><span class="line">    }</span><br><span class="line">    initQueue(&amp;q);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; plus-&gt;numNodes; i++) {</span><br><span class="line">        <span class="keyword">if</span> (!visited[i]) {</span><br><span class="line">            visited[i] = TRUE;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%c "</span>, plus-&gt;adjList[i].data);</span><br><span class="line">            enterQueue(&amp;q, i);</span><br><span class="line">            <span class="keyword">while</span> (!emptyQueue(&amp;q)) {</span><br><span class="line">                deQueue(&amp;q, &amp;i);</span><br><span class="line">                <span class="comment">// 找到当前顶点的边表链表头指针</span></span><br><span class="line">                p = plus-&gt;adjList[i].firstedge;</span><br><span class="line">                <span class="keyword">while</span> (p != <span class="literal">NULL</span>) {</span><br><span class="line">                    <span class="keyword">if</span> (!visited[p-&gt;adjvex]) {</span><br><span class="line">                        visited[p-&gt;adjvex] = TRUE;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"%c "</span>, plus-&gt;adjList[p-&gt;adjvex].data);</span><br><span class="line">                        enterQueue(&amp;q, p-&gt;adjvex);</span><br><span class="line">                    }</span><br><span class="line">                    p = p-&gt;next;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><h1 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a><strong>运行结果</strong></h1><p><strong><img src="https://oscimg.oschina.net/oscnet/5c0698a6e1333d9af6829d7c5f3a9c7e62b.jpg" alt=""></strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;&lt;strong&gt;问题描述&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;使用邻接表存储下图所示无向图，使用&lt;strong&gt;广度优先搜索&lt;/strong&gt;遍历无向图上的各节点&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;    &lt;img src=&quot;https://oscimg.oschina.net/oscnet/d91273ff377e75ed1521303d0a8d51f46d8.jpg&quot; alt=&quot;&quot;&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&quot;解题思路&quot;&gt;&lt;a href=&quot;#解题思路&quot; class=&quot;headerlink&quot; title=&quot;解题思路&quot;&gt;&lt;/a&gt;&lt;strong&gt;解题思路&lt;/strong&gt;&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;创建一个邻接表接受无向图信息&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;创建队列接受已经访问过的节点&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;始自图中顶点开始搜索，将首先访问顶点；再依次访问顶点所有未访问到的邻居；再按后者被访问的先后次序，逐个访问它们的邻居；如此不断，直至所有的点均被访问过&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
      <category term="数据结构" scheme="https://niithub.cn/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="图" scheme="https://niithub.cn/tags/%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>阅读过的书籍</title>
    <link href="https://niithub.cn//posts/42233/"/>
    <id>https://niithub.cn//posts/42233/</id>
    <published>2019-05-13T12:27:00.000Z</published>
    <updated>2021-10-13T16:21:04.013Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2018年"><a href="#2018年" class="headerlink" title="2018年"></a><strong>2018年</strong></h1><ul><li><p><strong>西南联大行思录</strong></p><p>   本书是作者浸润于“西南联大”的成果。其间，作者走访海峡两岸的西南联大老校友，亲身接触、交谈，拍摄出电视纪录片数部，积累案头笔记、文献等一手材料不计其数，甚至不乏独家所有。作者寻访西南联大老校友，目的在于寻访“西南联大精神”——在中西合璧下，既有“天下兴亡，匹夫有责”，也有“独立人格，自由精神”的人文精神。本书用文学化的语言进行纪实性的描述，人物访谈时的讲话穿插其中，章法上也化整为零。在一个个小专题内，可见出西南联大人活生生的精神面貌，和对国家、民族的赤诚与担当，更可见出作者对当下文化教育建设的思考与忧虑。从“西南联大”到今天，历史的精神就在“行”与“思”之间跳动，对那激情岁月与美好人格的怀念向往，跃然纸上。</p></li></ul><hr><ul><li><p><strong>万历十五年</strong></p><p>   万历十五年，亦即公元1587年，在西欧历史上为西班牙舰队全部出动征英的前一年；而在中国，这平平淡淡的一年中，发生了若干为历史学家所易于忽视的事件。这些事件，表面看来虽似末端小节，但实质上却是以前发生大事的症结，也是将在以后掀起波澜的机缘。在历史学家黄仁宇的眼中，其间的关系因果，恰为历史的重点，而我们的大历史之旅，也自此开始……</p><p>   《万历十五年》是黄仁宇的成名之作，也是他的代表作之一。这本书融会了他数十年人生经历与治学体会，首次以“大历史观”分析明代社会之症结，观察现代中国之来路，给人启发良多。英文原本推出后，被美国多所大学采用为教科书，并两次获得美国书卷奖历史类好书的提名。</p><a id="more"></a></li></ul><hr><ul><li><p><strong>阿里巴巴Java开发手册</strong></p><p>   《阿里巴巴Java开发手册》的愿景是码出高效，码出质量。它结合作者的开发经验和架构历程，提炼阿里巴巴集团技术团队的集体编程经验和软件设计智慧，浓缩成为立体的编程规范和最佳实践。众所周知，现代软件行业的高速发展对开发者的综合素质要求越来越高，因为不仅是编程相关的知识点，其他维度的知识点也会影响软件的最终交付质量，比如，数据库的表结构和索引设计缺陷可能带来软件的架构缺陷或性能风险；单元测试的失位导致集成测试困难；没有鉴权的漏洞代码易被黑客攻击等。所以，本手册以开发者为中心视角，划分为编程规约、异常日志、单元测试、安全规约、MySQL数据库、工程结构、设计规约七个维度，每个条目下有相应的扩展解释和说明，正例和反例，全面、立体、形象地帮助到开发者的成长和团队代码规约文化的形成。</p><p>   从严格意义上讲，《阿里巴巴Java开发手册》超越了Java语言本身，明确作为一名合格开发者应该具备的基本素质，因此本手册适合计算机相关行业的管理者和研发人员、高等院校的计算机专业师生、求职者等阅读，希望成为大家如良师益友般的工作手册、工具字典和床头书。</p></li></ul><hr><ul><li><p><strong>像计算机科学家一样思考Java</strong></p><p>   《像计算机科学家一样思考Java》作者基于自己在美国各所大学和学院讲授计算机科学导论课程的经验，开创了“像计算机科学家一样思考(Howto Think Like a ComputerScientist)”的教学理念和方法。《像计算机科学家一样思考Java》正是基于这样的方法，用全新的角度、丰富的实例全面地讲解了Java语言。</p><p>   全书共15章。第1章介绍了编程的基本知识，即什么是编程以及如何编程。第2章到第4章分别介绍了变量和类型、无返回值方法、条件语句和递归等基础知识；第6章到第9章分别介绍了带返回值的方法、迭代、循环、字符串和可变对象；第11章到第15章则分别介绍了对象、数组、面向对象编程等相对高级的话题。全书贯穿了一个GridWorld的程序示例，分三个部分逐步扩展，分别在第5章、第10章和第16章介绍，用以巩固前面相应各章所介绍的知识和概念。附录A介绍了Java图形编程，附录B介绍了Java中的输入输出，附录C和D分别从程序开发和调试的角度给出了有用的建议。</p><p>   《像计算机科学家一样思考Java》适合Java的初学者和初级程序员阅读，也可以作为相关专业或培训的教程使用。通过学习《像计算机科学家一样思考Java》，读者不仅可以在Java方面达到初窥门径的效果，同时对于如何掌握和应用计算机编程这门技艺也会有一个全面而科学的认识。</p></li></ul><hr><ul><li><p><strong>重构-改善既有代码的设计</strong></p><p>   Martin Fowler和《重构:改善既有代码的设计》(中文版)另几位作者清楚揭示了重构过程，他们为面向对象软件开发所做的贡献，难以衡量。《重构:改善既有代码的设计》(中文版)解释重构的原理（principles）和最佳实践方式（best practices），并指出何时何地你应该开始挖掘你的代码以求改善。《重构:改善既有代码的设计》(中文版)的核心是一份完整的重构名录（catalog of refactoring），其中每一项都介绍一种经过实证的代码变换手法（code transformation）的动机和技术。某些项目如Extract Method和Move Field看起来可能很浅显，但不要掉以轻心，因为理解这类技术正是有条不紊地进行重构的关键。</p></li></ul><hr><ul><li><p><strong>未来世界的幸存者-阮一峰</strong></p><p>   本书为阮一峰博客文集，主要收录的是作者对技术变革的影响的一些思考，希望能够藉此书让读者意识到世界正在剧烈变化，洪水就在不远处，从而早早准备出路。本书适合所有乐于思考的读者。</p></li></ul><hr><ul><li><p><strong>微软的梦工场</strong></p><p>   今年微软亚洲研究院建立十周年，研究院的研究员们纷纷撰文，汇成本书。他们中间，有当年的高考状元，曾经的少年班学子，有“深蓝之父”，有拥有多项专利的 “技术牛人”，有蜚声业界的著名专家，也有尚未出道的年轻学者；通过文化、人才、技术三个角度，揭示微软亚洲研究院独特的文化氛围，记述各自成长的经历，揭密诸多新技术诞生的过程；由微软人说微软自己的故事，生动、直观地介绍号称“世界上最火的实验室”以及被称为“世界上智商最高的人才群体”的真实风貌；同时，通过介绍微软亚洲研究院十年的发展，抽象出一个计算机基础研究机构的成长概貌，特别是总结一个外企研究机构在中国的发展历程，为其他研究机构提供一定的参考意义。</p><p>   本书汇聚了技术创新、企业文化、人才培养、职业规划、奋斗励志以及东西方文化碰撞等方面诸多鲜活的事例，可以为读者了解最新的计算机技术、外企文化以及个人成才提供一定的借鉴。</p></li></ul><hr><ul><li><p><strong>黑客与画家</strong></p><p>   本书是硅谷创业之父Paul Graham 的文集，主要介绍黑客即优秀程序员的爱好和动机，讨论黑客成长、黑客对世界的贡献以及编程语言和黑客工作方法等所有对计算机时代感兴趣的人的一些话题。书中的内容不但有助于了解计算机编程的本质、互联网行业的规则，还会帮助读者了解我们这个时代，迫使读者独立思考。</p><p>   本书适合所有程序员和互联网创业者，也适合一切对计算机行业感兴趣的读者。</p><p><strong>精彩文段精选 </strong></p><pre><code>1. 要根据社会需要，改造自己的思想     2. 事实上，财富与金钱是两个概念。金钱只是用来交易财富的一种手段，财富才是有价值的东西 3. 人们真正注意到你的时候，不是第一眼看到你站在那里，而是发现过了这么久你居然还在那里</code></pre></li></ul><h1 id="2019年"><a href="#2019年" class="headerlink" title="2019年"></a>2019年</h1><ul><li><p><strong>1984</strong></p><p>   《1984》是一部杰出的政治寓言小说，也是一部幻想小说。作品刻画了人类在极权主义社会的生存状态，有若一个永不褪色的警示标签，警醒世人提防这种预想中的黑暗成为现实。历经几十年，其生命力益显强大，被誉为20世纪影响最为深远的文学经典之一。</p><p>   <strong>精彩文段精选 </strong></p><pre><code>1.  你能够创造死人，却不能创造活人。一旦伪造工作被遗忘后，它就会像凯撒大帝一样真实的存在。2.  过去给抹掉了，而抹掉本身又被遗忘了，谎言便变成了真话。3.  我懂得方法，我不懂得原因。</code></pre></li></ul><hr><ul><li><p><strong>黑旗</strong></p><p>   荣获第100届普利策奖非虚构类作品奖，以约旦国王阿卜杜拉二世的视角看待中东乱局。</p></li></ul><hr><ul><li><p><strong>软技能-代码之外的生存指南</strong></p><p>   这是一本真正从“人”（而非技术也非管理）的角度关注软件开发人员自身发展的书。书中论述的内容既涉及生活习惯，又包括思维方式，凸显技术中“人”的因素，全面讲解软件行业从业人员所需知道的所有“软技能”。本书聚焦于软件开发人员生活的方方面面，从揭秘面试的流程到精耕细作出一份杀手级简历，从创建大受欢迎的博客到打造你，从提高自己工作效率到与如何与“拖延症”做斗争，甚至包括如何投资不动产，如何关注自己的健康。本书共分为职业篇、自我营销篇、学习篇、生产力篇、理财篇、健身篇、精神篇等七篇，概括了软件行业从业人员所需的“软技能”。通过阅读本书，软件工程人员、编程人员和其他技术人员能够积极思考自己的职业生涯，丰富自己的生活，让自己更接近成功。</p><p>  <strong>精彩文段精选 </strong></p><pre><code>1.  尽管我们为自己的智慧感到骄傲，但我们依然是情感动物。我们就像那些穿着西装、打着领带、四处游荡的小孩，假装自己已经长大，其实任何轻微的伤害都能让我们嚎嚎大哭，或者大发雷霆，我们只是已经学会了如何控制和隐藏这些情绪。2.  从表面上看，身为“专才”后，潜在雇主和客户群都变小了，但是实际上你对他们更具有吸引力了。3.  许多软件开发人员犯的一个巨大的错误就是，当无法达到标准时，他们不完善自己、迎接挑战，而是降低标准。4.  很好的创业候选是能够申请专利或受保护的新技术和新方法，而糟糕的创业候选则包括餐厅或其他缺乏独创、很容易被复制的服务。</code></pre></li></ul><hr><ul><li><p><strong>大学之路：：陪女儿在美国选大学-上册</strong></p><p>   作者吴军曾在清华大学就读和任教，之后在美国约翰·霍普金斯大学获得博士学位，又因事业有成而成为该校工学院的董事，得以多年来参与美国名牌大学的管理，并且将女儿培养进入麻省理工学院。作者以他和女儿走访过的英美十几所顶级大学为样本，结合他多年来对美国高等教育的系统研究，以及访问这些大学教师和校友的第一手资料，加上自己的深入思考与独到感悟，精心写就《大学之路》。</p><p>   在书中，作者阐述了英美著名教育家的教育理念，系统地介绍了英美名校的特色和差异，比较了中美两国在教育上的差异，并且结合自己的亲身体会，对年轻人给出了自我发展的建议。作者与美国许多大学有着密切联系，还介绍了美国名牌大学在招生中许多不为人知的细节，并重点解析了其中一些潜规则的历史成因和申请者可能有必要采取的对策。</p><p>   作为一名事业有成者，作者详细阐述了教育在人生中的重要性，并特别强调人生是一场马拉松，教育乃终身学习，而并非以获得一个名牌大学学位为终结。对大学教育这一严肃话题，作者以一种轻松自在的方式娓娓道来。上册主要介绍了英美大学的教育方法、办学理念和招生特点。下册作者则以半游记的形式，带领读者走访十多所英美名校，既让人如身临其境，又通过一个个实例帮助读者了解各个名校的特点。本书对教育工作者、家长和学生以及留学机构都有一定的借鉴和参考价值。</p><p>  <strong>    精彩文段精选 </strong></p><pre><code>1. 真正的人，就是八个字，第一真实，第二善良，第三健康，第四快乐。"我觉得我们教育的目标，就是培养和造就拥有现代知识技能和独立思考能力，同时对匡家和社会有所担当的人才。2. 一所好的大学，应该扮演四个角色。首先它是培养人才的地方，将那些有潜力、有志向的年轻人培养成对未来社会有所贡献的人；第二，它是一个研究的中心，引领世界科技的发展，并且会对一个国家、一个地区产生积极正面的影响；第三，它是一个新思想、新文化的发源地，能推动社会的进步；第四，它是年轻人的家，是他们度过人生好时光的地方。</code></pre></li></ul><hr><ul><li><p><strong>智能时代</strong></p><p>   大数据和机器智能的出现，对我们的技术发展、商业和社会都会产生重大的影响。作者吴军在《智能时代：大数据与智能革命重新定义未来》中指出，首先，我们在过去认为非常难以解决的问题，会因为大数据和机器智能的使用而迎刃而解，比如解决癌症个性化治疗的难题。同时，大数据和机器智能还会彻底改变未来的商业模式，很多传统的行业都将采用智能技术实现升级换代，同时改变原有的商业模式。大数据和机器智能对于未来社会的影响是全方位的。</p><p>  <strong>    精彩文段精选 </strong></p><pre><code>1. 数据和信息还是稍有不同，虽然它最大的作用在于承载信息，但是并非所有的数据都承载了有意义的信息。2. 处理信息和数据可以说是人类所特有的本事，而这个本事的大小和现代智人的社会发展有关。3. 得到数据和使用数据的能力，是衡量文明发展水平的标准之一。4. 统计学，有时又被称为数理统计，是建立在概率论基础之上，收集、处理和分析数据，找到数据内在的关联性和规律性的学科。5. 大数据的第三个重要特征，也是人们常常忽视的，就是它的全面性，或者说完备性。6. 深蓝的团队其实把一个机器智能的问题变成了一个大数据的问题和大量计算的问题。</code></pre></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;2018年&quot;&gt;&lt;a href=&quot;#2018年&quot; class=&quot;headerlink&quot; title=&quot;2018年&quot;&gt;&lt;/a&gt;&lt;strong&gt;2018年&lt;/strong&gt;&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;西南联大行思录&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;   本书是作者浸润于“西南联大”的成果。其间，作者走访海峡两岸的西南联大老校友，亲身接触、交谈，拍摄出电视纪录片数部，积累案头笔记、文献等一手材料不计其数，甚至不乏独家所有。作者寻访西南联大老校友，目的在于寻访“西南联大精神”——在中西合璧下，既有“天下兴亡，匹夫有责”，也有“独立人格，自由精神”的人文精神。本书用文学化的语言进行纪实性的描述，人物访谈时的讲话穿插其中，章法上也化整为零。在一个个小专题内，可见出西南联大人活生生的精神面貌，和对国家、民族的赤诚与担当，更可见出作者对当下文化教育建设的思考与忧虑。从“西南联大”到今天，历史的精神就在“行”与“思”之间跳动，对那激情岁月与美好人格的怀念向往，跃然纸上。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;万历十五年&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;   万历十五年，亦即公元1587年，在西欧历史上为西班牙舰队全部出动征英的前一年；而在中国，这平平淡淡的一年中，发生了若干为历史学家所易于忽视的事件。这些事件，表面看来虽似末端小节，但实质上却是以前发生大事的症结，也是将在以后掀起波澜的机缘。在历史学家黄仁宇的眼中，其间的关系因果，恰为历史的重点，而我们的大历史之旅，也自此开始……&lt;/p&gt;
&lt;p&gt;   《万历十五年》是黄仁宇的成名之作，也是他的代表作之一。这本书融会了他数十年人生经历与治学体会，首次以“大历史观”分析明代社会之症结，观察现代中国之来路，给人启发良多。英文原本推出后，被美国多所大学采用为教科书，并两次获得美国书卷奖历史类好书的提名。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
      <category term="日常记录" scheme="https://niithub.cn/categories/%E6%97%A5%E5%B8%B8%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="阅读" scheme="https://niithub.cn/tags/%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
</feed>
